// Code generated by ent, DO NOT EDIT.

package pitcherrecord

import (
	"mystats-server/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldID, id))
}

// Games applies equality check predicate on the "games" field. It's identical to GamesEQ.
func Games(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldGames, v))
}

// Era applies equality check predicate on the "era" field. It's identical to EraEQ.
func Era(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldEra, v))
}

// Wins applies equality check predicate on the "wins" field. It's identical to WinsEQ.
func Wins(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWins, v))
}

// Losses applies equality check predicate on the "losses" field. It's identical to LossesEQ.
func Losses(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldLosses, v))
}

// Saves applies equality check predicate on the "saves" field. It's identical to SavesEQ.
func Saves(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldSaves, v))
}

// Holds applies equality check predicate on the "holds" field. It's identical to HoldsEQ.
func Holds(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHolds, v))
}

// WinningPct applies equality check predicate on the "winning_pct" field. It's identical to WinningPctEQ.
func WinningPct(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWinningPct, v))
}

// BattersFaced applies equality check predicate on the "batters_faced" field. It's identical to BattersFacedEQ.
func BattersFaced(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldBattersFaced, v))
}

// OpponentAtBats applies equality check predicate on the "opponent_at_bats" field. It's identical to OpponentAtBatsEQ.
func OpponentAtBats(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldOpponentAtBats, v))
}

// Innings applies equality check predicate on the "innings" field. It's identical to InningsEQ.
func Innings(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldInnings, v))
}

// HitsAllowed applies equality check predicate on the "hits_allowed" field. It's identical to HitsAllowedEQ.
func HitsAllowed(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHitsAllowed, v))
}

// HomerunsAllowed applies equality check predicate on the "homeruns_allowed" field. It's identical to HomerunsAllowedEQ.
func HomerunsAllowed(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHomerunsAllowed, v))
}

// Walks applies equality check predicate on the "walks" field. It's identical to WalksEQ.
func Walks(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWalks, v))
}

// HitByPitch applies equality check predicate on the "hit_by_pitch" field. It's identical to HitByPitchEQ.
func HitByPitch(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHitByPitch, v))
}

// Strikeouts applies equality check predicate on the "strikeouts" field. It's identical to StrikeoutsEQ.
func Strikeouts(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldStrikeouts, v))
}

// EarnedRuns applies equality check predicate on the "earned_runs" field. It's identical to EarnedRunsEQ.
func EarnedRuns(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldEarnedRuns, v))
}

// Whip applies equality check predicate on the "whip" field. It's identical to WhipEQ.
func Whip(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWhip, v))
}

// OpponentAvg applies equality check predicate on the "opponent_avg" field. It's identical to OpponentAvgEQ.
func OpponentAvg(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldOpponentAvg, v))
}

// StrikeoutRate applies equality check predicate on the "strikeout_rate" field. It's identical to StrikeoutRateEQ.
func StrikeoutRate(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldStrikeoutRate, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// GamesEQ applies the EQ predicate on the "games" field.
func GamesEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldGames, v))
}

// GamesNEQ applies the NEQ predicate on the "games" field.
func GamesNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldGames, v))
}

// GamesIn applies the In predicate on the "games" field.
func GamesIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldGames, vs...))
}

// GamesNotIn applies the NotIn predicate on the "games" field.
func GamesNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldGames, vs...))
}

// GamesGT applies the GT predicate on the "games" field.
func GamesGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldGames, v))
}

// GamesGTE applies the GTE predicate on the "games" field.
func GamesGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldGames, v))
}

// GamesLT applies the LT predicate on the "games" field.
func GamesLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldGames, v))
}

// GamesLTE applies the LTE predicate on the "games" field.
func GamesLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldGames, v))
}

// EraEQ applies the EQ predicate on the "era" field.
func EraEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldEra, v))
}

// EraNEQ applies the NEQ predicate on the "era" field.
func EraNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldEra, v))
}

// EraIn applies the In predicate on the "era" field.
func EraIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldEra, vs...))
}

// EraNotIn applies the NotIn predicate on the "era" field.
func EraNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldEra, vs...))
}

// EraGT applies the GT predicate on the "era" field.
func EraGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldEra, v))
}

// EraGTE applies the GTE predicate on the "era" field.
func EraGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldEra, v))
}

// EraLT applies the LT predicate on the "era" field.
func EraLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldEra, v))
}

// EraLTE applies the LTE predicate on the "era" field.
func EraLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldEra, v))
}

// EraIsNil applies the IsNil predicate on the "era" field.
func EraIsNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIsNull(FieldEra))
}

// EraNotNil applies the NotNil predicate on the "era" field.
func EraNotNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotNull(FieldEra))
}

// WinsEQ applies the EQ predicate on the "wins" field.
func WinsEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWins, v))
}

// WinsNEQ applies the NEQ predicate on the "wins" field.
func WinsNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldWins, v))
}

// WinsIn applies the In predicate on the "wins" field.
func WinsIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldWins, vs...))
}

// WinsNotIn applies the NotIn predicate on the "wins" field.
func WinsNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldWins, vs...))
}

// WinsGT applies the GT predicate on the "wins" field.
func WinsGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldWins, v))
}

// WinsGTE applies the GTE predicate on the "wins" field.
func WinsGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldWins, v))
}

// WinsLT applies the LT predicate on the "wins" field.
func WinsLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldWins, v))
}

// WinsLTE applies the LTE predicate on the "wins" field.
func WinsLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldWins, v))
}

// LossesEQ applies the EQ predicate on the "losses" field.
func LossesEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldLosses, v))
}

// LossesNEQ applies the NEQ predicate on the "losses" field.
func LossesNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldLosses, v))
}

// LossesIn applies the In predicate on the "losses" field.
func LossesIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldLosses, vs...))
}

// LossesNotIn applies the NotIn predicate on the "losses" field.
func LossesNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldLosses, vs...))
}

// LossesGT applies the GT predicate on the "losses" field.
func LossesGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldLosses, v))
}

// LossesGTE applies the GTE predicate on the "losses" field.
func LossesGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldLosses, v))
}

// LossesLT applies the LT predicate on the "losses" field.
func LossesLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldLosses, v))
}

// LossesLTE applies the LTE predicate on the "losses" field.
func LossesLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldLosses, v))
}

// SavesEQ applies the EQ predicate on the "saves" field.
func SavesEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldSaves, v))
}

// SavesNEQ applies the NEQ predicate on the "saves" field.
func SavesNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldSaves, v))
}

// SavesIn applies the In predicate on the "saves" field.
func SavesIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldSaves, vs...))
}

// SavesNotIn applies the NotIn predicate on the "saves" field.
func SavesNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldSaves, vs...))
}

// SavesGT applies the GT predicate on the "saves" field.
func SavesGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldSaves, v))
}

// SavesGTE applies the GTE predicate on the "saves" field.
func SavesGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldSaves, v))
}

// SavesLT applies the LT predicate on the "saves" field.
func SavesLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldSaves, v))
}

// SavesLTE applies the LTE predicate on the "saves" field.
func SavesLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldSaves, v))
}

// HoldsEQ applies the EQ predicate on the "holds" field.
func HoldsEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHolds, v))
}

// HoldsNEQ applies the NEQ predicate on the "holds" field.
func HoldsNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldHolds, v))
}

// HoldsIn applies the In predicate on the "holds" field.
func HoldsIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldHolds, vs...))
}

// HoldsNotIn applies the NotIn predicate on the "holds" field.
func HoldsNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldHolds, vs...))
}

// HoldsGT applies the GT predicate on the "holds" field.
func HoldsGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldHolds, v))
}

// HoldsGTE applies the GTE predicate on the "holds" field.
func HoldsGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldHolds, v))
}

// HoldsLT applies the LT predicate on the "holds" field.
func HoldsLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldHolds, v))
}

// HoldsLTE applies the LTE predicate on the "holds" field.
func HoldsLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldHolds, v))
}

// WinningPctEQ applies the EQ predicate on the "winning_pct" field.
func WinningPctEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWinningPct, v))
}

// WinningPctNEQ applies the NEQ predicate on the "winning_pct" field.
func WinningPctNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldWinningPct, v))
}

// WinningPctIn applies the In predicate on the "winning_pct" field.
func WinningPctIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldWinningPct, vs...))
}

// WinningPctNotIn applies the NotIn predicate on the "winning_pct" field.
func WinningPctNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldWinningPct, vs...))
}

// WinningPctGT applies the GT predicate on the "winning_pct" field.
func WinningPctGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldWinningPct, v))
}

// WinningPctGTE applies the GTE predicate on the "winning_pct" field.
func WinningPctGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldWinningPct, v))
}

// WinningPctLT applies the LT predicate on the "winning_pct" field.
func WinningPctLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldWinningPct, v))
}

// WinningPctLTE applies the LTE predicate on the "winning_pct" field.
func WinningPctLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldWinningPct, v))
}

// WinningPctIsNil applies the IsNil predicate on the "winning_pct" field.
func WinningPctIsNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIsNull(FieldWinningPct))
}

// WinningPctNotNil applies the NotNil predicate on the "winning_pct" field.
func WinningPctNotNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotNull(FieldWinningPct))
}

// BattersFacedEQ applies the EQ predicate on the "batters_faced" field.
func BattersFacedEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldBattersFaced, v))
}

// BattersFacedNEQ applies the NEQ predicate on the "batters_faced" field.
func BattersFacedNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldBattersFaced, v))
}

// BattersFacedIn applies the In predicate on the "batters_faced" field.
func BattersFacedIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldBattersFaced, vs...))
}

// BattersFacedNotIn applies the NotIn predicate on the "batters_faced" field.
func BattersFacedNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldBattersFaced, vs...))
}

// BattersFacedGT applies the GT predicate on the "batters_faced" field.
func BattersFacedGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldBattersFaced, v))
}

// BattersFacedGTE applies the GTE predicate on the "batters_faced" field.
func BattersFacedGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldBattersFaced, v))
}

// BattersFacedLT applies the LT predicate on the "batters_faced" field.
func BattersFacedLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldBattersFaced, v))
}

// BattersFacedLTE applies the LTE predicate on the "batters_faced" field.
func BattersFacedLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldBattersFaced, v))
}

// OpponentAtBatsEQ applies the EQ predicate on the "opponent_at_bats" field.
func OpponentAtBatsEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldOpponentAtBats, v))
}

// OpponentAtBatsNEQ applies the NEQ predicate on the "opponent_at_bats" field.
func OpponentAtBatsNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldOpponentAtBats, v))
}

// OpponentAtBatsIn applies the In predicate on the "opponent_at_bats" field.
func OpponentAtBatsIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldOpponentAtBats, vs...))
}

// OpponentAtBatsNotIn applies the NotIn predicate on the "opponent_at_bats" field.
func OpponentAtBatsNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldOpponentAtBats, vs...))
}

// OpponentAtBatsGT applies the GT predicate on the "opponent_at_bats" field.
func OpponentAtBatsGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldOpponentAtBats, v))
}

// OpponentAtBatsGTE applies the GTE predicate on the "opponent_at_bats" field.
func OpponentAtBatsGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldOpponentAtBats, v))
}

// OpponentAtBatsLT applies the LT predicate on the "opponent_at_bats" field.
func OpponentAtBatsLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldOpponentAtBats, v))
}

// OpponentAtBatsLTE applies the LTE predicate on the "opponent_at_bats" field.
func OpponentAtBatsLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldOpponentAtBats, v))
}

// InningsEQ applies the EQ predicate on the "innings" field.
func InningsEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldInnings, v))
}

// InningsNEQ applies the NEQ predicate on the "innings" field.
func InningsNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldInnings, v))
}

// InningsIn applies the In predicate on the "innings" field.
func InningsIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldInnings, vs...))
}

// InningsNotIn applies the NotIn predicate on the "innings" field.
func InningsNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldInnings, vs...))
}

// InningsGT applies the GT predicate on the "innings" field.
func InningsGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldInnings, v))
}

// InningsGTE applies the GTE predicate on the "innings" field.
func InningsGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldInnings, v))
}

// InningsLT applies the LT predicate on the "innings" field.
func InningsLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldInnings, v))
}

// InningsLTE applies the LTE predicate on the "innings" field.
func InningsLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldInnings, v))
}

// HitsAllowedEQ applies the EQ predicate on the "hits_allowed" field.
func HitsAllowedEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHitsAllowed, v))
}

// HitsAllowedNEQ applies the NEQ predicate on the "hits_allowed" field.
func HitsAllowedNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldHitsAllowed, v))
}

// HitsAllowedIn applies the In predicate on the "hits_allowed" field.
func HitsAllowedIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldHitsAllowed, vs...))
}

// HitsAllowedNotIn applies the NotIn predicate on the "hits_allowed" field.
func HitsAllowedNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldHitsAllowed, vs...))
}

// HitsAllowedGT applies the GT predicate on the "hits_allowed" field.
func HitsAllowedGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldHitsAllowed, v))
}

// HitsAllowedGTE applies the GTE predicate on the "hits_allowed" field.
func HitsAllowedGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldHitsAllowed, v))
}

// HitsAllowedLT applies the LT predicate on the "hits_allowed" field.
func HitsAllowedLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldHitsAllowed, v))
}

// HitsAllowedLTE applies the LTE predicate on the "hits_allowed" field.
func HitsAllowedLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldHitsAllowed, v))
}

// HomerunsAllowedEQ applies the EQ predicate on the "homeruns_allowed" field.
func HomerunsAllowedEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHomerunsAllowed, v))
}

// HomerunsAllowedNEQ applies the NEQ predicate on the "homeruns_allowed" field.
func HomerunsAllowedNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldHomerunsAllowed, v))
}

// HomerunsAllowedIn applies the In predicate on the "homeruns_allowed" field.
func HomerunsAllowedIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldHomerunsAllowed, vs...))
}

// HomerunsAllowedNotIn applies the NotIn predicate on the "homeruns_allowed" field.
func HomerunsAllowedNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldHomerunsAllowed, vs...))
}

// HomerunsAllowedGT applies the GT predicate on the "homeruns_allowed" field.
func HomerunsAllowedGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldHomerunsAllowed, v))
}

// HomerunsAllowedGTE applies the GTE predicate on the "homeruns_allowed" field.
func HomerunsAllowedGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldHomerunsAllowed, v))
}

// HomerunsAllowedLT applies the LT predicate on the "homeruns_allowed" field.
func HomerunsAllowedLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldHomerunsAllowed, v))
}

// HomerunsAllowedLTE applies the LTE predicate on the "homeruns_allowed" field.
func HomerunsAllowedLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldHomerunsAllowed, v))
}

// WalksEQ applies the EQ predicate on the "walks" field.
func WalksEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWalks, v))
}

// WalksNEQ applies the NEQ predicate on the "walks" field.
func WalksNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldWalks, v))
}

// WalksIn applies the In predicate on the "walks" field.
func WalksIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldWalks, vs...))
}

// WalksNotIn applies the NotIn predicate on the "walks" field.
func WalksNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldWalks, vs...))
}

// WalksGT applies the GT predicate on the "walks" field.
func WalksGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldWalks, v))
}

// WalksGTE applies the GTE predicate on the "walks" field.
func WalksGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldWalks, v))
}

// WalksLT applies the LT predicate on the "walks" field.
func WalksLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldWalks, v))
}

// WalksLTE applies the LTE predicate on the "walks" field.
func WalksLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldWalks, v))
}

// HitByPitchEQ applies the EQ predicate on the "hit_by_pitch" field.
func HitByPitchEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldHitByPitch, v))
}

// HitByPitchNEQ applies the NEQ predicate on the "hit_by_pitch" field.
func HitByPitchNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldHitByPitch, v))
}

// HitByPitchIn applies the In predicate on the "hit_by_pitch" field.
func HitByPitchIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldHitByPitch, vs...))
}

// HitByPitchNotIn applies the NotIn predicate on the "hit_by_pitch" field.
func HitByPitchNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldHitByPitch, vs...))
}

// HitByPitchGT applies the GT predicate on the "hit_by_pitch" field.
func HitByPitchGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldHitByPitch, v))
}

// HitByPitchGTE applies the GTE predicate on the "hit_by_pitch" field.
func HitByPitchGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldHitByPitch, v))
}

// HitByPitchLT applies the LT predicate on the "hit_by_pitch" field.
func HitByPitchLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldHitByPitch, v))
}

// HitByPitchLTE applies the LTE predicate on the "hit_by_pitch" field.
func HitByPitchLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldHitByPitch, v))
}

// StrikeoutsEQ applies the EQ predicate on the "strikeouts" field.
func StrikeoutsEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldStrikeouts, v))
}

// StrikeoutsNEQ applies the NEQ predicate on the "strikeouts" field.
func StrikeoutsNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldStrikeouts, v))
}

// StrikeoutsIn applies the In predicate on the "strikeouts" field.
func StrikeoutsIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldStrikeouts, vs...))
}

// StrikeoutsNotIn applies the NotIn predicate on the "strikeouts" field.
func StrikeoutsNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldStrikeouts, vs...))
}

// StrikeoutsGT applies the GT predicate on the "strikeouts" field.
func StrikeoutsGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldStrikeouts, v))
}

// StrikeoutsGTE applies the GTE predicate on the "strikeouts" field.
func StrikeoutsGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldStrikeouts, v))
}

// StrikeoutsLT applies the LT predicate on the "strikeouts" field.
func StrikeoutsLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldStrikeouts, v))
}

// StrikeoutsLTE applies the LTE predicate on the "strikeouts" field.
func StrikeoutsLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldStrikeouts, v))
}

// EarnedRunsEQ applies the EQ predicate on the "earned_runs" field.
func EarnedRunsEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldEarnedRuns, v))
}

// EarnedRunsNEQ applies the NEQ predicate on the "earned_runs" field.
func EarnedRunsNEQ(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldEarnedRuns, v))
}

// EarnedRunsIn applies the In predicate on the "earned_runs" field.
func EarnedRunsIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldEarnedRuns, vs...))
}

// EarnedRunsNotIn applies the NotIn predicate on the "earned_runs" field.
func EarnedRunsNotIn(vs ...int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldEarnedRuns, vs...))
}

// EarnedRunsGT applies the GT predicate on the "earned_runs" field.
func EarnedRunsGT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldEarnedRuns, v))
}

// EarnedRunsGTE applies the GTE predicate on the "earned_runs" field.
func EarnedRunsGTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldEarnedRuns, v))
}

// EarnedRunsLT applies the LT predicate on the "earned_runs" field.
func EarnedRunsLT(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldEarnedRuns, v))
}

// EarnedRunsLTE applies the LTE predicate on the "earned_runs" field.
func EarnedRunsLTE(v int) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldEarnedRuns, v))
}

// WhipEQ applies the EQ predicate on the "whip" field.
func WhipEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldWhip, v))
}

// WhipNEQ applies the NEQ predicate on the "whip" field.
func WhipNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldWhip, v))
}

// WhipIn applies the In predicate on the "whip" field.
func WhipIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldWhip, vs...))
}

// WhipNotIn applies the NotIn predicate on the "whip" field.
func WhipNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldWhip, vs...))
}

// WhipGT applies the GT predicate on the "whip" field.
func WhipGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldWhip, v))
}

// WhipGTE applies the GTE predicate on the "whip" field.
func WhipGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldWhip, v))
}

// WhipLT applies the LT predicate on the "whip" field.
func WhipLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldWhip, v))
}

// WhipLTE applies the LTE predicate on the "whip" field.
func WhipLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldWhip, v))
}

// WhipIsNil applies the IsNil predicate on the "whip" field.
func WhipIsNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIsNull(FieldWhip))
}

// WhipNotNil applies the NotNil predicate on the "whip" field.
func WhipNotNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotNull(FieldWhip))
}

// OpponentAvgEQ applies the EQ predicate on the "opponent_avg" field.
func OpponentAvgEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldOpponentAvg, v))
}

// OpponentAvgNEQ applies the NEQ predicate on the "opponent_avg" field.
func OpponentAvgNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldOpponentAvg, v))
}

// OpponentAvgIn applies the In predicate on the "opponent_avg" field.
func OpponentAvgIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldOpponentAvg, vs...))
}

// OpponentAvgNotIn applies the NotIn predicate on the "opponent_avg" field.
func OpponentAvgNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldOpponentAvg, vs...))
}

// OpponentAvgGT applies the GT predicate on the "opponent_avg" field.
func OpponentAvgGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldOpponentAvg, v))
}

// OpponentAvgGTE applies the GTE predicate on the "opponent_avg" field.
func OpponentAvgGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldOpponentAvg, v))
}

// OpponentAvgLT applies the LT predicate on the "opponent_avg" field.
func OpponentAvgLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldOpponentAvg, v))
}

// OpponentAvgLTE applies the LTE predicate on the "opponent_avg" field.
func OpponentAvgLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldOpponentAvg, v))
}

// OpponentAvgIsNil applies the IsNil predicate on the "opponent_avg" field.
func OpponentAvgIsNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIsNull(FieldOpponentAvg))
}

// OpponentAvgNotNil applies the NotNil predicate on the "opponent_avg" field.
func OpponentAvgNotNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotNull(FieldOpponentAvg))
}

// StrikeoutRateEQ applies the EQ predicate on the "strikeout_rate" field.
func StrikeoutRateEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldStrikeoutRate, v))
}

// StrikeoutRateNEQ applies the NEQ predicate on the "strikeout_rate" field.
func StrikeoutRateNEQ(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldStrikeoutRate, v))
}

// StrikeoutRateIn applies the In predicate on the "strikeout_rate" field.
func StrikeoutRateIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldStrikeoutRate, vs...))
}

// StrikeoutRateNotIn applies the NotIn predicate on the "strikeout_rate" field.
func StrikeoutRateNotIn(vs ...float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldStrikeoutRate, vs...))
}

// StrikeoutRateGT applies the GT predicate on the "strikeout_rate" field.
func StrikeoutRateGT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldStrikeoutRate, v))
}

// StrikeoutRateGTE applies the GTE predicate on the "strikeout_rate" field.
func StrikeoutRateGTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldStrikeoutRate, v))
}

// StrikeoutRateLT applies the LT predicate on the "strikeout_rate" field.
func StrikeoutRateLT(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldStrikeoutRate, v))
}

// StrikeoutRateLTE applies the LTE predicate on the "strikeout_rate" field.
func StrikeoutRateLTE(v float64) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldStrikeoutRate, v))
}

// StrikeoutRateIsNil applies the IsNil predicate on the "strikeout_rate" field.
func StrikeoutRateIsNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIsNull(FieldStrikeoutRate))
}

// StrikeoutRateNotNil applies the NotNil predicate on the "strikeout_rate" field.
func StrikeoutRateNotNil() predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotNull(FieldStrikeoutRate))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.PitcherRecord {
	return predicate.PitcherRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.PitcherRecord {
	return predicate.PitcherRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.PitcherRecord {
	return predicate.PitcherRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.PitcherRecord {
	return predicate.PitcherRecord(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PitcherRecord) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PitcherRecord) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PitcherRecord) predicate.PitcherRecord {
	return predicate.PitcherRecord(sql.NotPredicates(p))
}
