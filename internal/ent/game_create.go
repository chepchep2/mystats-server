// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/batterrecord"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/pitcherrecord"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameCreate is the builder for creating a Game entity.
type GameCreate struct {
	config
	mutation *GameMutation
	hooks    []Hook
}

// SetDate sets the "date" field.
func (gc *GameCreate) SetDate(t time.Time) *GameCreate {
	gc.mutation.SetDate(t)
	return gc
}

// SetOpponent sets the "opponent" field.
func (gc *GameCreate) SetOpponent(s string) *GameCreate {
	gc.mutation.SetOpponent(s)
	return gc
}

// SetNillableOpponent sets the "opponent" field if the given value is not nil.
func (gc *GameCreate) SetNillableOpponent(s *string) *GameCreate {
	if s != nil {
		gc.SetOpponent(*s)
	}
	return gc
}

// SetLocation sets the "location" field.
func (gc *GameCreate) SetLocation(s string) *GameCreate {
	gc.mutation.SetLocation(s)
	return gc
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (gc *GameCreate) SetNillableLocation(s *string) *GameCreate {
	if s != nil {
		gc.SetLocation(*s)
	}
	return gc
}

// SetResult sets the "result" field.
func (gc *GameCreate) SetResult(s string) *GameCreate {
	gc.mutation.SetResult(s)
	return gc
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (gc *GameCreate) SetNillableResult(s *string) *GameCreate {
	if s != nil {
		gc.SetResult(*s)
	}
	return gc
}

// SetMyScore sets the "my_score" field.
func (gc *GameCreate) SetMyScore(i int) *GameCreate {
	gc.mutation.SetMyScore(i)
	return gc
}

// SetNillableMyScore sets the "my_score" field if the given value is not nil.
func (gc *GameCreate) SetNillableMyScore(i *int) *GameCreate {
	if i != nil {
		gc.SetMyScore(*i)
	}
	return gc
}

// SetOpponentScore sets the "opponent_score" field.
func (gc *GameCreate) SetOpponentScore(i int) *GameCreate {
	gc.mutation.SetOpponentScore(i)
	return gc
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (gc *GameCreate) SetNillableOpponentScore(i *int) *GameCreate {
	if i != nil {
		gc.SetOpponentScore(*i)
	}
	return gc
}

// SetCreatedAt sets the "created_at" field.
func (gc *GameCreate) SetCreatedAt(t time.Time) *GameCreate {
	gc.mutation.SetCreatedAt(t)
	return gc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gc *GameCreate) SetNillableCreatedAt(t *time.Time) *GameCreate {
	if t != nil {
		gc.SetCreatedAt(*t)
	}
	return gc
}

// SetUpdatedAt sets the "updated_at" field.
func (gc *GameCreate) SetUpdatedAt(t time.Time) *GameCreate {
	gc.mutation.SetUpdatedAt(t)
	return gc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gc *GameCreate) SetNillableUpdatedAt(t *time.Time) *GameCreate {
	if t != nil {
		gc.SetUpdatedAt(*t)
	}
	return gc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gc *GameCreate) SetUserID(id int) *GameCreate {
	gc.mutation.SetUserID(id)
	return gc
}

// SetUser sets the "user" edge to the User entity.
func (gc *GameCreate) SetUser(u *User) *GameCreate {
	return gc.SetUserID(u.ID)
}

// AddBattingRecordIDs adds the "batting_records" edge to the BatterRecord entity by IDs.
func (gc *GameCreate) AddBattingRecordIDs(ids ...int) *GameCreate {
	gc.mutation.AddBattingRecordIDs(ids...)
	return gc
}

// AddBattingRecords adds the "batting_records" edges to the BatterRecord entity.
func (gc *GameCreate) AddBattingRecords(b ...*BatterRecord) *GameCreate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gc.AddBattingRecordIDs(ids...)
}

// AddPitchingRecordIDs adds the "pitching_records" edge to the PitcherRecord entity by IDs.
func (gc *GameCreate) AddPitchingRecordIDs(ids ...int) *GameCreate {
	gc.mutation.AddPitchingRecordIDs(ids...)
	return gc
}

// AddPitchingRecords adds the "pitching_records" edges to the PitcherRecord entity.
func (gc *GameCreate) AddPitchingRecords(p ...*PitcherRecord) *GameCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gc.AddPitchingRecordIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gc *GameCreate) Mutation() *GameMutation {
	return gc.mutation
}

// Save creates the Game in the database.
func (gc *GameCreate) Save(ctx context.Context) (*Game, error) {
	gc.defaults()
	return withHooks(ctx, gc.sqlSave, gc.mutation, gc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gc *GameCreate) SaveX(ctx context.Context) *Game {
	v, err := gc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gc *GameCreate) Exec(ctx context.Context) error {
	_, err := gc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gc *GameCreate) ExecX(ctx context.Context) {
	if err := gc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gc *GameCreate) defaults() {
	if _, ok := gc.mutation.CreatedAt(); !ok {
		v := game.DefaultCreatedAt()
		gc.mutation.SetCreatedAt(v)
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		v := game.DefaultUpdatedAt()
		gc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gc *GameCreate) check() error {
	if _, ok := gc.mutation.Date(); !ok {
		return &ValidationError{Name: "date", err: errors.New(`ent: missing required field "Game.date"`)}
	}
	if _, ok := gc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Game.created_at"`)}
	}
	if _, ok := gc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Game.updated_at"`)}
	}
	if len(gc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Game.user"`)}
	}
	return nil
}

func (gc *GameCreate) sqlSave(ctx context.Context) (*Game, error) {
	if err := gc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gc.mutation.id = &_node.ID
	gc.mutation.done = true
	return _node, nil
}

func (gc *GameCreate) createSpec() (*Game, *sqlgraph.CreateSpec) {
	var (
		_node = &Game{config: gc.config}
		_spec = sqlgraph.NewCreateSpec(game.Table, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	)
	if value, ok := gc.mutation.Date(); ok {
		_spec.SetField(game.FieldDate, field.TypeTime, value)
		_node.Date = value
	}
	if value, ok := gc.mutation.Opponent(); ok {
		_spec.SetField(game.FieldOpponent, field.TypeString, value)
		_node.Opponent = value
	}
	if value, ok := gc.mutation.Location(); ok {
		_spec.SetField(game.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := gc.mutation.Result(); ok {
		_spec.SetField(game.FieldResult, field.TypeString, value)
		_node.Result = value
	}
	if value, ok := gc.mutation.MyScore(); ok {
		_spec.SetField(game.FieldMyScore, field.TypeInt, value)
		_node.MyScore = value
	}
	if value, ok := gc.mutation.OpponentScore(); ok {
		_spec.SetField(game.FieldOpponentScore, field.TypeInt, value)
		_node.OpponentScore = value
	}
	if value, ok := gc.mutation.CreatedAt(); ok {
		_spec.SetField(game.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gc.mutation.UpdatedAt(); ok {
		_spec.SetField(game.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := gc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.UserTable,
			Columns: []string{game.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_games = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.BattingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := gc.mutation.PitchingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GameCreateBulk is the builder for creating many Game entities in bulk.
type GameCreateBulk struct {
	config
	err      error
	builders []*GameCreate
}

// Save creates the Game entities in the database.
func (gcb *GameCreateBulk) Save(ctx context.Context) ([]*Game, error) {
	if gcb.err != nil {
		return nil, gcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gcb.builders))
	nodes := make([]*Game, len(gcb.builders))
	mutators := make([]Mutator, len(gcb.builders))
	for i := range gcb.builders {
		func(i int, root context.Context) {
			builder := gcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GameMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gcb *GameCreateBulk) SaveX(ctx context.Context) []*Game {
	v, err := gcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gcb *GameCreateBulk) Exec(ctx context.Context) error {
	_, err := gcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gcb *GameCreateBulk) ExecX(ctx context.Context) {
	if err := gcb.Exec(ctx); err != nil {
		panic(err)
	}
}
