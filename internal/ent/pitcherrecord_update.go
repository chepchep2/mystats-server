// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/pitcherrecord"
	"mystats-server/internal/ent/predicate"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PitcherRecordUpdate is the builder for updating PitcherRecord entities.
type PitcherRecordUpdate struct {
	config
	hooks    []Hook
	mutation *PitcherRecordMutation
}

// Where appends a list predicates to the PitcherRecordUpdate builder.
func (pru *PitcherRecordUpdate) Where(ps ...predicate.PitcherRecord) *PitcherRecordUpdate {
	pru.mutation.Where(ps...)
	return pru
}

// SetGames sets the "games" field.
func (pru *PitcherRecordUpdate) SetGames(i int) *PitcherRecordUpdate {
	pru.mutation.ResetGames()
	pru.mutation.SetGames(i)
	return pru
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableGames(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetGames(*i)
	}
	return pru
}

// AddGames adds i to the "games" field.
func (pru *PitcherRecordUpdate) AddGames(i int) *PitcherRecordUpdate {
	pru.mutation.AddGames(i)
	return pru
}

// SetEra sets the "era" field.
func (pru *PitcherRecordUpdate) SetEra(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetEra()
	pru.mutation.SetEra(f)
	return pru
}

// SetNillableEra sets the "era" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableEra(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetEra(*f)
	}
	return pru
}

// AddEra adds f to the "era" field.
func (pru *PitcherRecordUpdate) AddEra(f float64) *PitcherRecordUpdate {
	pru.mutation.AddEra(f)
	return pru
}

// ClearEra clears the value of the "era" field.
func (pru *PitcherRecordUpdate) ClearEra() *PitcherRecordUpdate {
	pru.mutation.ClearEra()
	return pru
}

// SetWins sets the "wins" field.
func (pru *PitcherRecordUpdate) SetWins(i int) *PitcherRecordUpdate {
	pru.mutation.ResetWins()
	pru.mutation.SetWins(i)
	return pru
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableWins(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetWins(*i)
	}
	return pru
}

// AddWins adds i to the "wins" field.
func (pru *PitcherRecordUpdate) AddWins(i int) *PitcherRecordUpdate {
	pru.mutation.AddWins(i)
	return pru
}

// SetLosses sets the "losses" field.
func (pru *PitcherRecordUpdate) SetLosses(i int) *PitcherRecordUpdate {
	pru.mutation.ResetLosses()
	pru.mutation.SetLosses(i)
	return pru
}

// SetNillableLosses sets the "losses" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableLosses(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetLosses(*i)
	}
	return pru
}

// AddLosses adds i to the "losses" field.
func (pru *PitcherRecordUpdate) AddLosses(i int) *PitcherRecordUpdate {
	pru.mutation.AddLosses(i)
	return pru
}

// SetSaves sets the "saves" field.
func (pru *PitcherRecordUpdate) SetSaves(i int) *PitcherRecordUpdate {
	pru.mutation.ResetSaves()
	pru.mutation.SetSaves(i)
	return pru
}

// SetNillableSaves sets the "saves" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableSaves(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetSaves(*i)
	}
	return pru
}

// AddSaves adds i to the "saves" field.
func (pru *PitcherRecordUpdate) AddSaves(i int) *PitcherRecordUpdate {
	pru.mutation.AddSaves(i)
	return pru
}

// SetHolds sets the "holds" field.
func (pru *PitcherRecordUpdate) SetHolds(i int) *PitcherRecordUpdate {
	pru.mutation.ResetHolds()
	pru.mutation.SetHolds(i)
	return pru
}

// SetNillableHolds sets the "holds" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableHolds(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetHolds(*i)
	}
	return pru
}

// AddHolds adds i to the "holds" field.
func (pru *PitcherRecordUpdate) AddHolds(i int) *PitcherRecordUpdate {
	pru.mutation.AddHolds(i)
	return pru
}

// SetWinningPct sets the "winning_pct" field.
func (pru *PitcherRecordUpdate) SetWinningPct(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetWinningPct()
	pru.mutation.SetWinningPct(f)
	return pru
}

// SetNillableWinningPct sets the "winning_pct" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableWinningPct(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetWinningPct(*f)
	}
	return pru
}

// AddWinningPct adds f to the "winning_pct" field.
func (pru *PitcherRecordUpdate) AddWinningPct(f float64) *PitcherRecordUpdate {
	pru.mutation.AddWinningPct(f)
	return pru
}

// ClearWinningPct clears the value of the "winning_pct" field.
func (pru *PitcherRecordUpdate) ClearWinningPct() *PitcherRecordUpdate {
	pru.mutation.ClearWinningPct()
	return pru
}

// SetBattersFaced sets the "batters_faced" field.
func (pru *PitcherRecordUpdate) SetBattersFaced(i int) *PitcherRecordUpdate {
	pru.mutation.ResetBattersFaced()
	pru.mutation.SetBattersFaced(i)
	return pru
}

// SetNillableBattersFaced sets the "batters_faced" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableBattersFaced(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetBattersFaced(*i)
	}
	return pru
}

// AddBattersFaced adds i to the "batters_faced" field.
func (pru *PitcherRecordUpdate) AddBattersFaced(i int) *PitcherRecordUpdate {
	pru.mutation.AddBattersFaced(i)
	return pru
}

// SetOpponentAtBats sets the "opponent_at_bats" field.
func (pru *PitcherRecordUpdate) SetOpponentAtBats(i int) *PitcherRecordUpdate {
	pru.mutation.ResetOpponentAtBats()
	pru.mutation.SetOpponentAtBats(i)
	return pru
}

// SetNillableOpponentAtBats sets the "opponent_at_bats" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableOpponentAtBats(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetOpponentAtBats(*i)
	}
	return pru
}

// AddOpponentAtBats adds i to the "opponent_at_bats" field.
func (pru *PitcherRecordUpdate) AddOpponentAtBats(i int) *PitcherRecordUpdate {
	pru.mutation.AddOpponentAtBats(i)
	return pru
}

// SetInnings sets the "innings" field.
func (pru *PitcherRecordUpdate) SetInnings(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetInnings()
	pru.mutation.SetInnings(f)
	return pru
}

// SetNillableInnings sets the "innings" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableInnings(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetInnings(*f)
	}
	return pru
}

// AddInnings adds f to the "innings" field.
func (pru *PitcherRecordUpdate) AddInnings(f float64) *PitcherRecordUpdate {
	pru.mutation.AddInnings(f)
	return pru
}

// SetHitsAllowed sets the "hits_allowed" field.
func (pru *PitcherRecordUpdate) SetHitsAllowed(i int) *PitcherRecordUpdate {
	pru.mutation.ResetHitsAllowed()
	pru.mutation.SetHitsAllowed(i)
	return pru
}

// SetNillableHitsAllowed sets the "hits_allowed" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableHitsAllowed(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetHitsAllowed(*i)
	}
	return pru
}

// AddHitsAllowed adds i to the "hits_allowed" field.
func (pru *PitcherRecordUpdate) AddHitsAllowed(i int) *PitcherRecordUpdate {
	pru.mutation.AddHitsAllowed(i)
	return pru
}

// SetHomerunsAllowed sets the "homeruns_allowed" field.
func (pru *PitcherRecordUpdate) SetHomerunsAllowed(i int) *PitcherRecordUpdate {
	pru.mutation.ResetHomerunsAllowed()
	pru.mutation.SetHomerunsAllowed(i)
	return pru
}

// SetNillableHomerunsAllowed sets the "homeruns_allowed" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableHomerunsAllowed(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetHomerunsAllowed(*i)
	}
	return pru
}

// AddHomerunsAllowed adds i to the "homeruns_allowed" field.
func (pru *PitcherRecordUpdate) AddHomerunsAllowed(i int) *PitcherRecordUpdate {
	pru.mutation.AddHomerunsAllowed(i)
	return pru
}

// SetWalks sets the "walks" field.
func (pru *PitcherRecordUpdate) SetWalks(i int) *PitcherRecordUpdate {
	pru.mutation.ResetWalks()
	pru.mutation.SetWalks(i)
	return pru
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableWalks(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetWalks(*i)
	}
	return pru
}

// AddWalks adds i to the "walks" field.
func (pru *PitcherRecordUpdate) AddWalks(i int) *PitcherRecordUpdate {
	pru.mutation.AddWalks(i)
	return pru
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (pru *PitcherRecordUpdate) SetHitByPitch(i int) *PitcherRecordUpdate {
	pru.mutation.ResetHitByPitch()
	pru.mutation.SetHitByPitch(i)
	return pru
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableHitByPitch(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetHitByPitch(*i)
	}
	return pru
}

// AddHitByPitch adds i to the "hit_by_pitch" field.
func (pru *PitcherRecordUpdate) AddHitByPitch(i int) *PitcherRecordUpdate {
	pru.mutation.AddHitByPitch(i)
	return pru
}

// SetStrikeouts sets the "strikeouts" field.
func (pru *PitcherRecordUpdate) SetStrikeouts(i int) *PitcherRecordUpdate {
	pru.mutation.ResetStrikeouts()
	pru.mutation.SetStrikeouts(i)
	return pru
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableStrikeouts(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetStrikeouts(*i)
	}
	return pru
}

// AddStrikeouts adds i to the "strikeouts" field.
func (pru *PitcherRecordUpdate) AddStrikeouts(i int) *PitcherRecordUpdate {
	pru.mutation.AddStrikeouts(i)
	return pru
}

// SetEarnedRuns sets the "earned_runs" field.
func (pru *PitcherRecordUpdate) SetEarnedRuns(i int) *PitcherRecordUpdate {
	pru.mutation.ResetEarnedRuns()
	pru.mutation.SetEarnedRuns(i)
	return pru
}

// SetNillableEarnedRuns sets the "earned_runs" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableEarnedRuns(i *int) *PitcherRecordUpdate {
	if i != nil {
		pru.SetEarnedRuns(*i)
	}
	return pru
}

// AddEarnedRuns adds i to the "earned_runs" field.
func (pru *PitcherRecordUpdate) AddEarnedRuns(i int) *PitcherRecordUpdate {
	pru.mutation.AddEarnedRuns(i)
	return pru
}

// SetWhip sets the "whip" field.
func (pru *PitcherRecordUpdate) SetWhip(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetWhip()
	pru.mutation.SetWhip(f)
	return pru
}

// SetNillableWhip sets the "whip" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableWhip(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetWhip(*f)
	}
	return pru
}

// AddWhip adds f to the "whip" field.
func (pru *PitcherRecordUpdate) AddWhip(f float64) *PitcherRecordUpdate {
	pru.mutation.AddWhip(f)
	return pru
}

// ClearWhip clears the value of the "whip" field.
func (pru *PitcherRecordUpdate) ClearWhip() *PitcherRecordUpdate {
	pru.mutation.ClearWhip()
	return pru
}

// SetOpponentAvg sets the "opponent_avg" field.
func (pru *PitcherRecordUpdate) SetOpponentAvg(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetOpponentAvg()
	pru.mutation.SetOpponentAvg(f)
	return pru
}

// SetNillableOpponentAvg sets the "opponent_avg" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableOpponentAvg(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetOpponentAvg(*f)
	}
	return pru
}

// AddOpponentAvg adds f to the "opponent_avg" field.
func (pru *PitcherRecordUpdate) AddOpponentAvg(f float64) *PitcherRecordUpdate {
	pru.mutation.AddOpponentAvg(f)
	return pru
}

// ClearOpponentAvg clears the value of the "opponent_avg" field.
func (pru *PitcherRecordUpdate) ClearOpponentAvg() *PitcherRecordUpdate {
	pru.mutation.ClearOpponentAvg()
	return pru
}

// SetStrikeoutRate sets the "strikeout_rate" field.
func (pru *PitcherRecordUpdate) SetStrikeoutRate(f float64) *PitcherRecordUpdate {
	pru.mutation.ResetStrikeoutRate()
	pru.mutation.SetStrikeoutRate(f)
	return pru
}

// SetNillableStrikeoutRate sets the "strikeout_rate" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableStrikeoutRate(f *float64) *PitcherRecordUpdate {
	if f != nil {
		pru.SetStrikeoutRate(*f)
	}
	return pru
}

// AddStrikeoutRate adds f to the "strikeout_rate" field.
func (pru *PitcherRecordUpdate) AddStrikeoutRate(f float64) *PitcherRecordUpdate {
	pru.mutation.AddStrikeoutRate(f)
	return pru
}

// ClearStrikeoutRate clears the value of the "strikeout_rate" field.
func (pru *PitcherRecordUpdate) ClearStrikeoutRate() *PitcherRecordUpdate {
	pru.mutation.ClearStrikeoutRate()
	return pru
}

// SetCreatedAt sets the "created_at" field.
func (pru *PitcherRecordUpdate) SetCreatedAt(t time.Time) *PitcherRecordUpdate {
	pru.mutation.SetCreatedAt(t)
	return pru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pru *PitcherRecordUpdate) SetNillableCreatedAt(t *time.Time) *PitcherRecordUpdate {
	if t != nil {
		pru.SetCreatedAt(*t)
	}
	return pru
}

// SetUpdatedAt sets the "updated_at" field.
func (pru *PitcherRecordUpdate) SetUpdatedAt(t time.Time) *PitcherRecordUpdate {
	pru.mutation.SetUpdatedAt(t)
	return pru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pru *PitcherRecordUpdate) SetUserID(id int) *PitcherRecordUpdate {
	pru.mutation.SetUserID(id)
	return pru
}

// SetUser sets the "user" edge to the User entity.
func (pru *PitcherRecordUpdate) SetUser(u *User) *PitcherRecordUpdate {
	return pru.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (pru *PitcherRecordUpdate) SetGameID(id int) *PitcherRecordUpdate {
	pru.mutation.SetGameID(id)
	return pru
}

// SetGame sets the "game" edge to the Game entity.
func (pru *PitcherRecordUpdate) SetGame(g *Game) *PitcherRecordUpdate {
	return pru.SetGameID(g.ID)
}

// Mutation returns the PitcherRecordMutation object of the builder.
func (pru *PitcherRecordUpdate) Mutation() *PitcherRecordMutation {
	return pru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pru *PitcherRecordUpdate) ClearUser() *PitcherRecordUpdate {
	pru.mutation.ClearUser()
	return pru
}

// ClearGame clears the "game" edge to the Game entity.
func (pru *PitcherRecordUpdate) ClearGame() *PitcherRecordUpdate {
	pru.mutation.ClearGame()
	return pru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pru *PitcherRecordUpdate) Save(ctx context.Context) (int, error) {
	pru.defaults()
	return withHooks(ctx, pru.sqlSave, pru.mutation, pru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pru *PitcherRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := pru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pru *PitcherRecordUpdate) Exec(ctx context.Context) error {
	_, err := pru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pru *PitcherRecordUpdate) ExecX(ctx context.Context) {
	if err := pru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pru *PitcherRecordUpdate) defaults() {
	if _, ok := pru.mutation.UpdatedAt(); !ok {
		v := pitcherrecord.UpdateDefaultUpdatedAt()
		pru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pru *PitcherRecordUpdate) check() error {
	if pru.mutation.UserCleared() && len(pru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PitcherRecord.user"`)
	}
	if pru.mutation.GameCleared() && len(pru.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PitcherRecord.game"`)
	}
	return nil
}

func (pru *PitcherRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pitcherrecord.Table, pitcherrecord.Columns, sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt))
	if ps := pru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pru.mutation.Games(); ok {
		_spec.SetField(pitcherrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedGames(); ok {
		_spec.AddField(pitcherrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Era(); ok {
		_spec.SetField(pitcherrecord.FieldEra, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedEra(); ok {
		_spec.AddField(pitcherrecord.FieldEra, field.TypeFloat64, value)
	}
	if pru.mutation.EraCleared() {
		_spec.ClearField(pitcherrecord.FieldEra, field.TypeFloat64)
	}
	if value, ok := pru.mutation.Wins(); ok {
		_spec.SetField(pitcherrecord.FieldWins, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedWins(); ok {
		_spec.AddField(pitcherrecord.FieldWins, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Losses(); ok {
		_spec.SetField(pitcherrecord.FieldLosses, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedLosses(); ok {
		_spec.AddField(pitcherrecord.FieldLosses, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Saves(); ok {
		_spec.SetField(pitcherrecord.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedSaves(); ok {
		_spec.AddField(pitcherrecord.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Holds(); ok {
		_spec.SetField(pitcherrecord.FieldHolds, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedHolds(); ok {
		_spec.AddField(pitcherrecord.FieldHolds, field.TypeInt, value)
	}
	if value, ok := pru.mutation.WinningPct(); ok {
		_spec.SetField(pitcherrecord.FieldWinningPct, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedWinningPct(); ok {
		_spec.AddField(pitcherrecord.FieldWinningPct, field.TypeFloat64, value)
	}
	if pru.mutation.WinningPctCleared() {
		_spec.ClearField(pitcherrecord.FieldWinningPct, field.TypeFloat64)
	}
	if value, ok := pru.mutation.BattersFaced(); ok {
		_spec.SetField(pitcherrecord.FieldBattersFaced, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedBattersFaced(); ok {
		_spec.AddField(pitcherrecord.FieldBattersFaced, field.TypeInt, value)
	}
	if value, ok := pru.mutation.OpponentAtBats(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAtBats, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedOpponentAtBats(); ok {
		_spec.AddField(pitcherrecord.FieldOpponentAtBats, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Innings(); ok {
		_spec.SetField(pitcherrecord.FieldInnings, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedInnings(); ok {
		_spec.AddField(pitcherrecord.FieldInnings, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.HitsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHitsAllowed, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedHitsAllowed(); ok {
		_spec.AddField(pitcherrecord.FieldHitsAllowed, field.TypeInt, value)
	}
	if value, ok := pru.mutation.HomerunsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHomerunsAllowed, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedHomerunsAllowed(); ok {
		_spec.AddField(pitcherrecord.FieldHomerunsAllowed, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Walks(); ok {
		_spec.SetField(pitcherrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedWalks(); ok {
		_spec.AddField(pitcherrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := pru.mutation.HitByPitch(); ok {
		_spec.SetField(pitcherrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedHitByPitch(); ok {
		_spec.AddField(pitcherrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Strikeouts(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedStrikeouts(); ok {
		_spec.AddField(pitcherrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := pru.mutation.EarnedRuns(); ok {
		_spec.SetField(pitcherrecord.FieldEarnedRuns, field.TypeInt, value)
	}
	if value, ok := pru.mutation.AddedEarnedRuns(); ok {
		_spec.AddField(pitcherrecord.FieldEarnedRuns, field.TypeInt, value)
	}
	if value, ok := pru.mutation.Whip(); ok {
		_spec.SetField(pitcherrecord.FieldWhip, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedWhip(); ok {
		_spec.AddField(pitcherrecord.FieldWhip, field.TypeFloat64, value)
	}
	if pru.mutation.WhipCleared() {
		_spec.ClearField(pitcherrecord.FieldWhip, field.TypeFloat64)
	}
	if value, ok := pru.mutation.OpponentAvg(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedOpponentAvg(); ok {
		_spec.AddField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64, value)
	}
	if pru.mutation.OpponentAvgCleared() {
		_spec.ClearField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64)
	}
	if value, ok := pru.mutation.StrikeoutRate(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64, value)
	}
	if value, ok := pru.mutation.AddedStrikeoutRate(); ok {
		_spec.AddField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64, value)
	}
	if pru.mutation.StrikeoutRateCleared() {
		_spec.ClearField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64)
	}
	if value, ok := pru.mutation.CreatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pru.mutation.UpdatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if pru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.UserTable,
			Columns: []string{pitcherrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.UserTable,
			Columns: []string{pitcherrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pru.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.GameTable,
			Columns: []string{pitcherrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pru.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.GameTable,
			Columns: []string{pitcherrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pitcherrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pru.mutation.done = true
	return n, nil
}

// PitcherRecordUpdateOne is the builder for updating a single PitcherRecord entity.
type PitcherRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PitcherRecordMutation
}

// SetGames sets the "games" field.
func (pruo *PitcherRecordUpdateOne) SetGames(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetGames()
	pruo.mutation.SetGames(i)
	return pruo
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableGames(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetGames(*i)
	}
	return pruo
}

// AddGames adds i to the "games" field.
func (pruo *PitcherRecordUpdateOne) AddGames(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddGames(i)
	return pruo
}

// SetEra sets the "era" field.
func (pruo *PitcherRecordUpdateOne) SetEra(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetEra()
	pruo.mutation.SetEra(f)
	return pruo
}

// SetNillableEra sets the "era" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableEra(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetEra(*f)
	}
	return pruo
}

// AddEra adds f to the "era" field.
func (pruo *PitcherRecordUpdateOne) AddEra(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddEra(f)
	return pruo
}

// ClearEra clears the value of the "era" field.
func (pruo *PitcherRecordUpdateOne) ClearEra() *PitcherRecordUpdateOne {
	pruo.mutation.ClearEra()
	return pruo
}

// SetWins sets the "wins" field.
func (pruo *PitcherRecordUpdateOne) SetWins(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetWins()
	pruo.mutation.SetWins(i)
	return pruo
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableWins(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetWins(*i)
	}
	return pruo
}

// AddWins adds i to the "wins" field.
func (pruo *PitcherRecordUpdateOne) AddWins(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddWins(i)
	return pruo
}

// SetLosses sets the "losses" field.
func (pruo *PitcherRecordUpdateOne) SetLosses(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetLosses()
	pruo.mutation.SetLosses(i)
	return pruo
}

// SetNillableLosses sets the "losses" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableLosses(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetLosses(*i)
	}
	return pruo
}

// AddLosses adds i to the "losses" field.
func (pruo *PitcherRecordUpdateOne) AddLosses(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddLosses(i)
	return pruo
}

// SetSaves sets the "saves" field.
func (pruo *PitcherRecordUpdateOne) SetSaves(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetSaves()
	pruo.mutation.SetSaves(i)
	return pruo
}

// SetNillableSaves sets the "saves" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableSaves(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetSaves(*i)
	}
	return pruo
}

// AddSaves adds i to the "saves" field.
func (pruo *PitcherRecordUpdateOne) AddSaves(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddSaves(i)
	return pruo
}

// SetHolds sets the "holds" field.
func (pruo *PitcherRecordUpdateOne) SetHolds(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetHolds()
	pruo.mutation.SetHolds(i)
	return pruo
}

// SetNillableHolds sets the "holds" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableHolds(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetHolds(*i)
	}
	return pruo
}

// AddHolds adds i to the "holds" field.
func (pruo *PitcherRecordUpdateOne) AddHolds(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddHolds(i)
	return pruo
}

// SetWinningPct sets the "winning_pct" field.
func (pruo *PitcherRecordUpdateOne) SetWinningPct(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetWinningPct()
	pruo.mutation.SetWinningPct(f)
	return pruo
}

// SetNillableWinningPct sets the "winning_pct" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableWinningPct(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetWinningPct(*f)
	}
	return pruo
}

// AddWinningPct adds f to the "winning_pct" field.
func (pruo *PitcherRecordUpdateOne) AddWinningPct(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddWinningPct(f)
	return pruo
}

// ClearWinningPct clears the value of the "winning_pct" field.
func (pruo *PitcherRecordUpdateOne) ClearWinningPct() *PitcherRecordUpdateOne {
	pruo.mutation.ClearWinningPct()
	return pruo
}

// SetBattersFaced sets the "batters_faced" field.
func (pruo *PitcherRecordUpdateOne) SetBattersFaced(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetBattersFaced()
	pruo.mutation.SetBattersFaced(i)
	return pruo
}

// SetNillableBattersFaced sets the "batters_faced" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableBattersFaced(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetBattersFaced(*i)
	}
	return pruo
}

// AddBattersFaced adds i to the "batters_faced" field.
func (pruo *PitcherRecordUpdateOne) AddBattersFaced(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddBattersFaced(i)
	return pruo
}

// SetOpponentAtBats sets the "opponent_at_bats" field.
func (pruo *PitcherRecordUpdateOne) SetOpponentAtBats(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetOpponentAtBats()
	pruo.mutation.SetOpponentAtBats(i)
	return pruo
}

// SetNillableOpponentAtBats sets the "opponent_at_bats" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableOpponentAtBats(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetOpponentAtBats(*i)
	}
	return pruo
}

// AddOpponentAtBats adds i to the "opponent_at_bats" field.
func (pruo *PitcherRecordUpdateOne) AddOpponentAtBats(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddOpponentAtBats(i)
	return pruo
}

// SetInnings sets the "innings" field.
func (pruo *PitcherRecordUpdateOne) SetInnings(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetInnings()
	pruo.mutation.SetInnings(f)
	return pruo
}

// SetNillableInnings sets the "innings" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableInnings(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetInnings(*f)
	}
	return pruo
}

// AddInnings adds f to the "innings" field.
func (pruo *PitcherRecordUpdateOne) AddInnings(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddInnings(f)
	return pruo
}

// SetHitsAllowed sets the "hits_allowed" field.
func (pruo *PitcherRecordUpdateOne) SetHitsAllowed(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetHitsAllowed()
	pruo.mutation.SetHitsAllowed(i)
	return pruo
}

// SetNillableHitsAllowed sets the "hits_allowed" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableHitsAllowed(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetHitsAllowed(*i)
	}
	return pruo
}

// AddHitsAllowed adds i to the "hits_allowed" field.
func (pruo *PitcherRecordUpdateOne) AddHitsAllowed(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddHitsAllowed(i)
	return pruo
}

// SetHomerunsAllowed sets the "homeruns_allowed" field.
func (pruo *PitcherRecordUpdateOne) SetHomerunsAllowed(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetHomerunsAllowed()
	pruo.mutation.SetHomerunsAllowed(i)
	return pruo
}

// SetNillableHomerunsAllowed sets the "homeruns_allowed" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableHomerunsAllowed(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetHomerunsAllowed(*i)
	}
	return pruo
}

// AddHomerunsAllowed adds i to the "homeruns_allowed" field.
func (pruo *PitcherRecordUpdateOne) AddHomerunsAllowed(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddHomerunsAllowed(i)
	return pruo
}

// SetWalks sets the "walks" field.
func (pruo *PitcherRecordUpdateOne) SetWalks(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetWalks()
	pruo.mutation.SetWalks(i)
	return pruo
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableWalks(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetWalks(*i)
	}
	return pruo
}

// AddWalks adds i to the "walks" field.
func (pruo *PitcherRecordUpdateOne) AddWalks(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddWalks(i)
	return pruo
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (pruo *PitcherRecordUpdateOne) SetHitByPitch(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetHitByPitch()
	pruo.mutation.SetHitByPitch(i)
	return pruo
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableHitByPitch(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetHitByPitch(*i)
	}
	return pruo
}

// AddHitByPitch adds i to the "hit_by_pitch" field.
func (pruo *PitcherRecordUpdateOne) AddHitByPitch(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddHitByPitch(i)
	return pruo
}

// SetStrikeouts sets the "strikeouts" field.
func (pruo *PitcherRecordUpdateOne) SetStrikeouts(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetStrikeouts()
	pruo.mutation.SetStrikeouts(i)
	return pruo
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableStrikeouts(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetStrikeouts(*i)
	}
	return pruo
}

// AddStrikeouts adds i to the "strikeouts" field.
func (pruo *PitcherRecordUpdateOne) AddStrikeouts(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddStrikeouts(i)
	return pruo
}

// SetEarnedRuns sets the "earned_runs" field.
func (pruo *PitcherRecordUpdateOne) SetEarnedRuns(i int) *PitcherRecordUpdateOne {
	pruo.mutation.ResetEarnedRuns()
	pruo.mutation.SetEarnedRuns(i)
	return pruo
}

// SetNillableEarnedRuns sets the "earned_runs" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableEarnedRuns(i *int) *PitcherRecordUpdateOne {
	if i != nil {
		pruo.SetEarnedRuns(*i)
	}
	return pruo
}

// AddEarnedRuns adds i to the "earned_runs" field.
func (pruo *PitcherRecordUpdateOne) AddEarnedRuns(i int) *PitcherRecordUpdateOne {
	pruo.mutation.AddEarnedRuns(i)
	return pruo
}

// SetWhip sets the "whip" field.
func (pruo *PitcherRecordUpdateOne) SetWhip(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetWhip()
	pruo.mutation.SetWhip(f)
	return pruo
}

// SetNillableWhip sets the "whip" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableWhip(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetWhip(*f)
	}
	return pruo
}

// AddWhip adds f to the "whip" field.
func (pruo *PitcherRecordUpdateOne) AddWhip(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddWhip(f)
	return pruo
}

// ClearWhip clears the value of the "whip" field.
func (pruo *PitcherRecordUpdateOne) ClearWhip() *PitcherRecordUpdateOne {
	pruo.mutation.ClearWhip()
	return pruo
}

// SetOpponentAvg sets the "opponent_avg" field.
func (pruo *PitcherRecordUpdateOne) SetOpponentAvg(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetOpponentAvg()
	pruo.mutation.SetOpponentAvg(f)
	return pruo
}

// SetNillableOpponentAvg sets the "opponent_avg" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableOpponentAvg(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetOpponentAvg(*f)
	}
	return pruo
}

// AddOpponentAvg adds f to the "opponent_avg" field.
func (pruo *PitcherRecordUpdateOne) AddOpponentAvg(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddOpponentAvg(f)
	return pruo
}

// ClearOpponentAvg clears the value of the "opponent_avg" field.
func (pruo *PitcherRecordUpdateOne) ClearOpponentAvg() *PitcherRecordUpdateOne {
	pruo.mutation.ClearOpponentAvg()
	return pruo
}

// SetStrikeoutRate sets the "strikeout_rate" field.
func (pruo *PitcherRecordUpdateOne) SetStrikeoutRate(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.ResetStrikeoutRate()
	pruo.mutation.SetStrikeoutRate(f)
	return pruo
}

// SetNillableStrikeoutRate sets the "strikeout_rate" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableStrikeoutRate(f *float64) *PitcherRecordUpdateOne {
	if f != nil {
		pruo.SetStrikeoutRate(*f)
	}
	return pruo
}

// AddStrikeoutRate adds f to the "strikeout_rate" field.
func (pruo *PitcherRecordUpdateOne) AddStrikeoutRate(f float64) *PitcherRecordUpdateOne {
	pruo.mutation.AddStrikeoutRate(f)
	return pruo
}

// ClearStrikeoutRate clears the value of the "strikeout_rate" field.
func (pruo *PitcherRecordUpdateOne) ClearStrikeoutRate() *PitcherRecordUpdateOne {
	pruo.mutation.ClearStrikeoutRate()
	return pruo
}

// SetCreatedAt sets the "created_at" field.
func (pruo *PitcherRecordUpdateOne) SetCreatedAt(t time.Time) *PitcherRecordUpdateOne {
	pruo.mutation.SetCreatedAt(t)
	return pruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pruo *PitcherRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *PitcherRecordUpdateOne {
	if t != nil {
		pruo.SetCreatedAt(*t)
	}
	return pruo
}

// SetUpdatedAt sets the "updated_at" field.
func (pruo *PitcherRecordUpdateOne) SetUpdatedAt(t time.Time) *PitcherRecordUpdateOne {
	pruo.mutation.SetUpdatedAt(t)
	return pruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (pruo *PitcherRecordUpdateOne) SetUserID(id int) *PitcherRecordUpdateOne {
	pruo.mutation.SetUserID(id)
	return pruo
}

// SetUser sets the "user" edge to the User entity.
func (pruo *PitcherRecordUpdateOne) SetUser(u *User) *PitcherRecordUpdateOne {
	return pruo.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (pruo *PitcherRecordUpdateOne) SetGameID(id int) *PitcherRecordUpdateOne {
	pruo.mutation.SetGameID(id)
	return pruo
}

// SetGame sets the "game" edge to the Game entity.
func (pruo *PitcherRecordUpdateOne) SetGame(g *Game) *PitcherRecordUpdateOne {
	return pruo.SetGameID(g.ID)
}

// Mutation returns the PitcherRecordMutation object of the builder.
func (pruo *PitcherRecordUpdateOne) Mutation() *PitcherRecordMutation {
	return pruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (pruo *PitcherRecordUpdateOne) ClearUser() *PitcherRecordUpdateOne {
	pruo.mutation.ClearUser()
	return pruo
}

// ClearGame clears the "game" edge to the Game entity.
func (pruo *PitcherRecordUpdateOne) ClearGame() *PitcherRecordUpdateOne {
	pruo.mutation.ClearGame()
	return pruo
}

// Where appends a list predicates to the PitcherRecordUpdate builder.
func (pruo *PitcherRecordUpdateOne) Where(ps ...predicate.PitcherRecord) *PitcherRecordUpdateOne {
	pruo.mutation.Where(ps...)
	return pruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pruo *PitcherRecordUpdateOne) Select(field string, fields ...string) *PitcherRecordUpdateOne {
	pruo.fields = append([]string{field}, fields...)
	return pruo
}

// Save executes the query and returns the updated PitcherRecord entity.
func (pruo *PitcherRecordUpdateOne) Save(ctx context.Context) (*PitcherRecord, error) {
	pruo.defaults()
	return withHooks(ctx, pruo.sqlSave, pruo.mutation, pruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pruo *PitcherRecordUpdateOne) SaveX(ctx context.Context) *PitcherRecord {
	node, err := pruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pruo *PitcherRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := pruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pruo *PitcherRecordUpdateOne) ExecX(ctx context.Context) {
	if err := pruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pruo *PitcherRecordUpdateOne) defaults() {
	if _, ok := pruo.mutation.UpdatedAt(); !ok {
		v := pitcherrecord.UpdateDefaultUpdatedAt()
		pruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pruo *PitcherRecordUpdateOne) check() error {
	if pruo.mutation.UserCleared() && len(pruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PitcherRecord.user"`)
	}
	if pruo.mutation.GameCleared() && len(pruo.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PitcherRecord.game"`)
	}
	return nil
}

func (pruo *PitcherRecordUpdateOne) sqlSave(ctx context.Context) (_node *PitcherRecord, err error) {
	if err := pruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pitcherrecord.Table, pitcherrecord.Columns, sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt))
	id, ok := pruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PitcherRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pitcherrecord.FieldID)
		for _, f := range fields {
			if !pitcherrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pitcherrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pruo.mutation.Games(); ok {
		_spec.SetField(pitcherrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedGames(); ok {
		_spec.AddField(pitcherrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Era(); ok {
		_spec.SetField(pitcherrecord.FieldEra, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedEra(); ok {
		_spec.AddField(pitcherrecord.FieldEra, field.TypeFloat64, value)
	}
	if pruo.mutation.EraCleared() {
		_spec.ClearField(pitcherrecord.FieldEra, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.Wins(); ok {
		_spec.SetField(pitcherrecord.FieldWins, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedWins(); ok {
		_spec.AddField(pitcherrecord.FieldWins, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Losses(); ok {
		_spec.SetField(pitcherrecord.FieldLosses, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedLosses(); ok {
		_spec.AddField(pitcherrecord.FieldLosses, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Saves(); ok {
		_spec.SetField(pitcherrecord.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedSaves(); ok {
		_spec.AddField(pitcherrecord.FieldSaves, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Holds(); ok {
		_spec.SetField(pitcherrecord.FieldHolds, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedHolds(); ok {
		_spec.AddField(pitcherrecord.FieldHolds, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.WinningPct(); ok {
		_spec.SetField(pitcherrecord.FieldWinningPct, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedWinningPct(); ok {
		_spec.AddField(pitcherrecord.FieldWinningPct, field.TypeFloat64, value)
	}
	if pruo.mutation.WinningPctCleared() {
		_spec.ClearField(pitcherrecord.FieldWinningPct, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.BattersFaced(); ok {
		_spec.SetField(pitcherrecord.FieldBattersFaced, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedBattersFaced(); ok {
		_spec.AddField(pitcherrecord.FieldBattersFaced, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.OpponentAtBats(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAtBats, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedOpponentAtBats(); ok {
		_spec.AddField(pitcherrecord.FieldOpponentAtBats, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Innings(); ok {
		_spec.SetField(pitcherrecord.FieldInnings, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedInnings(); ok {
		_spec.AddField(pitcherrecord.FieldInnings, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.HitsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHitsAllowed, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedHitsAllowed(); ok {
		_spec.AddField(pitcherrecord.FieldHitsAllowed, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.HomerunsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHomerunsAllowed, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedHomerunsAllowed(); ok {
		_spec.AddField(pitcherrecord.FieldHomerunsAllowed, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Walks(); ok {
		_spec.SetField(pitcherrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedWalks(); ok {
		_spec.AddField(pitcherrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.HitByPitch(); ok {
		_spec.SetField(pitcherrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedHitByPitch(); ok {
		_spec.AddField(pitcherrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Strikeouts(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedStrikeouts(); ok {
		_spec.AddField(pitcherrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.EarnedRuns(); ok {
		_spec.SetField(pitcherrecord.FieldEarnedRuns, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.AddedEarnedRuns(); ok {
		_spec.AddField(pitcherrecord.FieldEarnedRuns, field.TypeInt, value)
	}
	if value, ok := pruo.mutation.Whip(); ok {
		_spec.SetField(pitcherrecord.FieldWhip, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedWhip(); ok {
		_spec.AddField(pitcherrecord.FieldWhip, field.TypeFloat64, value)
	}
	if pruo.mutation.WhipCleared() {
		_spec.ClearField(pitcherrecord.FieldWhip, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.OpponentAvg(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedOpponentAvg(); ok {
		_spec.AddField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64, value)
	}
	if pruo.mutation.OpponentAvgCleared() {
		_spec.ClearField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.StrikeoutRate(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64, value)
	}
	if value, ok := pruo.mutation.AddedStrikeoutRate(); ok {
		_spec.AddField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64, value)
	}
	if pruo.mutation.StrikeoutRateCleared() {
		_spec.ClearField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64)
	}
	if value, ok := pruo.mutation.CreatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := pruo.mutation.UpdatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if pruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.UserTable,
			Columns: []string{pitcherrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.UserTable,
			Columns: []string{pitcherrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if pruo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.GameTable,
			Columns: []string{pitcherrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pruo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.GameTable,
			Columns: []string{pitcherrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &PitcherRecord{config: pruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pitcherrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pruo.mutation.done = true
	return _node, nil
}
