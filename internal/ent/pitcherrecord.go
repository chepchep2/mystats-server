// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/pitcherrecord"
	"mystats-server/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// PitcherRecord is the model entity for the PitcherRecord schema.
type PitcherRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Games holds the value of the "games" field.
	Games int `json:"games,omitempty"`
	// Era holds the value of the "era" field.
	Era float64 `json:"era,omitempty"`
	// Wins holds the value of the "wins" field.
	Wins int `json:"wins,omitempty"`
	// Losses holds the value of the "losses" field.
	Losses int `json:"losses,omitempty"`
	// Saves holds the value of the "saves" field.
	Saves int `json:"saves,omitempty"`
	// Holds holds the value of the "holds" field.
	Holds int `json:"holds,omitempty"`
	// WinningPct holds the value of the "winning_pct" field.
	WinningPct float64 `json:"winning_pct,omitempty"`
	// BattersFaced holds the value of the "batters_faced" field.
	BattersFaced int `json:"batters_faced,omitempty"`
	// OpponentAtBats holds the value of the "opponent_at_bats" field.
	OpponentAtBats int `json:"opponent_at_bats,omitempty"`
	// Innings holds the value of the "innings" field.
	Innings float64 `json:"innings,omitempty"`
	// HitsAllowed holds the value of the "hits_allowed" field.
	HitsAllowed int `json:"hits_allowed,omitempty"`
	// HomerunsAllowed holds the value of the "homeruns_allowed" field.
	HomerunsAllowed int `json:"homeruns_allowed,omitempty"`
	// Walks holds the value of the "walks" field.
	Walks int `json:"walks,omitempty"`
	// HitByPitch holds the value of the "hit_by_pitch" field.
	HitByPitch int `json:"hit_by_pitch,omitempty"`
	// Strikeouts holds the value of the "strikeouts" field.
	Strikeouts int `json:"strikeouts,omitempty"`
	// EarnedRuns holds the value of the "earned_runs" field.
	EarnedRuns int `json:"earned_runs,omitempty"`
	// Whip holds the value of the "whip" field.
	Whip float64 `json:"whip,omitempty"`
	// OpponentAvg holds the value of the "opponent_avg" field.
	OpponentAvg float64 `json:"opponent_avg,omitempty"`
	// StrikeoutRate holds the value of the "strikeout_rate" field.
	StrikeoutRate float64 `json:"strikeout_rate,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PitcherRecordQuery when eager-loading is set.
	Edges                 PitcherRecordEdges `json:"edges"`
	game_pitching_records *int
	user_pitching_records *int
	selectValues          sql.SelectValues
}

// PitcherRecordEdges holds the relations/edges for other nodes in the graph.
type PitcherRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PitcherRecordEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PitcherRecordEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PitcherRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pitcherrecord.FieldEra, pitcherrecord.FieldWinningPct, pitcherrecord.FieldInnings, pitcherrecord.FieldWhip, pitcherrecord.FieldOpponentAvg, pitcherrecord.FieldStrikeoutRate:
			values[i] = new(sql.NullFloat64)
		case pitcherrecord.FieldID, pitcherrecord.FieldGames, pitcherrecord.FieldWins, pitcherrecord.FieldLosses, pitcherrecord.FieldSaves, pitcherrecord.FieldHolds, pitcherrecord.FieldBattersFaced, pitcherrecord.FieldOpponentAtBats, pitcherrecord.FieldHitsAllowed, pitcherrecord.FieldHomerunsAllowed, pitcherrecord.FieldWalks, pitcherrecord.FieldHitByPitch, pitcherrecord.FieldStrikeouts, pitcherrecord.FieldEarnedRuns:
			values[i] = new(sql.NullInt64)
		case pitcherrecord.FieldCreatedAt, pitcherrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case pitcherrecord.ForeignKeys[0]: // game_pitching_records
			values[i] = new(sql.NullInt64)
		case pitcherrecord.ForeignKeys[1]: // user_pitching_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PitcherRecord fields.
func (pr *PitcherRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pitcherrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case pitcherrecord.FieldGames:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field games", values[i])
			} else if value.Valid {
				pr.Games = int(value.Int64)
			}
		case pitcherrecord.FieldEra:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field era", values[i])
			} else if value.Valid {
				pr.Era = value.Float64
			}
		case pitcherrecord.FieldWins:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field wins", values[i])
			} else if value.Valid {
				pr.Wins = int(value.Int64)
			}
		case pitcherrecord.FieldLosses:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field losses", values[i])
			} else if value.Valid {
				pr.Losses = int(value.Int64)
			}
		case pitcherrecord.FieldSaves:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field saves", values[i])
			} else if value.Valid {
				pr.Saves = int(value.Int64)
			}
		case pitcherrecord.FieldHolds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field holds", values[i])
			} else if value.Valid {
				pr.Holds = int(value.Int64)
			}
		case pitcherrecord.FieldWinningPct:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field winning_pct", values[i])
			} else if value.Valid {
				pr.WinningPct = value.Float64
			}
		case pitcherrecord.FieldBattersFaced:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field batters_faced", values[i])
			} else if value.Valid {
				pr.BattersFaced = int(value.Int64)
			}
		case pitcherrecord.FieldOpponentAtBats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field opponent_at_bats", values[i])
			} else if value.Valid {
				pr.OpponentAtBats = int(value.Int64)
			}
		case pitcherrecord.FieldInnings:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field innings", values[i])
			} else if value.Valid {
				pr.Innings = value.Float64
			}
		case pitcherrecord.FieldHitsAllowed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hits_allowed", values[i])
			} else if value.Valid {
				pr.HitsAllowed = int(value.Int64)
			}
		case pitcherrecord.FieldHomerunsAllowed:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeruns_allowed", values[i])
			} else if value.Valid {
				pr.HomerunsAllowed = int(value.Int64)
			}
		case pitcherrecord.FieldWalks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field walks", values[i])
			} else if value.Valid {
				pr.Walks = int(value.Int64)
			}
		case pitcherrecord.FieldHitByPitch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hit_by_pitch", values[i])
			} else if value.Valid {
				pr.HitByPitch = int(value.Int64)
			}
		case pitcherrecord.FieldStrikeouts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field strikeouts", values[i])
			} else if value.Valid {
				pr.Strikeouts = int(value.Int64)
			}
		case pitcherrecord.FieldEarnedRuns:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field earned_runs", values[i])
			} else if value.Valid {
				pr.EarnedRuns = int(value.Int64)
			}
		case pitcherrecord.FieldWhip:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field whip", values[i])
			} else if value.Valid {
				pr.Whip = value.Float64
			}
		case pitcherrecord.FieldOpponentAvg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field opponent_avg", values[i])
			} else if value.Valid {
				pr.OpponentAvg = value.Float64
			}
		case pitcherrecord.FieldStrikeoutRate:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field strikeout_rate", values[i])
			} else if value.Valid {
				pr.StrikeoutRate = value.Float64
			}
		case pitcherrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				pr.CreatedAt = value.Time
			}
		case pitcherrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				pr.UpdatedAt = value.Time
			}
		case pitcherrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_pitching_records", value)
			} else if value.Valid {
				pr.game_pitching_records = new(int)
				*pr.game_pitching_records = int(value.Int64)
			}
		case pitcherrecord.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_pitching_records", value)
			} else if value.Valid {
				pr.user_pitching_records = new(int)
				*pr.user_pitching_records = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PitcherRecord.
// This includes values selected through modifiers, order, etc.
func (pr *PitcherRecord) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the PitcherRecord entity.
func (pr *PitcherRecord) QueryUser() *UserQuery {
	return NewPitcherRecordClient(pr.config).QueryUser(pr)
}

// QueryGame queries the "game" edge of the PitcherRecord entity.
func (pr *PitcherRecord) QueryGame() *GameQuery {
	return NewPitcherRecordClient(pr.config).QueryGame(pr)
}

// Update returns a builder for updating this PitcherRecord.
// Note that you need to call PitcherRecord.Unwrap() before calling this method if this PitcherRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *PitcherRecord) Update() *PitcherRecordUpdateOne {
	return NewPitcherRecordClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the PitcherRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *PitcherRecord) Unwrap() *PitcherRecord {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: PitcherRecord is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *PitcherRecord) String() string {
	var builder strings.Builder
	builder.WriteString("PitcherRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("games=")
	builder.WriteString(fmt.Sprintf("%v", pr.Games))
	builder.WriteString(", ")
	builder.WriteString("era=")
	builder.WriteString(fmt.Sprintf("%v", pr.Era))
	builder.WriteString(", ")
	builder.WriteString("wins=")
	builder.WriteString(fmt.Sprintf("%v", pr.Wins))
	builder.WriteString(", ")
	builder.WriteString("losses=")
	builder.WriteString(fmt.Sprintf("%v", pr.Losses))
	builder.WriteString(", ")
	builder.WriteString("saves=")
	builder.WriteString(fmt.Sprintf("%v", pr.Saves))
	builder.WriteString(", ")
	builder.WriteString("holds=")
	builder.WriteString(fmt.Sprintf("%v", pr.Holds))
	builder.WriteString(", ")
	builder.WriteString("winning_pct=")
	builder.WriteString(fmt.Sprintf("%v", pr.WinningPct))
	builder.WriteString(", ")
	builder.WriteString("batters_faced=")
	builder.WriteString(fmt.Sprintf("%v", pr.BattersFaced))
	builder.WriteString(", ")
	builder.WriteString("opponent_at_bats=")
	builder.WriteString(fmt.Sprintf("%v", pr.OpponentAtBats))
	builder.WriteString(", ")
	builder.WriteString("innings=")
	builder.WriteString(fmt.Sprintf("%v", pr.Innings))
	builder.WriteString(", ")
	builder.WriteString("hits_allowed=")
	builder.WriteString(fmt.Sprintf("%v", pr.HitsAllowed))
	builder.WriteString(", ")
	builder.WriteString("homeruns_allowed=")
	builder.WriteString(fmt.Sprintf("%v", pr.HomerunsAllowed))
	builder.WriteString(", ")
	builder.WriteString("walks=")
	builder.WriteString(fmt.Sprintf("%v", pr.Walks))
	builder.WriteString(", ")
	builder.WriteString("hit_by_pitch=")
	builder.WriteString(fmt.Sprintf("%v", pr.HitByPitch))
	builder.WriteString(", ")
	builder.WriteString("strikeouts=")
	builder.WriteString(fmt.Sprintf("%v", pr.Strikeouts))
	builder.WriteString(", ")
	builder.WriteString("earned_runs=")
	builder.WriteString(fmt.Sprintf("%v", pr.EarnedRuns))
	builder.WriteString(", ")
	builder.WriteString("whip=")
	builder.WriteString(fmt.Sprintf("%v", pr.Whip))
	builder.WriteString(", ")
	builder.WriteString("opponent_avg=")
	builder.WriteString(fmt.Sprintf("%v", pr.OpponentAvg))
	builder.WriteString(", ")
	builder.WriteString("strikeout_rate=")
	builder.WriteString(fmt.Sprintf("%v", pr.StrikeoutRate))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(pr.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(pr.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PitcherRecords is a parsable slice of PitcherRecord.
type PitcherRecords []*PitcherRecord
