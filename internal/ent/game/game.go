// Code generated by ent, DO NOT EDIT.

package game

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the game type in the database.
	Label = "game"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDate holds the string denoting the date field in the database.
	FieldDate = "date"
	// FieldOpponent holds the string denoting the opponent field in the database.
	FieldOpponent = "opponent"
	// FieldLocation holds the string denoting the location field in the database.
	FieldLocation = "location"
	// FieldResult holds the string denoting the result field in the database.
	FieldResult = "result"
	// FieldMyScore holds the string denoting the my_score field in the database.
	FieldMyScore = "my_score"
	// FieldOpponentScore holds the string denoting the opponent_score field in the database.
	FieldOpponentScore = "opponent_score"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeBattingRecords holds the string denoting the batting_records edge name in mutations.
	EdgeBattingRecords = "batting_records"
	// EdgePitchingRecords holds the string denoting the pitching_records edge name in mutations.
	EdgePitchingRecords = "pitching_records"
	// Table holds the table name of the game in the database.
	Table = "games"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "games"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_games"
	// BattingRecordsTable is the table that holds the batting_records relation/edge.
	BattingRecordsTable = "batter_records"
	// BattingRecordsInverseTable is the table name for the BatterRecord entity.
	// It exists in this package in order to avoid circular dependency with the "batterrecord" package.
	BattingRecordsInverseTable = "batter_records"
	// BattingRecordsColumn is the table column denoting the batting_records relation/edge.
	BattingRecordsColumn = "game_batting_records"
	// PitchingRecordsTable is the table that holds the pitching_records relation/edge.
	PitchingRecordsTable = "pitcher_records"
	// PitchingRecordsInverseTable is the table name for the PitcherRecord entity.
	// It exists in this package in order to avoid circular dependency with the "pitcherrecord" package.
	PitchingRecordsInverseTable = "pitcher_records"
	// PitchingRecordsColumn is the table column denoting the pitching_records relation/edge.
	PitchingRecordsColumn = "game_pitching_records"
)

// Columns holds all SQL columns for game fields.
var Columns = []string{
	FieldID,
	FieldDate,
	FieldOpponent,
	FieldLocation,
	FieldResult,
	FieldMyScore,
	FieldOpponentScore,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "games"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"user_games",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the Game queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDate orders the results by the date field.
func ByDate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDate, opts...).ToFunc()
}

// ByOpponent orders the results by the opponent field.
func ByOpponent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpponent, opts...).ToFunc()
}

// ByLocation orders the results by the location field.
func ByLocation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocation, opts...).ToFunc()
}

// ByResult orders the results by the result field.
func ByResult(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldResult, opts...).ToFunc()
}

// ByMyScore orders the results by the my_score field.
func ByMyScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMyScore, opts...).ToFunc()
}

// ByOpponentScore orders the results by the opponent_score field.
func ByOpponentScore(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOpponentScore, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByBattingRecordsCount orders the results by batting_records count.
func ByBattingRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBattingRecordsStep(), opts...)
	}
}

// ByBattingRecords orders the results by batting_records terms.
func ByBattingRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBattingRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPitchingRecordsCount orders the results by pitching_records count.
func ByPitchingRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPitchingRecordsStep(), opts...)
	}
}

// ByPitchingRecords orders the results by pitching_records terms.
func ByPitchingRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPitchingRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newBattingRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BattingRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BattingRecordsTable, BattingRecordsColumn),
	)
}
func newPitchingRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PitchingRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PitchingRecordsTable, PitchingRecordsColumn),
	)
}
