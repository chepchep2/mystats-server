// Code generated by ent, DO NOT EDIT.

package game

import (
	"mystats-server/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldID, id))
}

// Date applies equality check predicate on the "date" field. It's identical to DateEQ.
func Date(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldDate, v))
}

// Opponent applies equality check predicate on the "opponent" field. It's identical to OpponentEQ.
func Opponent(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOpponent, v))
}

// Location applies equality check predicate on the "location" field. It's identical to LocationEQ.
func Location(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldLocation, v))
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldResult, v))
}

// MyScore applies equality check predicate on the "my_score" field. It's identical to MyScoreEQ.
func MyScore(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldMyScore, v))
}

// OpponentScore applies equality check predicate on the "opponent_score" field. It's identical to OpponentScoreEQ.
func OpponentScore(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOpponentScore, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldUpdatedAt, v))
}

// DateEQ applies the EQ predicate on the "date" field.
func DateEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldDate, v))
}

// DateNEQ applies the NEQ predicate on the "date" field.
func DateNEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldDate, v))
}

// DateIn applies the In predicate on the "date" field.
func DateIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldDate, vs...))
}

// DateNotIn applies the NotIn predicate on the "date" field.
func DateNotIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldDate, vs...))
}

// DateGT applies the GT predicate on the "date" field.
func DateGT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldDate, v))
}

// DateGTE applies the GTE predicate on the "date" field.
func DateGTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldDate, v))
}

// DateLT applies the LT predicate on the "date" field.
func DateLT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldDate, v))
}

// DateLTE applies the LTE predicate on the "date" field.
func DateLTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldDate, v))
}

// OpponentEQ applies the EQ predicate on the "opponent" field.
func OpponentEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOpponent, v))
}

// OpponentNEQ applies the NEQ predicate on the "opponent" field.
func OpponentNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldOpponent, v))
}

// OpponentIn applies the In predicate on the "opponent" field.
func OpponentIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldOpponent, vs...))
}

// OpponentNotIn applies the NotIn predicate on the "opponent" field.
func OpponentNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldOpponent, vs...))
}

// OpponentGT applies the GT predicate on the "opponent" field.
func OpponentGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldOpponent, v))
}

// OpponentGTE applies the GTE predicate on the "opponent" field.
func OpponentGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldOpponent, v))
}

// OpponentLT applies the LT predicate on the "opponent" field.
func OpponentLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldOpponent, v))
}

// OpponentLTE applies the LTE predicate on the "opponent" field.
func OpponentLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldOpponent, v))
}

// OpponentContains applies the Contains predicate on the "opponent" field.
func OpponentContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldOpponent, v))
}

// OpponentHasPrefix applies the HasPrefix predicate on the "opponent" field.
func OpponentHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldOpponent, v))
}

// OpponentHasSuffix applies the HasSuffix predicate on the "opponent" field.
func OpponentHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldOpponent, v))
}

// OpponentIsNil applies the IsNil predicate on the "opponent" field.
func OpponentIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldOpponent))
}

// OpponentNotNil applies the NotNil predicate on the "opponent" field.
func OpponentNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldOpponent))
}

// OpponentEqualFold applies the EqualFold predicate on the "opponent" field.
func OpponentEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldOpponent, v))
}

// OpponentContainsFold applies the ContainsFold predicate on the "opponent" field.
func OpponentContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldOpponent, v))
}

// LocationEQ applies the EQ predicate on the "location" field.
func LocationEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldLocation, v))
}

// LocationNEQ applies the NEQ predicate on the "location" field.
func LocationNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldLocation, v))
}

// LocationIn applies the In predicate on the "location" field.
func LocationIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldLocation, vs...))
}

// LocationNotIn applies the NotIn predicate on the "location" field.
func LocationNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldLocation, vs...))
}

// LocationGT applies the GT predicate on the "location" field.
func LocationGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldLocation, v))
}

// LocationGTE applies the GTE predicate on the "location" field.
func LocationGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldLocation, v))
}

// LocationLT applies the LT predicate on the "location" field.
func LocationLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldLocation, v))
}

// LocationLTE applies the LTE predicate on the "location" field.
func LocationLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldLocation, v))
}

// LocationContains applies the Contains predicate on the "location" field.
func LocationContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldLocation, v))
}

// LocationHasPrefix applies the HasPrefix predicate on the "location" field.
func LocationHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldLocation, v))
}

// LocationHasSuffix applies the HasSuffix predicate on the "location" field.
func LocationHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldLocation, v))
}

// LocationIsNil applies the IsNil predicate on the "location" field.
func LocationIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldLocation))
}

// LocationNotNil applies the NotNil predicate on the "location" field.
func LocationNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldLocation))
}

// LocationEqualFold applies the EqualFold predicate on the "location" field.
func LocationEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldLocation, v))
}

// LocationContainsFold applies the ContainsFold predicate on the "location" field.
func LocationContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldLocation, v))
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldResult, v))
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v string) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldResult, v))
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldResult, vs...))
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...string) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldResult, vs...))
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v string) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldResult, v))
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v string) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldResult, v))
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v string) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldResult, v))
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v string) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldResult, v))
}

// ResultContains applies the Contains predicate on the "result" field.
func ResultContains(v string) predicate.Game {
	return predicate.Game(sql.FieldContains(FieldResult, v))
}

// ResultHasPrefix applies the HasPrefix predicate on the "result" field.
func ResultHasPrefix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasPrefix(FieldResult, v))
}

// ResultHasSuffix applies the HasSuffix predicate on the "result" field.
func ResultHasSuffix(v string) predicate.Game {
	return predicate.Game(sql.FieldHasSuffix(FieldResult, v))
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldResult))
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldResult))
}

// ResultEqualFold applies the EqualFold predicate on the "result" field.
func ResultEqualFold(v string) predicate.Game {
	return predicate.Game(sql.FieldEqualFold(FieldResult, v))
}

// ResultContainsFold applies the ContainsFold predicate on the "result" field.
func ResultContainsFold(v string) predicate.Game {
	return predicate.Game(sql.FieldContainsFold(FieldResult, v))
}

// MyScoreEQ applies the EQ predicate on the "my_score" field.
func MyScoreEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldMyScore, v))
}

// MyScoreNEQ applies the NEQ predicate on the "my_score" field.
func MyScoreNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldMyScore, v))
}

// MyScoreIn applies the In predicate on the "my_score" field.
func MyScoreIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldMyScore, vs...))
}

// MyScoreNotIn applies the NotIn predicate on the "my_score" field.
func MyScoreNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldMyScore, vs...))
}

// MyScoreGT applies the GT predicate on the "my_score" field.
func MyScoreGT(v int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldMyScore, v))
}

// MyScoreGTE applies the GTE predicate on the "my_score" field.
func MyScoreGTE(v int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldMyScore, v))
}

// MyScoreLT applies the LT predicate on the "my_score" field.
func MyScoreLT(v int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldMyScore, v))
}

// MyScoreLTE applies the LTE predicate on the "my_score" field.
func MyScoreLTE(v int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldMyScore, v))
}

// MyScoreIsNil applies the IsNil predicate on the "my_score" field.
func MyScoreIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldMyScore))
}

// MyScoreNotNil applies the NotNil predicate on the "my_score" field.
func MyScoreNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldMyScore))
}

// OpponentScoreEQ applies the EQ predicate on the "opponent_score" field.
func OpponentScoreEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldOpponentScore, v))
}

// OpponentScoreNEQ applies the NEQ predicate on the "opponent_score" field.
func OpponentScoreNEQ(v int) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldOpponentScore, v))
}

// OpponentScoreIn applies the In predicate on the "opponent_score" field.
func OpponentScoreIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldOpponentScore, vs...))
}

// OpponentScoreNotIn applies the NotIn predicate on the "opponent_score" field.
func OpponentScoreNotIn(vs ...int) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldOpponentScore, vs...))
}

// OpponentScoreGT applies the GT predicate on the "opponent_score" field.
func OpponentScoreGT(v int) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldOpponentScore, v))
}

// OpponentScoreGTE applies the GTE predicate on the "opponent_score" field.
func OpponentScoreGTE(v int) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldOpponentScore, v))
}

// OpponentScoreLT applies the LT predicate on the "opponent_score" field.
func OpponentScoreLT(v int) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldOpponentScore, v))
}

// OpponentScoreLTE applies the LTE predicate on the "opponent_score" field.
func OpponentScoreLTE(v int) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldOpponentScore, v))
}

// OpponentScoreIsNil applies the IsNil predicate on the "opponent_score" field.
func OpponentScoreIsNil() predicate.Game {
	return predicate.Game(sql.FieldIsNull(FieldOpponentScore))
}

// OpponentScoreNotNil applies the NotNil predicate on the "opponent_score" field.
func OpponentScoreNotNil() predicate.Game {
	return predicate.Game(sql.FieldNotNull(FieldOpponentScore))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Game {
	return predicate.Game(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Game {
	return predicate.Game(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasBattingRecords applies the HasEdge predicate on the "batting_records" edge.
func HasBattingRecords() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, BattingRecordsTable, BattingRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasBattingRecordsWith applies the HasEdge predicate on the "batting_records" edge with a given conditions (other predicates).
func HasBattingRecordsWith(preds ...predicate.BatterRecord) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newBattingRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasPitchingRecords applies the HasEdge predicate on the "pitching_records" edge.
func HasPitchingRecords() predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, PitchingRecordsTable, PitchingRecordsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasPitchingRecordsWith applies the HasEdge predicate on the "pitching_records" edge with a given conditions (other predicates).
func HasPitchingRecordsWith(preds ...predicate.PitcherRecord) predicate.Game {
	return predicate.Game(func(s *sql.Selector) {
		step := newPitchingRecordsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Game) predicate.Game {
	return predicate.Game(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Game) predicate.Game {
	return predicate.Game(sql.NotPredicates(p))
}
