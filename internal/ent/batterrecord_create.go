// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/batterrecord"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BatterRecordCreate is the builder for creating a BatterRecord entity.
type BatterRecordCreate struct {
	config
	mutation *BatterRecordMutation
	hooks    []Hook
}

// SetGames sets the "games" field.
func (brc *BatterRecordCreate) SetGames(i int) *BatterRecordCreate {
	brc.mutation.SetGames(i)
	return brc
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableGames(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetGames(*i)
	}
	return brc
}

// SetAvg sets the "avg" field.
func (brc *BatterRecordCreate) SetAvg(f float64) *BatterRecordCreate {
	brc.mutation.SetAvg(f)
	return brc
}

// SetNillableAvg sets the "avg" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableAvg(f *float64) *BatterRecordCreate {
	if f != nil {
		brc.SetAvg(*f)
	}
	return brc
}

// SetPlateAppearances sets the "plate_appearances" field.
func (brc *BatterRecordCreate) SetPlateAppearances(i int) *BatterRecordCreate {
	brc.mutation.SetPlateAppearances(i)
	return brc
}

// SetNillablePlateAppearances sets the "plate_appearances" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillablePlateAppearances(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetPlateAppearances(*i)
	}
	return brc
}

// SetAtBats sets the "at_bats" field.
func (brc *BatterRecordCreate) SetAtBats(i int) *BatterRecordCreate {
	brc.mutation.SetAtBats(i)
	return brc
}

// SetNillableAtBats sets the "at_bats" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableAtBats(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetAtBats(*i)
	}
	return brc
}

// SetRuns sets the "runs" field.
func (brc *BatterRecordCreate) SetRuns(i int) *BatterRecordCreate {
	brc.mutation.SetRuns(i)
	return brc
}

// SetNillableRuns sets the "runs" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableRuns(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetRuns(*i)
	}
	return brc
}

// SetHits sets the "hits" field.
func (brc *BatterRecordCreate) SetHits(i int) *BatterRecordCreate {
	brc.mutation.SetHits(i)
	return brc
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableHits(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetHits(*i)
	}
	return brc
}

// SetSingles sets the "singles" field.
func (brc *BatterRecordCreate) SetSingles(i int) *BatterRecordCreate {
	brc.mutation.SetSingles(i)
	return brc
}

// SetNillableSingles sets the "singles" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableSingles(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetSingles(*i)
	}
	return brc
}

// SetDoubles sets the "doubles" field.
func (brc *BatterRecordCreate) SetDoubles(i int) *BatterRecordCreate {
	brc.mutation.SetDoubles(i)
	return brc
}

// SetNillableDoubles sets the "doubles" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableDoubles(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetDoubles(*i)
	}
	return brc
}

// SetTriples sets the "triples" field.
func (brc *BatterRecordCreate) SetTriples(i int) *BatterRecordCreate {
	brc.mutation.SetTriples(i)
	return brc
}

// SetNillableTriples sets the "triples" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableTriples(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetTriples(*i)
	}
	return brc
}

// SetHomeruns sets the "homeruns" field.
func (brc *BatterRecordCreate) SetHomeruns(i int) *BatterRecordCreate {
	brc.mutation.SetHomeruns(i)
	return brc
}

// SetNillableHomeruns sets the "homeruns" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableHomeruns(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetHomeruns(*i)
	}
	return brc
}

// SetWalks sets the "walks" field.
func (brc *BatterRecordCreate) SetWalks(i int) *BatterRecordCreate {
	brc.mutation.SetWalks(i)
	return brc
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableWalks(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetWalks(*i)
	}
	return brc
}

// SetRbis sets the "rbis" field.
func (brc *BatterRecordCreate) SetRbis(i int) *BatterRecordCreate {
	brc.mutation.SetRbis(i)
	return brc
}

// SetNillableRbis sets the "rbis" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableRbis(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetRbis(*i)
	}
	return brc
}

// SetSteals sets the "steals" field.
func (brc *BatterRecordCreate) SetSteals(i int) *BatterRecordCreate {
	brc.mutation.SetSteals(i)
	return brc
}

// SetNillableSteals sets the "steals" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableSteals(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetSteals(*i)
	}
	return brc
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (brc *BatterRecordCreate) SetHitByPitch(i int) *BatterRecordCreate {
	brc.mutation.SetHitByPitch(i)
	return brc
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableHitByPitch(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetHitByPitch(*i)
	}
	return brc
}

// SetStrikeouts sets the "strikeouts" field.
func (brc *BatterRecordCreate) SetStrikeouts(i int) *BatterRecordCreate {
	brc.mutation.SetStrikeouts(i)
	return brc
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableStrikeouts(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetStrikeouts(*i)
	}
	return brc
}

// SetDoublePlays sets the "double_plays" field.
func (brc *BatterRecordCreate) SetDoublePlays(i int) *BatterRecordCreate {
	brc.mutation.SetDoublePlays(i)
	return brc
}

// SetNillableDoublePlays sets the "double_plays" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableDoublePlays(i *int) *BatterRecordCreate {
	if i != nil {
		brc.SetDoublePlays(*i)
	}
	return brc
}

// SetSlg sets the "slg" field.
func (brc *BatterRecordCreate) SetSlg(f float64) *BatterRecordCreate {
	brc.mutation.SetSlg(f)
	return brc
}

// SetNillableSlg sets the "slg" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableSlg(f *float64) *BatterRecordCreate {
	if f != nil {
		brc.SetSlg(*f)
	}
	return brc
}

// SetObp sets the "obp" field.
func (brc *BatterRecordCreate) SetObp(f float64) *BatterRecordCreate {
	brc.mutation.SetObp(f)
	return brc
}

// SetNillableObp sets the "obp" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableObp(f *float64) *BatterRecordCreate {
	if f != nil {
		brc.SetObp(*f)
	}
	return brc
}

// SetOps sets the "ops" field.
func (brc *BatterRecordCreate) SetOps(f float64) *BatterRecordCreate {
	brc.mutation.SetOps(f)
	return brc
}

// SetNillableOps sets the "ops" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableOps(f *float64) *BatterRecordCreate {
	if f != nil {
		brc.SetOps(*f)
	}
	return brc
}

// SetBbK sets the "bb_k" field.
func (brc *BatterRecordCreate) SetBbK(f float64) *BatterRecordCreate {
	brc.mutation.SetBbK(f)
	return brc
}

// SetNillableBbK sets the "bb_k" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableBbK(f *float64) *BatterRecordCreate {
	if f != nil {
		brc.SetBbK(*f)
	}
	return brc
}

// SetCreatedAt sets the "created_at" field.
func (brc *BatterRecordCreate) SetCreatedAt(t time.Time) *BatterRecordCreate {
	brc.mutation.SetCreatedAt(t)
	return brc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableCreatedAt(t *time.Time) *BatterRecordCreate {
	if t != nil {
		brc.SetCreatedAt(*t)
	}
	return brc
}

// SetUpdatedAt sets the "updated_at" field.
func (brc *BatterRecordCreate) SetUpdatedAt(t time.Time) *BatterRecordCreate {
	brc.mutation.SetUpdatedAt(t)
	return brc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (brc *BatterRecordCreate) SetNillableUpdatedAt(t *time.Time) *BatterRecordCreate {
	if t != nil {
		brc.SetUpdatedAt(*t)
	}
	return brc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (brc *BatterRecordCreate) SetUserID(id int) *BatterRecordCreate {
	brc.mutation.SetUserID(id)
	return brc
}

// SetUser sets the "user" edge to the User entity.
func (brc *BatterRecordCreate) SetUser(u *User) *BatterRecordCreate {
	return brc.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (brc *BatterRecordCreate) SetGameID(id int) *BatterRecordCreate {
	brc.mutation.SetGameID(id)
	return brc
}

// SetGame sets the "game" edge to the Game entity.
func (brc *BatterRecordCreate) SetGame(g *Game) *BatterRecordCreate {
	return brc.SetGameID(g.ID)
}

// Mutation returns the BatterRecordMutation object of the builder.
func (brc *BatterRecordCreate) Mutation() *BatterRecordMutation {
	return brc.mutation
}

// Save creates the BatterRecord in the database.
func (brc *BatterRecordCreate) Save(ctx context.Context) (*BatterRecord, error) {
	brc.defaults()
	return withHooks(ctx, brc.sqlSave, brc.mutation, brc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (brc *BatterRecordCreate) SaveX(ctx context.Context) *BatterRecord {
	v, err := brc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brc *BatterRecordCreate) Exec(ctx context.Context) error {
	_, err := brc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brc *BatterRecordCreate) ExecX(ctx context.Context) {
	if err := brc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (brc *BatterRecordCreate) defaults() {
	if _, ok := brc.mutation.Games(); !ok {
		v := batterrecord.DefaultGames
		brc.mutation.SetGames(v)
	}
	if _, ok := brc.mutation.PlateAppearances(); !ok {
		v := batterrecord.DefaultPlateAppearances
		brc.mutation.SetPlateAppearances(v)
	}
	if _, ok := brc.mutation.AtBats(); !ok {
		v := batterrecord.DefaultAtBats
		brc.mutation.SetAtBats(v)
	}
	if _, ok := brc.mutation.Runs(); !ok {
		v := batterrecord.DefaultRuns
		brc.mutation.SetRuns(v)
	}
	if _, ok := brc.mutation.Hits(); !ok {
		v := batterrecord.DefaultHits
		brc.mutation.SetHits(v)
	}
	if _, ok := brc.mutation.Singles(); !ok {
		v := batterrecord.DefaultSingles
		brc.mutation.SetSingles(v)
	}
	if _, ok := brc.mutation.Doubles(); !ok {
		v := batterrecord.DefaultDoubles
		brc.mutation.SetDoubles(v)
	}
	if _, ok := brc.mutation.Triples(); !ok {
		v := batterrecord.DefaultTriples
		brc.mutation.SetTriples(v)
	}
	if _, ok := brc.mutation.Homeruns(); !ok {
		v := batterrecord.DefaultHomeruns
		brc.mutation.SetHomeruns(v)
	}
	if _, ok := brc.mutation.Walks(); !ok {
		v := batterrecord.DefaultWalks
		brc.mutation.SetWalks(v)
	}
	if _, ok := brc.mutation.Rbis(); !ok {
		v := batterrecord.DefaultRbis
		brc.mutation.SetRbis(v)
	}
	if _, ok := brc.mutation.Steals(); !ok {
		v := batterrecord.DefaultSteals
		brc.mutation.SetSteals(v)
	}
	if _, ok := brc.mutation.HitByPitch(); !ok {
		v := batterrecord.DefaultHitByPitch
		brc.mutation.SetHitByPitch(v)
	}
	if _, ok := brc.mutation.Strikeouts(); !ok {
		v := batterrecord.DefaultStrikeouts
		brc.mutation.SetStrikeouts(v)
	}
	if _, ok := brc.mutation.DoublePlays(); !ok {
		v := batterrecord.DefaultDoublePlays
		brc.mutation.SetDoublePlays(v)
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		v := batterrecord.DefaultCreatedAt()
		brc.mutation.SetCreatedAt(v)
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		v := batterrecord.DefaultUpdatedAt()
		brc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (brc *BatterRecordCreate) check() error {
	if _, ok := brc.mutation.Games(); !ok {
		return &ValidationError{Name: "games", err: errors.New(`ent: missing required field "BatterRecord.games"`)}
	}
	if _, ok := brc.mutation.PlateAppearances(); !ok {
		return &ValidationError{Name: "plate_appearances", err: errors.New(`ent: missing required field "BatterRecord.plate_appearances"`)}
	}
	if _, ok := brc.mutation.AtBats(); !ok {
		return &ValidationError{Name: "at_bats", err: errors.New(`ent: missing required field "BatterRecord.at_bats"`)}
	}
	if _, ok := brc.mutation.Runs(); !ok {
		return &ValidationError{Name: "runs", err: errors.New(`ent: missing required field "BatterRecord.runs"`)}
	}
	if _, ok := brc.mutation.Hits(); !ok {
		return &ValidationError{Name: "hits", err: errors.New(`ent: missing required field "BatterRecord.hits"`)}
	}
	if _, ok := brc.mutation.Singles(); !ok {
		return &ValidationError{Name: "singles", err: errors.New(`ent: missing required field "BatterRecord.singles"`)}
	}
	if _, ok := brc.mutation.Doubles(); !ok {
		return &ValidationError{Name: "doubles", err: errors.New(`ent: missing required field "BatterRecord.doubles"`)}
	}
	if _, ok := brc.mutation.Triples(); !ok {
		return &ValidationError{Name: "triples", err: errors.New(`ent: missing required field "BatterRecord.triples"`)}
	}
	if _, ok := brc.mutation.Homeruns(); !ok {
		return &ValidationError{Name: "homeruns", err: errors.New(`ent: missing required field "BatterRecord.homeruns"`)}
	}
	if _, ok := brc.mutation.Walks(); !ok {
		return &ValidationError{Name: "walks", err: errors.New(`ent: missing required field "BatterRecord.walks"`)}
	}
	if _, ok := brc.mutation.Rbis(); !ok {
		return &ValidationError{Name: "rbis", err: errors.New(`ent: missing required field "BatterRecord.rbis"`)}
	}
	if _, ok := brc.mutation.Steals(); !ok {
		return &ValidationError{Name: "steals", err: errors.New(`ent: missing required field "BatterRecord.steals"`)}
	}
	if _, ok := brc.mutation.HitByPitch(); !ok {
		return &ValidationError{Name: "hit_by_pitch", err: errors.New(`ent: missing required field "BatterRecord.hit_by_pitch"`)}
	}
	if _, ok := brc.mutation.Strikeouts(); !ok {
		return &ValidationError{Name: "strikeouts", err: errors.New(`ent: missing required field "BatterRecord.strikeouts"`)}
	}
	if _, ok := brc.mutation.DoublePlays(); !ok {
		return &ValidationError{Name: "double_plays", err: errors.New(`ent: missing required field "BatterRecord.double_plays"`)}
	}
	if _, ok := brc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "BatterRecord.created_at"`)}
	}
	if _, ok := brc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "BatterRecord.updated_at"`)}
	}
	if len(brc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "BatterRecord.user"`)}
	}
	if len(brc.mutation.GameIDs()) == 0 {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "BatterRecord.game"`)}
	}
	return nil
}

func (brc *BatterRecordCreate) sqlSave(ctx context.Context) (*BatterRecord, error) {
	if err := brc.check(); err != nil {
		return nil, err
	}
	_node, _spec := brc.createSpec()
	if err := sqlgraph.CreateNode(ctx, brc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	brc.mutation.id = &_node.ID
	brc.mutation.done = true
	return _node, nil
}

func (brc *BatterRecordCreate) createSpec() (*BatterRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &BatterRecord{config: brc.config}
		_spec = sqlgraph.NewCreateSpec(batterrecord.Table, sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt))
	)
	if value, ok := brc.mutation.Games(); ok {
		_spec.SetField(batterrecord.FieldGames, field.TypeInt, value)
		_node.Games = value
	}
	if value, ok := brc.mutation.Avg(); ok {
		_spec.SetField(batterrecord.FieldAvg, field.TypeFloat64, value)
		_node.Avg = value
	}
	if value, ok := brc.mutation.PlateAppearances(); ok {
		_spec.SetField(batterrecord.FieldPlateAppearances, field.TypeInt, value)
		_node.PlateAppearances = value
	}
	if value, ok := brc.mutation.AtBats(); ok {
		_spec.SetField(batterrecord.FieldAtBats, field.TypeInt, value)
		_node.AtBats = value
	}
	if value, ok := brc.mutation.Runs(); ok {
		_spec.SetField(batterrecord.FieldRuns, field.TypeInt, value)
		_node.Runs = value
	}
	if value, ok := brc.mutation.Hits(); ok {
		_spec.SetField(batterrecord.FieldHits, field.TypeInt, value)
		_node.Hits = value
	}
	if value, ok := brc.mutation.Singles(); ok {
		_spec.SetField(batterrecord.FieldSingles, field.TypeInt, value)
		_node.Singles = value
	}
	if value, ok := brc.mutation.Doubles(); ok {
		_spec.SetField(batterrecord.FieldDoubles, field.TypeInt, value)
		_node.Doubles = value
	}
	if value, ok := brc.mutation.Triples(); ok {
		_spec.SetField(batterrecord.FieldTriples, field.TypeInt, value)
		_node.Triples = value
	}
	if value, ok := brc.mutation.Homeruns(); ok {
		_spec.SetField(batterrecord.FieldHomeruns, field.TypeInt, value)
		_node.Homeruns = value
	}
	if value, ok := brc.mutation.Walks(); ok {
		_spec.SetField(batterrecord.FieldWalks, field.TypeInt, value)
		_node.Walks = value
	}
	if value, ok := brc.mutation.Rbis(); ok {
		_spec.SetField(batterrecord.FieldRbis, field.TypeInt, value)
		_node.Rbis = value
	}
	if value, ok := brc.mutation.Steals(); ok {
		_spec.SetField(batterrecord.FieldSteals, field.TypeInt, value)
		_node.Steals = value
	}
	if value, ok := brc.mutation.HitByPitch(); ok {
		_spec.SetField(batterrecord.FieldHitByPitch, field.TypeInt, value)
		_node.HitByPitch = value
	}
	if value, ok := brc.mutation.Strikeouts(); ok {
		_spec.SetField(batterrecord.FieldStrikeouts, field.TypeInt, value)
		_node.Strikeouts = value
	}
	if value, ok := brc.mutation.DoublePlays(); ok {
		_spec.SetField(batterrecord.FieldDoublePlays, field.TypeInt, value)
		_node.DoublePlays = value
	}
	if value, ok := brc.mutation.Slg(); ok {
		_spec.SetField(batterrecord.FieldSlg, field.TypeFloat64, value)
		_node.Slg = value
	}
	if value, ok := brc.mutation.Obp(); ok {
		_spec.SetField(batterrecord.FieldObp, field.TypeFloat64, value)
		_node.Obp = value
	}
	if value, ok := brc.mutation.Ops(); ok {
		_spec.SetField(batterrecord.FieldOps, field.TypeFloat64, value)
		_node.Ops = value
	}
	if value, ok := brc.mutation.BbK(); ok {
		_spec.SetField(batterrecord.FieldBbK, field.TypeFloat64, value)
		_node.BbK = value
	}
	if value, ok := brc.mutation.CreatedAt(); ok {
		_spec.SetField(batterrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := brc.mutation.UpdatedAt(); ok {
		_spec.SetField(batterrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := brc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.UserTable,
			Columns: []string{batterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_batting_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := brc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.GameTable,
			Columns: []string{batterrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_batting_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// BatterRecordCreateBulk is the builder for creating many BatterRecord entities in bulk.
type BatterRecordCreateBulk struct {
	config
	err      error
	builders []*BatterRecordCreate
}

// Save creates the BatterRecord entities in the database.
func (brcb *BatterRecordCreateBulk) Save(ctx context.Context) ([]*BatterRecord, error) {
	if brcb.err != nil {
		return nil, brcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(brcb.builders))
	nodes := make([]*BatterRecord, len(brcb.builders))
	mutators := make([]Mutator, len(brcb.builders))
	for i := range brcb.builders {
		func(i int, root context.Context) {
			builder := brcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BatterRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, brcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, brcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, brcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (brcb *BatterRecordCreateBulk) SaveX(ctx context.Context) []*BatterRecord {
	v, err := brcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (brcb *BatterRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := brcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (brcb *BatterRecordCreateBulk) ExecX(ctx context.Context) {
	if err := brcb.Exec(ctx); err != nil {
		panic(err)
	}
}
