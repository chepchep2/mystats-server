// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mystats-server/internal/ent/batterrecord"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// BatterRecord is the model entity for the BatterRecord schema.
type BatterRecord struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Games holds the value of the "games" field.
	Games int `json:"games,omitempty"`
	// Avg holds the value of the "avg" field.
	Avg float64 `json:"avg,omitempty"`
	// PlateAppearances holds the value of the "plate_appearances" field.
	PlateAppearances int `json:"plate_appearances,omitempty"`
	// AtBats holds the value of the "at_bats" field.
	AtBats int `json:"at_bats,omitempty"`
	// Runs holds the value of the "runs" field.
	Runs int `json:"runs,omitempty"`
	// Hits holds the value of the "hits" field.
	Hits int `json:"hits,omitempty"`
	// Singles holds the value of the "singles" field.
	Singles int `json:"singles,omitempty"`
	// Doubles holds the value of the "doubles" field.
	Doubles int `json:"doubles,omitempty"`
	// Triples holds the value of the "triples" field.
	Triples int `json:"triples,omitempty"`
	// Homeruns holds the value of the "homeruns" field.
	Homeruns int `json:"homeruns,omitempty"`
	// Walks holds the value of the "walks" field.
	Walks int `json:"walks,omitempty"`
	// Rbis holds the value of the "rbis" field.
	Rbis int `json:"rbis,omitempty"`
	// Steals holds the value of the "steals" field.
	Steals int `json:"steals,omitempty"`
	// HitByPitch holds the value of the "hit_by_pitch" field.
	HitByPitch int `json:"hit_by_pitch,omitempty"`
	// Strikeouts holds the value of the "strikeouts" field.
	Strikeouts int `json:"strikeouts,omitempty"`
	// DoublePlays holds the value of the "double_plays" field.
	DoublePlays int `json:"double_plays,omitempty"`
	// Slg holds the value of the "slg" field.
	Slg float64 `json:"slg,omitempty"`
	// Obp holds the value of the "obp" field.
	Obp float64 `json:"obp,omitempty"`
	// Ops holds the value of the "ops" field.
	Ops float64 `json:"ops,omitempty"`
	// BbK holds the value of the "bb_k" field.
	BbK float64 `json:"bb_k,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the BatterRecordQuery when eager-loading is set.
	Edges                BatterRecordEdges `json:"edges"`
	game_batting_records *int
	user_batting_records *int
	selectValues         sql.SelectValues
}

// BatterRecordEdges holds the relations/edges for other nodes in the graph.
type BatterRecordEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// Game holds the value of the game edge.
	Game *Game `json:"game,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatterRecordEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// GameOrErr returns the Game value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e BatterRecordEdges) GameOrErr() (*Game, error) {
	if e.Game != nil {
		return e.Game, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: game.Label}
	}
	return nil, &NotLoadedError{edge: "game"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*BatterRecord) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case batterrecord.FieldAvg, batterrecord.FieldSlg, batterrecord.FieldObp, batterrecord.FieldOps, batterrecord.FieldBbK:
			values[i] = new(sql.NullFloat64)
		case batterrecord.FieldID, batterrecord.FieldGames, batterrecord.FieldPlateAppearances, batterrecord.FieldAtBats, batterrecord.FieldRuns, batterrecord.FieldHits, batterrecord.FieldSingles, batterrecord.FieldDoubles, batterrecord.FieldTriples, batterrecord.FieldHomeruns, batterrecord.FieldWalks, batterrecord.FieldRbis, batterrecord.FieldSteals, batterrecord.FieldHitByPitch, batterrecord.FieldStrikeouts, batterrecord.FieldDoublePlays:
			values[i] = new(sql.NullInt64)
		case batterrecord.FieldCreatedAt, batterrecord.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case batterrecord.ForeignKeys[0]: // game_batting_records
			values[i] = new(sql.NullInt64)
		case batterrecord.ForeignKeys[1]: // user_batting_records
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the BatterRecord fields.
func (br *BatterRecord) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case batterrecord.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			br.ID = int(value.Int64)
		case batterrecord.FieldGames:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field games", values[i])
			} else if value.Valid {
				br.Games = int(value.Int64)
			}
		case batterrecord.FieldAvg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field avg", values[i])
			} else if value.Valid {
				br.Avg = value.Float64
			}
		case batterrecord.FieldPlateAppearances:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field plate_appearances", values[i])
			} else if value.Valid {
				br.PlateAppearances = int(value.Int64)
			}
		case batterrecord.FieldAtBats:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field at_bats", values[i])
			} else if value.Valid {
				br.AtBats = int(value.Int64)
			}
		case batterrecord.FieldRuns:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field runs", values[i])
			} else if value.Valid {
				br.Runs = int(value.Int64)
			}
		case batterrecord.FieldHits:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hits", values[i])
			} else if value.Valid {
				br.Hits = int(value.Int64)
			}
		case batterrecord.FieldSingles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field singles", values[i])
			} else if value.Valid {
				br.Singles = int(value.Int64)
			}
		case batterrecord.FieldDoubles:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field doubles", values[i])
			} else if value.Valid {
				br.Doubles = int(value.Int64)
			}
		case batterrecord.FieldTriples:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field triples", values[i])
			} else if value.Valid {
				br.Triples = int(value.Int64)
			}
		case batterrecord.FieldHomeruns:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field homeruns", values[i])
			} else if value.Valid {
				br.Homeruns = int(value.Int64)
			}
		case batterrecord.FieldWalks:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field walks", values[i])
			} else if value.Valid {
				br.Walks = int(value.Int64)
			}
		case batterrecord.FieldRbis:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field rbis", values[i])
			} else if value.Valid {
				br.Rbis = int(value.Int64)
			}
		case batterrecord.FieldSteals:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field steals", values[i])
			} else if value.Valid {
				br.Steals = int(value.Int64)
			}
		case batterrecord.FieldHitByPitch:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field hit_by_pitch", values[i])
			} else if value.Valid {
				br.HitByPitch = int(value.Int64)
			}
		case batterrecord.FieldStrikeouts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field strikeouts", values[i])
			} else if value.Valid {
				br.Strikeouts = int(value.Int64)
			}
		case batterrecord.FieldDoublePlays:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field double_plays", values[i])
			} else if value.Valid {
				br.DoublePlays = int(value.Int64)
			}
		case batterrecord.FieldSlg:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field slg", values[i])
			} else if value.Valid {
				br.Slg = value.Float64
			}
		case batterrecord.FieldObp:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field obp", values[i])
			} else if value.Valid {
				br.Obp = value.Float64
			}
		case batterrecord.FieldOps:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field ops", values[i])
			} else if value.Valid {
				br.Ops = value.Float64
			}
		case batterrecord.FieldBbK:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field bb_k", values[i])
			} else if value.Valid {
				br.BbK = value.Float64
			}
		case batterrecord.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				br.CreatedAt = value.Time
			}
		case batterrecord.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				br.UpdatedAt = value.Time
			}
		case batterrecord.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field game_batting_records", value)
			} else if value.Valid {
				br.game_batting_records = new(int)
				*br.game_batting_records = int(value.Int64)
			}
		case batterrecord.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_batting_records", value)
			} else if value.Valid {
				br.user_batting_records = new(int)
				*br.user_batting_records = int(value.Int64)
			}
		default:
			br.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the BatterRecord.
// This includes values selected through modifiers, order, etc.
func (br *BatterRecord) Value(name string) (ent.Value, error) {
	return br.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the BatterRecord entity.
func (br *BatterRecord) QueryUser() *UserQuery {
	return NewBatterRecordClient(br.config).QueryUser(br)
}

// QueryGame queries the "game" edge of the BatterRecord entity.
func (br *BatterRecord) QueryGame() *GameQuery {
	return NewBatterRecordClient(br.config).QueryGame(br)
}

// Update returns a builder for updating this BatterRecord.
// Note that you need to call BatterRecord.Unwrap() before calling this method if this BatterRecord
// was returned from a transaction, and the transaction was committed or rolled back.
func (br *BatterRecord) Update() *BatterRecordUpdateOne {
	return NewBatterRecordClient(br.config).UpdateOne(br)
}

// Unwrap unwraps the BatterRecord entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (br *BatterRecord) Unwrap() *BatterRecord {
	_tx, ok := br.config.driver.(*txDriver)
	if !ok {
		panic("ent: BatterRecord is not a transactional entity")
	}
	br.config.driver = _tx.drv
	return br
}

// String implements the fmt.Stringer.
func (br *BatterRecord) String() string {
	var builder strings.Builder
	builder.WriteString("BatterRecord(")
	builder.WriteString(fmt.Sprintf("id=%v, ", br.ID))
	builder.WriteString("games=")
	builder.WriteString(fmt.Sprintf("%v", br.Games))
	builder.WriteString(", ")
	builder.WriteString("avg=")
	builder.WriteString(fmt.Sprintf("%v", br.Avg))
	builder.WriteString(", ")
	builder.WriteString("plate_appearances=")
	builder.WriteString(fmt.Sprintf("%v", br.PlateAppearances))
	builder.WriteString(", ")
	builder.WriteString("at_bats=")
	builder.WriteString(fmt.Sprintf("%v", br.AtBats))
	builder.WriteString(", ")
	builder.WriteString("runs=")
	builder.WriteString(fmt.Sprintf("%v", br.Runs))
	builder.WriteString(", ")
	builder.WriteString("hits=")
	builder.WriteString(fmt.Sprintf("%v", br.Hits))
	builder.WriteString(", ")
	builder.WriteString("singles=")
	builder.WriteString(fmt.Sprintf("%v", br.Singles))
	builder.WriteString(", ")
	builder.WriteString("doubles=")
	builder.WriteString(fmt.Sprintf("%v", br.Doubles))
	builder.WriteString(", ")
	builder.WriteString("triples=")
	builder.WriteString(fmt.Sprintf("%v", br.Triples))
	builder.WriteString(", ")
	builder.WriteString("homeruns=")
	builder.WriteString(fmt.Sprintf("%v", br.Homeruns))
	builder.WriteString(", ")
	builder.WriteString("walks=")
	builder.WriteString(fmt.Sprintf("%v", br.Walks))
	builder.WriteString(", ")
	builder.WriteString("rbis=")
	builder.WriteString(fmt.Sprintf("%v", br.Rbis))
	builder.WriteString(", ")
	builder.WriteString("steals=")
	builder.WriteString(fmt.Sprintf("%v", br.Steals))
	builder.WriteString(", ")
	builder.WriteString("hit_by_pitch=")
	builder.WriteString(fmt.Sprintf("%v", br.HitByPitch))
	builder.WriteString(", ")
	builder.WriteString("strikeouts=")
	builder.WriteString(fmt.Sprintf("%v", br.Strikeouts))
	builder.WriteString(", ")
	builder.WriteString("double_plays=")
	builder.WriteString(fmt.Sprintf("%v", br.DoublePlays))
	builder.WriteString(", ")
	builder.WriteString("slg=")
	builder.WriteString(fmt.Sprintf("%v", br.Slg))
	builder.WriteString(", ")
	builder.WriteString("obp=")
	builder.WriteString(fmt.Sprintf("%v", br.Obp))
	builder.WriteString(", ")
	builder.WriteString("ops=")
	builder.WriteString(fmt.Sprintf("%v", br.Ops))
	builder.WriteString(", ")
	builder.WriteString("bb_k=")
	builder.WriteString(fmt.Sprintf("%v", br.BbK))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(br.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(br.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// BatterRecords is a parsable slice of BatterRecord.
type BatterRecords []*BatterRecord
