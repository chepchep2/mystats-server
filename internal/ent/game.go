// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/user"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Game is the model entity for the Game schema.
type Game struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Date holds the value of the "date" field.
	Date time.Time `json:"date,omitempty"`
	// Opponent holds the value of the "opponent" field.
	Opponent string `json:"opponent,omitempty"`
	// Location holds the value of the "location" field.
	Location string `json:"location,omitempty"`
	// Result holds the value of the "result" field.
	Result string `json:"result,omitempty"`
	// MyScore holds the value of the "my_score" field.
	MyScore int `json:"my_score,omitempty"`
	// OpponentScore holds the value of the "opponent_score" field.
	OpponentScore int `json:"opponent_score,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the GameQuery when eager-loading is set.
	Edges        GameEdges `json:"edges"`
	user_games   *int
	selectValues sql.SelectValues
}

// GameEdges holds the relations/edges for other nodes in the graph.
type GameEdges struct {
	// User holds the value of the user edge.
	User *User `json:"user,omitempty"`
	// BattingRecords holds the value of the batting_records edge.
	BattingRecords []*BatterRecord `json:"batting_records,omitempty"`
	// PitchingRecords holds the value of the pitching_records edge.
	PitchingRecords []*PitcherRecord `json:"pitching_records,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e GameEdges) UserOrErr() (*User, error) {
	if e.User != nil {
		return e.User, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "user"}
}

// BattingRecordsOrErr returns the BattingRecords value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) BattingRecordsOrErr() ([]*BatterRecord, error) {
	if e.loadedTypes[1] {
		return e.BattingRecords, nil
	}
	return nil, &NotLoadedError{edge: "batting_records"}
}

// PitchingRecordsOrErr returns the PitchingRecords value or an error if the edge
// was not loaded in eager-loading.
func (e GameEdges) PitchingRecordsOrErr() ([]*PitcherRecord, error) {
	if e.loadedTypes[2] {
		return e.PitchingRecords, nil
	}
	return nil, &NotLoadedError{edge: "pitching_records"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Game) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case game.FieldID, game.FieldMyScore, game.FieldOpponentScore:
			values[i] = new(sql.NullInt64)
		case game.FieldOpponent, game.FieldLocation, game.FieldResult:
			values[i] = new(sql.NullString)
		case game.FieldDate, game.FieldCreatedAt, game.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case game.ForeignKeys[0]: // user_games
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Game fields.
func (ga *Game) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case game.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ga.ID = int(value.Int64)
		case game.FieldDate:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field date", values[i])
			} else if value.Valid {
				ga.Date = value.Time
			}
		case game.FieldOpponent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field opponent", values[i])
			} else if value.Valid {
				ga.Opponent = value.String
			}
		case game.FieldLocation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field location", values[i])
			} else if value.Valid {
				ga.Location = value.String
			}
		case game.FieldResult:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				ga.Result = value.String
			}
		case game.FieldMyScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field my_score", values[i])
			} else if value.Valid {
				ga.MyScore = int(value.Int64)
			}
		case game.FieldOpponentScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field opponent_score", values[i])
			} else if value.Valid {
				ga.OpponentScore = int(value.Int64)
			}
		case game.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ga.CreatedAt = value.Time
			}
		case game.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ga.UpdatedAt = value.Time
			}
		case game.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_games", value)
			} else if value.Valid {
				ga.user_games = new(int)
				*ga.user_games = int(value.Int64)
			}
		default:
			ga.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Game.
// This includes values selected through modifiers, order, etc.
func (ga *Game) Value(name string) (ent.Value, error) {
	return ga.selectValues.Get(name)
}

// QueryUser queries the "user" edge of the Game entity.
func (ga *Game) QueryUser() *UserQuery {
	return NewGameClient(ga.config).QueryUser(ga)
}

// QueryBattingRecords queries the "batting_records" edge of the Game entity.
func (ga *Game) QueryBattingRecords() *BatterRecordQuery {
	return NewGameClient(ga.config).QueryBattingRecords(ga)
}

// QueryPitchingRecords queries the "pitching_records" edge of the Game entity.
func (ga *Game) QueryPitchingRecords() *PitcherRecordQuery {
	return NewGameClient(ga.config).QueryPitchingRecords(ga)
}

// Update returns a builder for updating this Game.
// Note that you need to call Game.Unwrap() before calling this method if this Game
// was returned from a transaction, and the transaction was committed or rolled back.
func (ga *Game) Update() *GameUpdateOne {
	return NewGameClient(ga.config).UpdateOne(ga)
}

// Unwrap unwraps the Game entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ga *Game) Unwrap() *Game {
	_tx, ok := ga.config.driver.(*txDriver)
	if !ok {
		panic("ent: Game is not a transactional entity")
	}
	ga.config.driver = _tx.drv
	return ga
}

// String implements the fmt.Stringer.
func (ga *Game) String() string {
	var builder strings.Builder
	builder.WriteString("Game(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ga.ID))
	builder.WriteString("date=")
	builder.WriteString(ga.Date.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("opponent=")
	builder.WriteString(ga.Opponent)
	builder.WriteString(", ")
	builder.WriteString("location=")
	builder.WriteString(ga.Location)
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(ga.Result)
	builder.WriteString(", ")
	builder.WriteString("my_score=")
	builder.WriteString(fmt.Sprintf("%v", ga.MyScore))
	builder.WriteString(", ")
	builder.WriteString("opponent_score=")
	builder.WriteString(fmt.Sprintf("%v", ga.OpponentScore))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ga.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ga.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Games is a parsable slice of Game.
type Games []*Game
