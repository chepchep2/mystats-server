// Code generated by ent, DO NOT EDIT.

package batterrecord

import (
	"mystats-server/internal/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldID, id))
}

// Games applies equality check predicate on the "games" field. It's identical to GamesEQ.
func Games(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldGames, v))
}

// Avg applies equality check predicate on the "avg" field. It's identical to AvgEQ.
func Avg(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldAvg, v))
}

// PlateAppearances applies equality check predicate on the "plate_appearances" field. It's identical to PlateAppearancesEQ.
func PlateAppearances(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldPlateAppearances, v))
}

// AtBats applies equality check predicate on the "at_bats" field. It's identical to AtBatsEQ.
func AtBats(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldAtBats, v))
}

// Runs applies equality check predicate on the "runs" field. It's identical to RunsEQ.
func Runs(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldRuns, v))
}

// Hits applies equality check predicate on the "hits" field. It's identical to HitsEQ.
func Hits(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHits, v))
}

// Singles applies equality check predicate on the "singles" field. It's identical to SinglesEQ.
func Singles(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSingles, v))
}

// Doubles applies equality check predicate on the "doubles" field. It's identical to DoublesEQ.
func Doubles(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldDoubles, v))
}

// Triples applies equality check predicate on the "triples" field. It's identical to TriplesEQ.
func Triples(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldTriples, v))
}

// Homeruns applies equality check predicate on the "homeruns" field. It's identical to HomerunsEQ.
func Homeruns(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHomeruns, v))
}

// Walks applies equality check predicate on the "walks" field. It's identical to WalksEQ.
func Walks(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldWalks, v))
}

// Rbis applies equality check predicate on the "rbis" field. It's identical to RbisEQ.
func Rbis(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldRbis, v))
}

// Steals applies equality check predicate on the "steals" field. It's identical to StealsEQ.
func Steals(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSteals, v))
}

// HitByPitch applies equality check predicate on the "hit_by_pitch" field. It's identical to HitByPitchEQ.
func HitByPitch(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHitByPitch, v))
}

// Strikeouts applies equality check predicate on the "strikeouts" field. It's identical to StrikeoutsEQ.
func Strikeouts(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldStrikeouts, v))
}

// DoublePlays applies equality check predicate on the "double_plays" field. It's identical to DoublePlaysEQ.
func DoublePlays(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldDoublePlays, v))
}

// Slg applies equality check predicate on the "slg" field. It's identical to SlgEQ.
func Slg(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSlg, v))
}

// Obp applies equality check predicate on the "obp" field. It's identical to ObpEQ.
func Obp(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldObp, v))
}

// Ops applies equality check predicate on the "ops" field. It's identical to OpsEQ.
func Ops(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldOps, v))
}

// BbK applies equality check predicate on the "bb_k" field. It's identical to BbKEQ.
func BbK(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldBbK, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// GamesEQ applies the EQ predicate on the "games" field.
func GamesEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldGames, v))
}

// GamesNEQ applies the NEQ predicate on the "games" field.
func GamesNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldGames, v))
}

// GamesIn applies the In predicate on the "games" field.
func GamesIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldGames, vs...))
}

// GamesNotIn applies the NotIn predicate on the "games" field.
func GamesNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldGames, vs...))
}

// GamesGT applies the GT predicate on the "games" field.
func GamesGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldGames, v))
}

// GamesGTE applies the GTE predicate on the "games" field.
func GamesGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldGames, v))
}

// GamesLT applies the LT predicate on the "games" field.
func GamesLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldGames, v))
}

// GamesLTE applies the LTE predicate on the "games" field.
func GamesLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldGames, v))
}

// AvgEQ applies the EQ predicate on the "avg" field.
func AvgEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldAvg, v))
}

// AvgNEQ applies the NEQ predicate on the "avg" field.
func AvgNEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldAvg, v))
}

// AvgIn applies the In predicate on the "avg" field.
func AvgIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldAvg, vs...))
}

// AvgNotIn applies the NotIn predicate on the "avg" field.
func AvgNotIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldAvg, vs...))
}

// AvgGT applies the GT predicate on the "avg" field.
func AvgGT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldAvg, v))
}

// AvgGTE applies the GTE predicate on the "avg" field.
func AvgGTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldAvg, v))
}

// AvgLT applies the LT predicate on the "avg" field.
func AvgLT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldAvg, v))
}

// AvgLTE applies the LTE predicate on the "avg" field.
func AvgLTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldAvg, v))
}

// AvgIsNil applies the IsNil predicate on the "avg" field.
func AvgIsNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIsNull(FieldAvg))
}

// AvgNotNil applies the NotNil predicate on the "avg" field.
func AvgNotNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotNull(FieldAvg))
}

// PlateAppearancesEQ applies the EQ predicate on the "plate_appearances" field.
func PlateAppearancesEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldPlateAppearances, v))
}

// PlateAppearancesNEQ applies the NEQ predicate on the "plate_appearances" field.
func PlateAppearancesNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldPlateAppearances, v))
}

// PlateAppearancesIn applies the In predicate on the "plate_appearances" field.
func PlateAppearancesIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldPlateAppearances, vs...))
}

// PlateAppearancesNotIn applies the NotIn predicate on the "plate_appearances" field.
func PlateAppearancesNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldPlateAppearances, vs...))
}

// PlateAppearancesGT applies the GT predicate on the "plate_appearances" field.
func PlateAppearancesGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldPlateAppearances, v))
}

// PlateAppearancesGTE applies the GTE predicate on the "plate_appearances" field.
func PlateAppearancesGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldPlateAppearances, v))
}

// PlateAppearancesLT applies the LT predicate on the "plate_appearances" field.
func PlateAppearancesLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldPlateAppearances, v))
}

// PlateAppearancesLTE applies the LTE predicate on the "plate_appearances" field.
func PlateAppearancesLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldPlateAppearances, v))
}

// AtBatsEQ applies the EQ predicate on the "at_bats" field.
func AtBatsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldAtBats, v))
}

// AtBatsNEQ applies the NEQ predicate on the "at_bats" field.
func AtBatsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldAtBats, v))
}

// AtBatsIn applies the In predicate on the "at_bats" field.
func AtBatsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldAtBats, vs...))
}

// AtBatsNotIn applies the NotIn predicate on the "at_bats" field.
func AtBatsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldAtBats, vs...))
}

// AtBatsGT applies the GT predicate on the "at_bats" field.
func AtBatsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldAtBats, v))
}

// AtBatsGTE applies the GTE predicate on the "at_bats" field.
func AtBatsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldAtBats, v))
}

// AtBatsLT applies the LT predicate on the "at_bats" field.
func AtBatsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldAtBats, v))
}

// AtBatsLTE applies the LTE predicate on the "at_bats" field.
func AtBatsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldAtBats, v))
}

// RunsEQ applies the EQ predicate on the "runs" field.
func RunsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldRuns, v))
}

// RunsNEQ applies the NEQ predicate on the "runs" field.
func RunsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldRuns, v))
}

// RunsIn applies the In predicate on the "runs" field.
func RunsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldRuns, vs...))
}

// RunsNotIn applies the NotIn predicate on the "runs" field.
func RunsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldRuns, vs...))
}

// RunsGT applies the GT predicate on the "runs" field.
func RunsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldRuns, v))
}

// RunsGTE applies the GTE predicate on the "runs" field.
func RunsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldRuns, v))
}

// RunsLT applies the LT predicate on the "runs" field.
func RunsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldRuns, v))
}

// RunsLTE applies the LTE predicate on the "runs" field.
func RunsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldRuns, v))
}

// HitsEQ applies the EQ predicate on the "hits" field.
func HitsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHits, v))
}

// HitsNEQ applies the NEQ predicate on the "hits" field.
func HitsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldHits, v))
}

// HitsIn applies the In predicate on the "hits" field.
func HitsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldHits, vs...))
}

// HitsNotIn applies the NotIn predicate on the "hits" field.
func HitsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldHits, vs...))
}

// HitsGT applies the GT predicate on the "hits" field.
func HitsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldHits, v))
}

// HitsGTE applies the GTE predicate on the "hits" field.
func HitsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldHits, v))
}

// HitsLT applies the LT predicate on the "hits" field.
func HitsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldHits, v))
}

// HitsLTE applies the LTE predicate on the "hits" field.
func HitsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldHits, v))
}

// SinglesEQ applies the EQ predicate on the "singles" field.
func SinglesEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSingles, v))
}

// SinglesNEQ applies the NEQ predicate on the "singles" field.
func SinglesNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldSingles, v))
}

// SinglesIn applies the In predicate on the "singles" field.
func SinglesIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldSingles, vs...))
}

// SinglesNotIn applies the NotIn predicate on the "singles" field.
func SinglesNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldSingles, vs...))
}

// SinglesGT applies the GT predicate on the "singles" field.
func SinglesGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldSingles, v))
}

// SinglesGTE applies the GTE predicate on the "singles" field.
func SinglesGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldSingles, v))
}

// SinglesLT applies the LT predicate on the "singles" field.
func SinglesLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldSingles, v))
}

// SinglesLTE applies the LTE predicate on the "singles" field.
func SinglesLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldSingles, v))
}

// DoublesEQ applies the EQ predicate on the "doubles" field.
func DoublesEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldDoubles, v))
}

// DoublesNEQ applies the NEQ predicate on the "doubles" field.
func DoublesNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldDoubles, v))
}

// DoublesIn applies the In predicate on the "doubles" field.
func DoublesIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldDoubles, vs...))
}

// DoublesNotIn applies the NotIn predicate on the "doubles" field.
func DoublesNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldDoubles, vs...))
}

// DoublesGT applies the GT predicate on the "doubles" field.
func DoublesGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldDoubles, v))
}

// DoublesGTE applies the GTE predicate on the "doubles" field.
func DoublesGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldDoubles, v))
}

// DoublesLT applies the LT predicate on the "doubles" field.
func DoublesLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldDoubles, v))
}

// DoublesLTE applies the LTE predicate on the "doubles" field.
func DoublesLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldDoubles, v))
}

// TriplesEQ applies the EQ predicate on the "triples" field.
func TriplesEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldTriples, v))
}

// TriplesNEQ applies the NEQ predicate on the "triples" field.
func TriplesNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldTriples, v))
}

// TriplesIn applies the In predicate on the "triples" field.
func TriplesIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldTriples, vs...))
}

// TriplesNotIn applies the NotIn predicate on the "triples" field.
func TriplesNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldTriples, vs...))
}

// TriplesGT applies the GT predicate on the "triples" field.
func TriplesGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldTriples, v))
}

// TriplesGTE applies the GTE predicate on the "triples" field.
func TriplesGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldTriples, v))
}

// TriplesLT applies the LT predicate on the "triples" field.
func TriplesLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldTriples, v))
}

// TriplesLTE applies the LTE predicate on the "triples" field.
func TriplesLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldTriples, v))
}

// HomerunsEQ applies the EQ predicate on the "homeruns" field.
func HomerunsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHomeruns, v))
}

// HomerunsNEQ applies the NEQ predicate on the "homeruns" field.
func HomerunsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldHomeruns, v))
}

// HomerunsIn applies the In predicate on the "homeruns" field.
func HomerunsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldHomeruns, vs...))
}

// HomerunsNotIn applies the NotIn predicate on the "homeruns" field.
func HomerunsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldHomeruns, vs...))
}

// HomerunsGT applies the GT predicate on the "homeruns" field.
func HomerunsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldHomeruns, v))
}

// HomerunsGTE applies the GTE predicate on the "homeruns" field.
func HomerunsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldHomeruns, v))
}

// HomerunsLT applies the LT predicate on the "homeruns" field.
func HomerunsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldHomeruns, v))
}

// HomerunsLTE applies the LTE predicate on the "homeruns" field.
func HomerunsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldHomeruns, v))
}

// WalksEQ applies the EQ predicate on the "walks" field.
func WalksEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldWalks, v))
}

// WalksNEQ applies the NEQ predicate on the "walks" field.
func WalksNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldWalks, v))
}

// WalksIn applies the In predicate on the "walks" field.
func WalksIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldWalks, vs...))
}

// WalksNotIn applies the NotIn predicate on the "walks" field.
func WalksNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldWalks, vs...))
}

// WalksGT applies the GT predicate on the "walks" field.
func WalksGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldWalks, v))
}

// WalksGTE applies the GTE predicate on the "walks" field.
func WalksGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldWalks, v))
}

// WalksLT applies the LT predicate on the "walks" field.
func WalksLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldWalks, v))
}

// WalksLTE applies the LTE predicate on the "walks" field.
func WalksLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldWalks, v))
}

// RbisEQ applies the EQ predicate on the "rbis" field.
func RbisEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldRbis, v))
}

// RbisNEQ applies the NEQ predicate on the "rbis" field.
func RbisNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldRbis, v))
}

// RbisIn applies the In predicate on the "rbis" field.
func RbisIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldRbis, vs...))
}

// RbisNotIn applies the NotIn predicate on the "rbis" field.
func RbisNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldRbis, vs...))
}

// RbisGT applies the GT predicate on the "rbis" field.
func RbisGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldRbis, v))
}

// RbisGTE applies the GTE predicate on the "rbis" field.
func RbisGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldRbis, v))
}

// RbisLT applies the LT predicate on the "rbis" field.
func RbisLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldRbis, v))
}

// RbisLTE applies the LTE predicate on the "rbis" field.
func RbisLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldRbis, v))
}

// StealsEQ applies the EQ predicate on the "steals" field.
func StealsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSteals, v))
}

// StealsNEQ applies the NEQ predicate on the "steals" field.
func StealsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldSteals, v))
}

// StealsIn applies the In predicate on the "steals" field.
func StealsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldSteals, vs...))
}

// StealsNotIn applies the NotIn predicate on the "steals" field.
func StealsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldSteals, vs...))
}

// StealsGT applies the GT predicate on the "steals" field.
func StealsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldSteals, v))
}

// StealsGTE applies the GTE predicate on the "steals" field.
func StealsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldSteals, v))
}

// StealsLT applies the LT predicate on the "steals" field.
func StealsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldSteals, v))
}

// StealsLTE applies the LTE predicate on the "steals" field.
func StealsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldSteals, v))
}

// HitByPitchEQ applies the EQ predicate on the "hit_by_pitch" field.
func HitByPitchEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldHitByPitch, v))
}

// HitByPitchNEQ applies the NEQ predicate on the "hit_by_pitch" field.
func HitByPitchNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldHitByPitch, v))
}

// HitByPitchIn applies the In predicate on the "hit_by_pitch" field.
func HitByPitchIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldHitByPitch, vs...))
}

// HitByPitchNotIn applies the NotIn predicate on the "hit_by_pitch" field.
func HitByPitchNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldHitByPitch, vs...))
}

// HitByPitchGT applies the GT predicate on the "hit_by_pitch" field.
func HitByPitchGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldHitByPitch, v))
}

// HitByPitchGTE applies the GTE predicate on the "hit_by_pitch" field.
func HitByPitchGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldHitByPitch, v))
}

// HitByPitchLT applies the LT predicate on the "hit_by_pitch" field.
func HitByPitchLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldHitByPitch, v))
}

// HitByPitchLTE applies the LTE predicate on the "hit_by_pitch" field.
func HitByPitchLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldHitByPitch, v))
}

// StrikeoutsEQ applies the EQ predicate on the "strikeouts" field.
func StrikeoutsEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldStrikeouts, v))
}

// StrikeoutsNEQ applies the NEQ predicate on the "strikeouts" field.
func StrikeoutsNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldStrikeouts, v))
}

// StrikeoutsIn applies the In predicate on the "strikeouts" field.
func StrikeoutsIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldStrikeouts, vs...))
}

// StrikeoutsNotIn applies the NotIn predicate on the "strikeouts" field.
func StrikeoutsNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldStrikeouts, vs...))
}

// StrikeoutsGT applies the GT predicate on the "strikeouts" field.
func StrikeoutsGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldStrikeouts, v))
}

// StrikeoutsGTE applies the GTE predicate on the "strikeouts" field.
func StrikeoutsGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldStrikeouts, v))
}

// StrikeoutsLT applies the LT predicate on the "strikeouts" field.
func StrikeoutsLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldStrikeouts, v))
}

// StrikeoutsLTE applies the LTE predicate on the "strikeouts" field.
func StrikeoutsLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldStrikeouts, v))
}

// DoublePlaysEQ applies the EQ predicate on the "double_plays" field.
func DoublePlaysEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldDoublePlays, v))
}

// DoublePlaysNEQ applies the NEQ predicate on the "double_plays" field.
func DoublePlaysNEQ(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldDoublePlays, v))
}

// DoublePlaysIn applies the In predicate on the "double_plays" field.
func DoublePlaysIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldDoublePlays, vs...))
}

// DoublePlaysNotIn applies the NotIn predicate on the "double_plays" field.
func DoublePlaysNotIn(vs ...int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldDoublePlays, vs...))
}

// DoublePlaysGT applies the GT predicate on the "double_plays" field.
func DoublePlaysGT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldDoublePlays, v))
}

// DoublePlaysGTE applies the GTE predicate on the "double_plays" field.
func DoublePlaysGTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldDoublePlays, v))
}

// DoublePlaysLT applies the LT predicate on the "double_plays" field.
func DoublePlaysLT(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldDoublePlays, v))
}

// DoublePlaysLTE applies the LTE predicate on the "double_plays" field.
func DoublePlaysLTE(v int) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldDoublePlays, v))
}

// SlgEQ applies the EQ predicate on the "slg" field.
func SlgEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldSlg, v))
}

// SlgNEQ applies the NEQ predicate on the "slg" field.
func SlgNEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldSlg, v))
}

// SlgIn applies the In predicate on the "slg" field.
func SlgIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldSlg, vs...))
}

// SlgNotIn applies the NotIn predicate on the "slg" field.
func SlgNotIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldSlg, vs...))
}

// SlgGT applies the GT predicate on the "slg" field.
func SlgGT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldSlg, v))
}

// SlgGTE applies the GTE predicate on the "slg" field.
func SlgGTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldSlg, v))
}

// SlgLT applies the LT predicate on the "slg" field.
func SlgLT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldSlg, v))
}

// SlgLTE applies the LTE predicate on the "slg" field.
func SlgLTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldSlg, v))
}

// SlgIsNil applies the IsNil predicate on the "slg" field.
func SlgIsNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIsNull(FieldSlg))
}

// SlgNotNil applies the NotNil predicate on the "slg" field.
func SlgNotNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotNull(FieldSlg))
}

// ObpEQ applies the EQ predicate on the "obp" field.
func ObpEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldObp, v))
}

// ObpNEQ applies the NEQ predicate on the "obp" field.
func ObpNEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldObp, v))
}

// ObpIn applies the In predicate on the "obp" field.
func ObpIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldObp, vs...))
}

// ObpNotIn applies the NotIn predicate on the "obp" field.
func ObpNotIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldObp, vs...))
}

// ObpGT applies the GT predicate on the "obp" field.
func ObpGT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldObp, v))
}

// ObpGTE applies the GTE predicate on the "obp" field.
func ObpGTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldObp, v))
}

// ObpLT applies the LT predicate on the "obp" field.
func ObpLT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldObp, v))
}

// ObpLTE applies the LTE predicate on the "obp" field.
func ObpLTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldObp, v))
}

// ObpIsNil applies the IsNil predicate on the "obp" field.
func ObpIsNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIsNull(FieldObp))
}

// ObpNotNil applies the NotNil predicate on the "obp" field.
func ObpNotNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotNull(FieldObp))
}

// OpsEQ applies the EQ predicate on the "ops" field.
func OpsEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldOps, v))
}

// OpsNEQ applies the NEQ predicate on the "ops" field.
func OpsNEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldOps, v))
}

// OpsIn applies the In predicate on the "ops" field.
func OpsIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldOps, vs...))
}

// OpsNotIn applies the NotIn predicate on the "ops" field.
func OpsNotIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldOps, vs...))
}

// OpsGT applies the GT predicate on the "ops" field.
func OpsGT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldOps, v))
}

// OpsGTE applies the GTE predicate on the "ops" field.
func OpsGTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldOps, v))
}

// OpsLT applies the LT predicate on the "ops" field.
func OpsLT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldOps, v))
}

// OpsLTE applies the LTE predicate on the "ops" field.
func OpsLTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldOps, v))
}

// OpsIsNil applies the IsNil predicate on the "ops" field.
func OpsIsNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIsNull(FieldOps))
}

// OpsNotNil applies the NotNil predicate on the "ops" field.
func OpsNotNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotNull(FieldOps))
}

// BbKEQ applies the EQ predicate on the "bb_k" field.
func BbKEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldBbK, v))
}

// BbKNEQ applies the NEQ predicate on the "bb_k" field.
func BbKNEQ(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldBbK, v))
}

// BbKIn applies the In predicate on the "bb_k" field.
func BbKIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldBbK, vs...))
}

// BbKNotIn applies the NotIn predicate on the "bb_k" field.
func BbKNotIn(vs ...float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldBbK, vs...))
}

// BbKGT applies the GT predicate on the "bb_k" field.
func BbKGT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldBbK, v))
}

// BbKGTE applies the GTE predicate on the "bb_k" field.
func BbKGTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldBbK, v))
}

// BbKLT applies the LT predicate on the "bb_k" field.
func BbKLT(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldBbK, v))
}

// BbKLTE applies the LTE predicate on the "bb_k" field.
func BbKLTE(v float64) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldBbK, v))
}

// BbKIsNil applies the IsNil predicate on the "bb_k" field.
func BbKIsNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIsNull(FieldBbK))
}

// BbKNotNil applies the NotNil predicate on the "bb_k" field.
func BbKNotNil() predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotNull(FieldBbK))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.BatterRecord {
	return predicate.BatterRecord(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.BatterRecord {
	return predicate.BatterRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.BatterRecord {
	return predicate.BatterRecord(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasGame applies the HasEdge predicate on the "game" edge.
func HasGame() predicate.BatterRecord {
	return predicate.BatterRecord(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasGameWith applies the HasEdge predicate on the "game" edge with a given conditions (other predicates).
func HasGameWith(preds ...predicate.Game) predicate.BatterRecord {
	return predicate.BatterRecord(func(s *sql.Selector) {
		step := newGameStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.BatterRecord) predicate.BatterRecord {
	return predicate.BatterRecord(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.BatterRecord) predicate.BatterRecord {
	return predicate.BatterRecord(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.BatterRecord) predicate.BatterRecord {
	return predicate.BatterRecord(sql.NotPredicates(p))
}
