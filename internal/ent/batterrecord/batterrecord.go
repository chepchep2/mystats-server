// Code generated by ent, DO NOT EDIT.

package batterrecord

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the batterrecord type in the database.
	Label = "batter_record"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldGames holds the string denoting the games field in the database.
	FieldGames = "games"
	// FieldAvg holds the string denoting the avg field in the database.
	FieldAvg = "avg"
	// FieldPlateAppearances holds the string denoting the plate_appearances field in the database.
	FieldPlateAppearances = "plate_appearances"
	// FieldAtBats holds the string denoting the at_bats field in the database.
	FieldAtBats = "at_bats"
	// FieldRuns holds the string denoting the runs field in the database.
	FieldRuns = "runs"
	// FieldHits holds the string denoting the hits field in the database.
	FieldHits = "hits"
	// FieldSingles holds the string denoting the singles field in the database.
	FieldSingles = "singles"
	// FieldDoubles holds the string denoting the doubles field in the database.
	FieldDoubles = "doubles"
	// FieldTriples holds the string denoting the triples field in the database.
	FieldTriples = "triples"
	// FieldHomeruns holds the string denoting the homeruns field in the database.
	FieldHomeruns = "homeruns"
	// FieldWalks holds the string denoting the walks field in the database.
	FieldWalks = "walks"
	// FieldRbis holds the string denoting the rbis field in the database.
	FieldRbis = "rbis"
	// FieldSteals holds the string denoting the steals field in the database.
	FieldSteals = "steals"
	// FieldHitByPitch holds the string denoting the hit_by_pitch field in the database.
	FieldHitByPitch = "hit_by_pitch"
	// FieldStrikeouts holds the string denoting the strikeouts field in the database.
	FieldStrikeouts = "strikeouts"
	// FieldDoublePlays holds the string denoting the double_plays field in the database.
	FieldDoublePlays = "double_plays"
	// FieldSlg holds the string denoting the slg field in the database.
	FieldSlg = "slg"
	// FieldObp holds the string denoting the obp field in the database.
	FieldObp = "obp"
	// FieldOps holds the string denoting the ops field in the database.
	FieldOps = "ops"
	// FieldBbK holds the string denoting the bb_k field in the database.
	FieldBbK = "bb_k"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeGame holds the string denoting the game edge name in mutations.
	EdgeGame = "game"
	// Table holds the table name of the batterrecord in the database.
	Table = "batter_records"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "batter_records"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "user_batting_records"
	// GameTable is the table that holds the game relation/edge.
	GameTable = "batter_records"
	// GameInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GameInverseTable = "games"
	// GameColumn is the table column denoting the game relation/edge.
	GameColumn = "game_batting_records"
)

// Columns holds all SQL columns for batterrecord fields.
var Columns = []string{
	FieldID,
	FieldGames,
	FieldAvg,
	FieldPlateAppearances,
	FieldAtBats,
	FieldRuns,
	FieldHits,
	FieldSingles,
	FieldDoubles,
	FieldTriples,
	FieldHomeruns,
	FieldWalks,
	FieldRbis,
	FieldSteals,
	FieldHitByPitch,
	FieldStrikeouts,
	FieldDoublePlays,
	FieldSlg,
	FieldObp,
	FieldOps,
	FieldBbK,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "batter_records"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"game_batting_records",
	"user_batting_records",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultGames holds the default value on creation for the "games" field.
	DefaultGames int
	// DefaultPlateAppearances holds the default value on creation for the "plate_appearances" field.
	DefaultPlateAppearances int
	// DefaultAtBats holds the default value on creation for the "at_bats" field.
	DefaultAtBats int
	// DefaultRuns holds the default value on creation for the "runs" field.
	DefaultRuns int
	// DefaultHits holds the default value on creation for the "hits" field.
	DefaultHits int
	// DefaultSingles holds the default value on creation for the "singles" field.
	DefaultSingles int
	// DefaultDoubles holds the default value on creation for the "doubles" field.
	DefaultDoubles int
	// DefaultTriples holds the default value on creation for the "triples" field.
	DefaultTriples int
	// DefaultHomeruns holds the default value on creation for the "homeruns" field.
	DefaultHomeruns int
	// DefaultWalks holds the default value on creation for the "walks" field.
	DefaultWalks int
	// DefaultRbis holds the default value on creation for the "rbis" field.
	DefaultRbis int
	// DefaultSteals holds the default value on creation for the "steals" field.
	DefaultSteals int
	// DefaultHitByPitch holds the default value on creation for the "hit_by_pitch" field.
	DefaultHitByPitch int
	// DefaultStrikeouts holds the default value on creation for the "strikeouts" field.
	DefaultStrikeouts int
	// DefaultDoublePlays holds the default value on creation for the "double_plays" field.
	DefaultDoublePlays int
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the BatterRecord queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByGames orders the results by the games field.
func ByGames(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldGames, opts...).ToFunc()
}

// ByAvg orders the results by the avg field.
func ByAvg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvg, opts...).ToFunc()
}

// ByPlateAppearances orders the results by the plate_appearances field.
func ByPlateAppearances(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPlateAppearances, opts...).ToFunc()
}

// ByAtBats orders the results by the at_bats field.
func ByAtBats(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAtBats, opts...).ToFunc()
}

// ByRuns orders the results by the runs field.
func ByRuns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRuns, opts...).ToFunc()
}

// ByHits orders the results by the hits field.
func ByHits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHits, opts...).ToFunc()
}

// BySingles orders the results by the singles field.
func BySingles(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSingles, opts...).ToFunc()
}

// ByDoubles orders the results by the doubles field.
func ByDoubles(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoubles, opts...).ToFunc()
}

// ByTriples orders the results by the triples field.
func ByTriples(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTriples, opts...).ToFunc()
}

// ByHomeruns orders the results by the homeruns field.
func ByHomeruns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHomeruns, opts...).ToFunc()
}

// ByWalks orders the results by the walks field.
func ByWalks(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalks, opts...).ToFunc()
}

// ByRbis orders the results by the rbis field.
func ByRbis(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRbis, opts...).ToFunc()
}

// BySteals orders the results by the steals field.
func BySteals(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSteals, opts...).ToFunc()
}

// ByHitByPitch orders the results by the hit_by_pitch field.
func ByHitByPitch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHitByPitch, opts...).ToFunc()
}

// ByStrikeouts orders the results by the strikeouts field.
func ByStrikeouts(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStrikeouts, opts...).ToFunc()
}

// ByDoublePlays orders the results by the double_plays field.
func ByDoublePlays(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDoublePlays, opts...).ToFunc()
}

// BySlg orders the results by the slg field.
func BySlg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSlg, opts...).ToFunc()
}

// ByObp orders the results by the obp field.
func ByObp(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldObp, opts...).ToFunc()
}

// ByOps orders the results by the ops field.
func ByOps(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOps, opts...).ToFunc()
}

// ByBbK orders the results by the bb_k field.
func ByBbK(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBbK, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByUserField orders the results by user field.
func ByUserField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newUserStep(), sql.OrderByField(field, opts...))
	}
}

// ByGameField orders the results by game field.
func ByGameField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGameStep(), sql.OrderByField(field, opts...))
	}
}
func newUserStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(UserInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
	)
}
func newGameStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GameInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, GameTable, GameColumn),
	)
}
