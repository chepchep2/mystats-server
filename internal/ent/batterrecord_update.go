// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/batterrecord"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/predicate"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// BatterRecordUpdate is the builder for updating BatterRecord entities.
type BatterRecordUpdate struct {
	config
	hooks    []Hook
	mutation *BatterRecordMutation
}

// Where appends a list predicates to the BatterRecordUpdate builder.
func (bru *BatterRecordUpdate) Where(ps ...predicate.BatterRecord) *BatterRecordUpdate {
	bru.mutation.Where(ps...)
	return bru
}

// SetGames sets the "games" field.
func (bru *BatterRecordUpdate) SetGames(i int) *BatterRecordUpdate {
	bru.mutation.ResetGames()
	bru.mutation.SetGames(i)
	return bru
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableGames(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetGames(*i)
	}
	return bru
}

// AddGames adds i to the "games" field.
func (bru *BatterRecordUpdate) AddGames(i int) *BatterRecordUpdate {
	bru.mutation.AddGames(i)
	return bru
}

// SetAvg sets the "avg" field.
func (bru *BatterRecordUpdate) SetAvg(f float64) *BatterRecordUpdate {
	bru.mutation.ResetAvg()
	bru.mutation.SetAvg(f)
	return bru
}

// SetNillableAvg sets the "avg" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableAvg(f *float64) *BatterRecordUpdate {
	if f != nil {
		bru.SetAvg(*f)
	}
	return bru
}

// AddAvg adds f to the "avg" field.
func (bru *BatterRecordUpdate) AddAvg(f float64) *BatterRecordUpdate {
	bru.mutation.AddAvg(f)
	return bru
}

// ClearAvg clears the value of the "avg" field.
func (bru *BatterRecordUpdate) ClearAvg() *BatterRecordUpdate {
	bru.mutation.ClearAvg()
	return bru
}

// SetPlateAppearances sets the "plate_appearances" field.
func (bru *BatterRecordUpdate) SetPlateAppearances(i int) *BatterRecordUpdate {
	bru.mutation.ResetPlateAppearances()
	bru.mutation.SetPlateAppearances(i)
	return bru
}

// SetNillablePlateAppearances sets the "plate_appearances" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillablePlateAppearances(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetPlateAppearances(*i)
	}
	return bru
}

// AddPlateAppearances adds i to the "plate_appearances" field.
func (bru *BatterRecordUpdate) AddPlateAppearances(i int) *BatterRecordUpdate {
	bru.mutation.AddPlateAppearances(i)
	return bru
}

// SetAtBats sets the "at_bats" field.
func (bru *BatterRecordUpdate) SetAtBats(i int) *BatterRecordUpdate {
	bru.mutation.ResetAtBats()
	bru.mutation.SetAtBats(i)
	return bru
}

// SetNillableAtBats sets the "at_bats" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableAtBats(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetAtBats(*i)
	}
	return bru
}

// AddAtBats adds i to the "at_bats" field.
func (bru *BatterRecordUpdate) AddAtBats(i int) *BatterRecordUpdate {
	bru.mutation.AddAtBats(i)
	return bru
}

// SetRuns sets the "runs" field.
func (bru *BatterRecordUpdate) SetRuns(i int) *BatterRecordUpdate {
	bru.mutation.ResetRuns()
	bru.mutation.SetRuns(i)
	return bru
}

// SetNillableRuns sets the "runs" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableRuns(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetRuns(*i)
	}
	return bru
}

// AddRuns adds i to the "runs" field.
func (bru *BatterRecordUpdate) AddRuns(i int) *BatterRecordUpdate {
	bru.mutation.AddRuns(i)
	return bru
}

// SetHits sets the "hits" field.
func (bru *BatterRecordUpdate) SetHits(i int) *BatterRecordUpdate {
	bru.mutation.ResetHits()
	bru.mutation.SetHits(i)
	return bru
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableHits(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetHits(*i)
	}
	return bru
}

// AddHits adds i to the "hits" field.
func (bru *BatterRecordUpdate) AddHits(i int) *BatterRecordUpdate {
	bru.mutation.AddHits(i)
	return bru
}

// SetSingles sets the "singles" field.
func (bru *BatterRecordUpdate) SetSingles(i int) *BatterRecordUpdate {
	bru.mutation.ResetSingles()
	bru.mutation.SetSingles(i)
	return bru
}

// SetNillableSingles sets the "singles" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableSingles(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetSingles(*i)
	}
	return bru
}

// AddSingles adds i to the "singles" field.
func (bru *BatterRecordUpdate) AddSingles(i int) *BatterRecordUpdate {
	bru.mutation.AddSingles(i)
	return bru
}

// SetDoubles sets the "doubles" field.
func (bru *BatterRecordUpdate) SetDoubles(i int) *BatterRecordUpdate {
	bru.mutation.ResetDoubles()
	bru.mutation.SetDoubles(i)
	return bru
}

// SetNillableDoubles sets the "doubles" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableDoubles(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetDoubles(*i)
	}
	return bru
}

// AddDoubles adds i to the "doubles" field.
func (bru *BatterRecordUpdate) AddDoubles(i int) *BatterRecordUpdate {
	bru.mutation.AddDoubles(i)
	return bru
}

// SetTriples sets the "triples" field.
func (bru *BatterRecordUpdate) SetTriples(i int) *BatterRecordUpdate {
	bru.mutation.ResetTriples()
	bru.mutation.SetTriples(i)
	return bru
}

// SetNillableTriples sets the "triples" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableTriples(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetTriples(*i)
	}
	return bru
}

// AddTriples adds i to the "triples" field.
func (bru *BatterRecordUpdate) AddTriples(i int) *BatterRecordUpdate {
	bru.mutation.AddTriples(i)
	return bru
}

// SetHomeruns sets the "homeruns" field.
func (bru *BatterRecordUpdate) SetHomeruns(i int) *BatterRecordUpdate {
	bru.mutation.ResetHomeruns()
	bru.mutation.SetHomeruns(i)
	return bru
}

// SetNillableHomeruns sets the "homeruns" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableHomeruns(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetHomeruns(*i)
	}
	return bru
}

// AddHomeruns adds i to the "homeruns" field.
func (bru *BatterRecordUpdate) AddHomeruns(i int) *BatterRecordUpdate {
	bru.mutation.AddHomeruns(i)
	return bru
}

// SetWalks sets the "walks" field.
func (bru *BatterRecordUpdate) SetWalks(i int) *BatterRecordUpdate {
	bru.mutation.ResetWalks()
	bru.mutation.SetWalks(i)
	return bru
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableWalks(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetWalks(*i)
	}
	return bru
}

// AddWalks adds i to the "walks" field.
func (bru *BatterRecordUpdate) AddWalks(i int) *BatterRecordUpdate {
	bru.mutation.AddWalks(i)
	return bru
}

// SetRbis sets the "rbis" field.
func (bru *BatterRecordUpdate) SetRbis(i int) *BatterRecordUpdate {
	bru.mutation.ResetRbis()
	bru.mutation.SetRbis(i)
	return bru
}

// SetNillableRbis sets the "rbis" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableRbis(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetRbis(*i)
	}
	return bru
}

// AddRbis adds i to the "rbis" field.
func (bru *BatterRecordUpdate) AddRbis(i int) *BatterRecordUpdate {
	bru.mutation.AddRbis(i)
	return bru
}

// SetSteals sets the "steals" field.
func (bru *BatterRecordUpdate) SetSteals(i int) *BatterRecordUpdate {
	bru.mutation.ResetSteals()
	bru.mutation.SetSteals(i)
	return bru
}

// SetNillableSteals sets the "steals" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableSteals(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetSteals(*i)
	}
	return bru
}

// AddSteals adds i to the "steals" field.
func (bru *BatterRecordUpdate) AddSteals(i int) *BatterRecordUpdate {
	bru.mutation.AddSteals(i)
	return bru
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (bru *BatterRecordUpdate) SetHitByPitch(i int) *BatterRecordUpdate {
	bru.mutation.ResetHitByPitch()
	bru.mutation.SetHitByPitch(i)
	return bru
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableHitByPitch(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetHitByPitch(*i)
	}
	return bru
}

// AddHitByPitch adds i to the "hit_by_pitch" field.
func (bru *BatterRecordUpdate) AddHitByPitch(i int) *BatterRecordUpdate {
	bru.mutation.AddHitByPitch(i)
	return bru
}

// SetStrikeouts sets the "strikeouts" field.
func (bru *BatterRecordUpdate) SetStrikeouts(i int) *BatterRecordUpdate {
	bru.mutation.ResetStrikeouts()
	bru.mutation.SetStrikeouts(i)
	return bru
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableStrikeouts(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetStrikeouts(*i)
	}
	return bru
}

// AddStrikeouts adds i to the "strikeouts" field.
func (bru *BatterRecordUpdate) AddStrikeouts(i int) *BatterRecordUpdate {
	bru.mutation.AddStrikeouts(i)
	return bru
}

// SetDoublePlays sets the "double_plays" field.
func (bru *BatterRecordUpdate) SetDoublePlays(i int) *BatterRecordUpdate {
	bru.mutation.ResetDoublePlays()
	bru.mutation.SetDoublePlays(i)
	return bru
}

// SetNillableDoublePlays sets the "double_plays" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableDoublePlays(i *int) *BatterRecordUpdate {
	if i != nil {
		bru.SetDoublePlays(*i)
	}
	return bru
}

// AddDoublePlays adds i to the "double_plays" field.
func (bru *BatterRecordUpdate) AddDoublePlays(i int) *BatterRecordUpdate {
	bru.mutation.AddDoublePlays(i)
	return bru
}

// SetSlg sets the "slg" field.
func (bru *BatterRecordUpdate) SetSlg(f float64) *BatterRecordUpdate {
	bru.mutation.ResetSlg()
	bru.mutation.SetSlg(f)
	return bru
}

// SetNillableSlg sets the "slg" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableSlg(f *float64) *BatterRecordUpdate {
	if f != nil {
		bru.SetSlg(*f)
	}
	return bru
}

// AddSlg adds f to the "slg" field.
func (bru *BatterRecordUpdate) AddSlg(f float64) *BatterRecordUpdate {
	bru.mutation.AddSlg(f)
	return bru
}

// ClearSlg clears the value of the "slg" field.
func (bru *BatterRecordUpdate) ClearSlg() *BatterRecordUpdate {
	bru.mutation.ClearSlg()
	return bru
}

// SetObp sets the "obp" field.
func (bru *BatterRecordUpdate) SetObp(f float64) *BatterRecordUpdate {
	bru.mutation.ResetObp()
	bru.mutation.SetObp(f)
	return bru
}

// SetNillableObp sets the "obp" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableObp(f *float64) *BatterRecordUpdate {
	if f != nil {
		bru.SetObp(*f)
	}
	return bru
}

// AddObp adds f to the "obp" field.
func (bru *BatterRecordUpdate) AddObp(f float64) *BatterRecordUpdate {
	bru.mutation.AddObp(f)
	return bru
}

// ClearObp clears the value of the "obp" field.
func (bru *BatterRecordUpdate) ClearObp() *BatterRecordUpdate {
	bru.mutation.ClearObp()
	return bru
}

// SetOps sets the "ops" field.
func (bru *BatterRecordUpdate) SetOps(f float64) *BatterRecordUpdate {
	bru.mutation.ResetOps()
	bru.mutation.SetOps(f)
	return bru
}

// SetNillableOps sets the "ops" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableOps(f *float64) *BatterRecordUpdate {
	if f != nil {
		bru.SetOps(*f)
	}
	return bru
}

// AddOps adds f to the "ops" field.
func (bru *BatterRecordUpdate) AddOps(f float64) *BatterRecordUpdate {
	bru.mutation.AddOps(f)
	return bru
}

// ClearOps clears the value of the "ops" field.
func (bru *BatterRecordUpdate) ClearOps() *BatterRecordUpdate {
	bru.mutation.ClearOps()
	return bru
}

// SetBbK sets the "bb_k" field.
func (bru *BatterRecordUpdate) SetBbK(f float64) *BatterRecordUpdate {
	bru.mutation.ResetBbK()
	bru.mutation.SetBbK(f)
	return bru
}

// SetNillableBbK sets the "bb_k" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableBbK(f *float64) *BatterRecordUpdate {
	if f != nil {
		bru.SetBbK(*f)
	}
	return bru
}

// AddBbK adds f to the "bb_k" field.
func (bru *BatterRecordUpdate) AddBbK(f float64) *BatterRecordUpdate {
	bru.mutation.AddBbK(f)
	return bru
}

// ClearBbK clears the value of the "bb_k" field.
func (bru *BatterRecordUpdate) ClearBbK() *BatterRecordUpdate {
	bru.mutation.ClearBbK()
	return bru
}

// SetCreatedAt sets the "created_at" field.
func (bru *BatterRecordUpdate) SetCreatedAt(t time.Time) *BatterRecordUpdate {
	bru.mutation.SetCreatedAt(t)
	return bru
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bru *BatterRecordUpdate) SetNillableCreatedAt(t *time.Time) *BatterRecordUpdate {
	if t != nil {
		bru.SetCreatedAt(*t)
	}
	return bru
}

// SetUpdatedAt sets the "updated_at" field.
func (bru *BatterRecordUpdate) SetUpdatedAt(t time.Time) *BatterRecordUpdate {
	bru.mutation.SetUpdatedAt(t)
	return bru
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bru *BatterRecordUpdate) SetUserID(id int) *BatterRecordUpdate {
	bru.mutation.SetUserID(id)
	return bru
}

// SetUser sets the "user" edge to the User entity.
func (bru *BatterRecordUpdate) SetUser(u *User) *BatterRecordUpdate {
	return bru.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (bru *BatterRecordUpdate) SetGameID(id int) *BatterRecordUpdate {
	bru.mutation.SetGameID(id)
	return bru
}

// SetGame sets the "game" edge to the Game entity.
func (bru *BatterRecordUpdate) SetGame(g *Game) *BatterRecordUpdate {
	return bru.SetGameID(g.ID)
}

// Mutation returns the BatterRecordMutation object of the builder.
func (bru *BatterRecordUpdate) Mutation() *BatterRecordMutation {
	return bru.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bru *BatterRecordUpdate) ClearUser() *BatterRecordUpdate {
	bru.mutation.ClearUser()
	return bru
}

// ClearGame clears the "game" edge to the Game entity.
func (bru *BatterRecordUpdate) ClearGame() *BatterRecordUpdate {
	bru.mutation.ClearGame()
	return bru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (bru *BatterRecordUpdate) Save(ctx context.Context) (int, error) {
	bru.defaults()
	return withHooks(ctx, bru.sqlSave, bru.mutation, bru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bru *BatterRecordUpdate) SaveX(ctx context.Context) int {
	affected, err := bru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (bru *BatterRecordUpdate) Exec(ctx context.Context) error {
	_, err := bru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bru *BatterRecordUpdate) ExecX(ctx context.Context) {
	if err := bru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bru *BatterRecordUpdate) defaults() {
	if _, ok := bru.mutation.UpdatedAt(); !ok {
		v := batterrecord.UpdateDefaultUpdatedAt()
		bru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bru *BatterRecordUpdate) check() error {
	if bru.mutation.UserCleared() && len(bru.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BatterRecord.user"`)
	}
	if bru.mutation.GameCleared() && len(bru.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BatterRecord.game"`)
	}
	return nil
}

func (bru *BatterRecordUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := bru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(batterrecord.Table, batterrecord.Columns, sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt))
	if ps := bru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bru.mutation.Games(); ok {
		_spec.SetField(batterrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedGames(); ok {
		_spec.AddField(batterrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Avg(); ok {
		_spec.SetField(batterrecord.FieldAvg, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedAvg(); ok {
		_spec.AddField(batterrecord.FieldAvg, field.TypeFloat64, value)
	}
	if bru.mutation.AvgCleared() {
		_spec.ClearField(batterrecord.FieldAvg, field.TypeFloat64)
	}
	if value, ok := bru.mutation.PlateAppearances(); ok {
		_spec.SetField(batterrecord.FieldPlateAppearances, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedPlateAppearances(); ok {
		_spec.AddField(batterrecord.FieldPlateAppearances, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AtBats(); ok {
		_spec.SetField(batterrecord.FieldAtBats, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedAtBats(); ok {
		_spec.AddField(batterrecord.FieldAtBats, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Runs(); ok {
		_spec.SetField(batterrecord.FieldRuns, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedRuns(); ok {
		_spec.AddField(batterrecord.FieldRuns, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Hits(); ok {
		_spec.SetField(batterrecord.FieldHits, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedHits(); ok {
		_spec.AddField(batterrecord.FieldHits, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Singles(); ok {
		_spec.SetField(batterrecord.FieldSingles, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedSingles(); ok {
		_spec.AddField(batterrecord.FieldSingles, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Doubles(); ok {
		_spec.SetField(batterrecord.FieldDoubles, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedDoubles(); ok {
		_spec.AddField(batterrecord.FieldDoubles, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Triples(); ok {
		_spec.SetField(batterrecord.FieldTriples, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedTriples(); ok {
		_spec.AddField(batterrecord.FieldTriples, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Homeruns(); ok {
		_spec.SetField(batterrecord.FieldHomeruns, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedHomeruns(); ok {
		_spec.AddField(batterrecord.FieldHomeruns, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Walks(); ok {
		_spec.SetField(batterrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedWalks(); ok {
		_spec.AddField(batterrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Rbis(); ok {
		_spec.SetField(batterrecord.FieldRbis, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedRbis(); ok {
		_spec.AddField(batterrecord.FieldRbis, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Steals(); ok {
		_spec.SetField(batterrecord.FieldSteals, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedSteals(); ok {
		_spec.AddField(batterrecord.FieldSteals, field.TypeInt, value)
	}
	if value, ok := bru.mutation.HitByPitch(); ok {
		_spec.SetField(batterrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedHitByPitch(); ok {
		_spec.AddField(batterrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Strikeouts(); ok {
		_spec.SetField(batterrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedStrikeouts(); ok {
		_spec.AddField(batterrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := bru.mutation.DoublePlays(); ok {
		_spec.SetField(batterrecord.FieldDoublePlays, field.TypeInt, value)
	}
	if value, ok := bru.mutation.AddedDoublePlays(); ok {
		_spec.AddField(batterrecord.FieldDoublePlays, field.TypeInt, value)
	}
	if value, ok := bru.mutation.Slg(); ok {
		_spec.SetField(batterrecord.FieldSlg, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedSlg(); ok {
		_spec.AddField(batterrecord.FieldSlg, field.TypeFloat64, value)
	}
	if bru.mutation.SlgCleared() {
		_spec.ClearField(batterrecord.FieldSlg, field.TypeFloat64)
	}
	if value, ok := bru.mutation.Obp(); ok {
		_spec.SetField(batterrecord.FieldObp, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedObp(); ok {
		_spec.AddField(batterrecord.FieldObp, field.TypeFloat64, value)
	}
	if bru.mutation.ObpCleared() {
		_spec.ClearField(batterrecord.FieldObp, field.TypeFloat64)
	}
	if value, ok := bru.mutation.Ops(); ok {
		_spec.SetField(batterrecord.FieldOps, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedOps(); ok {
		_spec.AddField(batterrecord.FieldOps, field.TypeFloat64, value)
	}
	if bru.mutation.OpsCleared() {
		_spec.ClearField(batterrecord.FieldOps, field.TypeFloat64)
	}
	if value, ok := bru.mutation.BbK(); ok {
		_spec.SetField(batterrecord.FieldBbK, field.TypeFloat64, value)
	}
	if value, ok := bru.mutation.AddedBbK(); ok {
		_spec.AddField(batterrecord.FieldBbK, field.TypeFloat64, value)
	}
	if bru.mutation.BbKCleared() {
		_spec.ClearField(batterrecord.FieldBbK, field.TypeFloat64)
	}
	if value, ok := bru.mutation.CreatedAt(); ok {
		_spec.SetField(batterrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bru.mutation.UpdatedAt(); ok {
		_spec.SetField(batterrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if bru.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.UserTable,
			Columns: []string{batterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.UserTable,
			Columns: []string{batterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bru.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.GameTable,
			Columns: []string{batterrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bru.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.GameTable,
			Columns: []string{batterrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, bru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	bru.mutation.done = true
	return n, nil
}

// BatterRecordUpdateOne is the builder for updating a single BatterRecord entity.
type BatterRecordUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *BatterRecordMutation
}

// SetGames sets the "games" field.
func (bruo *BatterRecordUpdateOne) SetGames(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetGames()
	bruo.mutation.SetGames(i)
	return bruo
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableGames(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetGames(*i)
	}
	return bruo
}

// AddGames adds i to the "games" field.
func (bruo *BatterRecordUpdateOne) AddGames(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddGames(i)
	return bruo
}

// SetAvg sets the "avg" field.
func (bruo *BatterRecordUpdateOne) SetAvg(f float64) *BatterRecordUpdateOne {
	bruo.mutation.ResetAvg()
	bruo.mutation.SetAvg(f)
	return bruo
}

// SetNillableAvg sets the "avg" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableAvg(f *float64) *BatterRecordUpdateOne {
	if f != nil {
		bruo.SetAvg(*f)
	}
	return bruo
}

// AddAvg adds f to the "avg" field.
func (bruo *BatterRecordUpdateOne) AddAvg(f float64) *BatterRecordUpdateOne {
	bruo.mutation.AddAvg(f)
	return bruo
}

// ClearAvg clears the value of the "avg" field.
func (bruo *BatterRecordUpdateOne) ClearAvg() *BatterRecordUpdateOne {
	bruo.mutation.ClearAvg()
	return bruo
}

// SetPlateAppearances sets the "plate_appearances" field.
func (bruo *BatterRecordUpdateOne) SetPlateAppearances(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetPlateAppearances()
	bruo.mutation.SetPlateAppearances(i)
	return bruo
}

// SetNillablePlateAppearances sets the "plate_appearances" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillablePlateAppearances(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetPlateAppearances(*i)
	}
	return bruo
}

// AddPlateAppearances adds i to the "plate_appearances" field.
func (bruo *BatterRecordUpdateOne) AddPlateAppearances(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddPlateAppearances(i)
	return bruo
}

// SetAtBats sets the "at_bats" field.
func (bruo *BatterRecordUpdateOne) SetAtBats(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetAtBats()
	bruo.mutation.SetAtBats(i)
	return bruo
}

// SetNillableAtBats sets the "at_bats" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableAtBats(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetAtBats(*i)
	}
	return bruo
}

// AddAtBats adds i to the "at_bats" field.
func (bruo *BatterRecordUpdateOne) AddAtBats(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddAtBats(i)
	return bruo
}

// SetRuns sets the "runs" field.
func (bruo *BatterRecordUpdateOne) SetRuns(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetRuns()
	bruo.mutation.SetRuns(i)
	return bruo
}

// SetNillableRuns sets the "runs" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableRuns(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetRuns(*i)
	}
	return bruo
}

// AddRuns adds i to the "runs" field.
func (bruo *BatterRecordUpdateOne) AddRuns(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddRuns(i)
	return bruo
}

// SetHits sets the "hits" field.
func (bruo *BatterRecordUpdateOne) SetHits(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetHits()
	bruo.mutation.SetHits(i)
	return bruo
}

// SetNillableHits sets the "hits" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableHits(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetHits(*i)
	}
	return bruo
}

// AddHits adds i to the "hits" field.
func (bruo *BatterRecordUpdateOne) AddHits(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddHits(i)
	return bruo
}

// SetSingles sets the "singles" field.
func (bruo *BatterRecordUpdateOne) SetSingles(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetSingles()
	bruo.mutation.SetSingles(i)
	return bruo
}

// SetNillableSingles sets the "singles" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableSingles(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetSingles(*i)
	}
	return bruo
}

// AddSingles adds i to the "singles" field.
func (bruo *BatterRecordUpdateOne) AddSingles(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddSingles(i)
	return bruo
}

// SetDoubles sets the "doubles" field.
func (bruo *BatterRecordUpdateOne) SetDoubles(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetDoubles()
	bruo.mutation.SetDoubles(i)
	return bruo
}

// SetNillableDoubles sets the "doubles" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableDoubles(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetDoubles(*i)
	}
	return bruo
}

// AddDoubles adds i to the "doubles" field.
func (bruo *BatterRecordUpdateOne) AddDoubles(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddDoubles(i)
	return bruo
}

// SetTriples sets the "triples" field.
func (bruo *BatterRecordUpdateOne) SetTriples(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetTriples()
	bruo.mutation.SetTriples(i)
	return bruo
}

// SetNillableTriples sets the "triples" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableTriples(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetTriples(*i)
	}
	return bruo
}

// AddTriples adds i to the "triples" field.
func (bruo *BatterRecordUpdateOne) AddTriples(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddTriples(i)
	return bruo
}

// SetHomeruns sets the "homeruns" field.
func (bruo *BatterRecordUpdateOne) SetHomeruns(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetHomeruns()
	bruo.mutation.SetHomeruns(i)
	return bruo
}

// SetNillableHomeruns sets the "homeruns" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableHomeruns(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetHomeruns(*i)
	}
	return bruo
}

// AddHomeruns adds i to the "homeruns" field.
func (bruo *BatterRecordUpdateOne) AddHomeruns(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddHomeruns(i)
	return bruo
}

// SetWalks sets the "walks" field.
func (bruo *BatterRecordUpdateOne) SetWalks(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetWalks()
	bruo.mutation.SetWalks(i)
	return bruo
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableWalks(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetWalks(*i)
	}
	return bruo
}

// AddWalks adds i to the "walks" field.
func (bruo *BatterRecordUpdateOne) AddWalks(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddWalks(i)
	return bruo
}

// SetRbis sets the "rbis" field.
func (bruo *BatterRecordUpdateOne) SetRbis(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetRbis()
	bruo.mutation.SetRbis(i)
	return bruo
}

// SetNillableRbis sets the "rbis" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableRbis(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetRbis(*i)
	}
	return bruo
}

// AddRbis adds i to the "rbis" field.
func (bruo *BatterRecordUpdateOne) AddRbis(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddRbis(i)
	return bruo
}

// SetSteals sets the "steals" field.
func (bruo *BatterRecordUpdateOne) SetSteals(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetSteals()
	bruo.mutation.SetSteals(i)
	return bruo
}

// SetNillableSteals sets the "steals" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableSteals(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetSteals(*i)
	}
	return bruo
}

// AddSteals adds i to the "steals" field.
func (bruo *BatterRecordUpdateOne) AddSteals(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddSteals(i)
	return bruo
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (bruo *BatterRecordUpdateOne) SetHitByPitch(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetHitByPitch()
	bruo.mutation.SetHitByPitch(i)
	return bruo
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableHitByPitch(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetHitByPitch(*i)
	}
	return bruo
}

// AddHitByPitch adds i to the "hit_by_pitch" field.
func (bruo *BatterRecordUpdateOne) AddHitByPitch(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddHitByPitch(i)
	return bruo
}

// SetStrikeouts sets the "strikeouts" field.
func (bruo *BatterRecordUpdateOne) SetStrikeouts(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetStrikeouts()
	bruo.mutation.SetStrikeouts(i)
	return bruo
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableStrikeouts(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetStrikeouts(*i)
	}
	return bruo
}

// AddStrikeouts adds i to the "strikeouts" field.
func (bruo *BatterRecordUpdateOne) AddStrikeouts(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddStrikeouts(i)
	return bruo
}

// SetDoublePlays sets the "double_plays" field.
func (bruo *BatterRecordUpdateOne) SetDoublePlays(i int) *BatterRecordUpdateOne {
	bruo.mutation.ResetDoublePlays()
	bruo.mutation.SetDoublePlays(i)
	return bruo
}

// SetNillableDoublePlays sets the "double_plays" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableDoublePlays(i *int) *BatterRecordUpdateOne {
	if i != nil {
		bruo.SetDoublePlays(*i)
	}
	return bruo
}

// AddDoublePlays adds i to the "double_plays" field.
func (bruo *BatterRecordUpdateOne) AddDoublePlays(i int) *BatterRecordUpdateOne {
	bruo.mutation.AddDoublePlays(i)
	return bruo
}

// SetSlg sets the "slg" field.
func (bruo *BatterRecordUpdateOne) SetSlg(f float64) *BatterRecordUpdateOne {
	bruo.mutation.ResetSlg()
	bruo.mutation.SetSlg(f)
	return bruo
}

// SetNillableSlg sets the "slg" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableSlg(f *float64) *BatterRecordUpdateOne {
	if f != nil {
		bruo.SetSlg(*f)
	}
	return bruo
}

// AddSlg adds f to the "slg" field.
func (bruo *BatterRecordUpdateOne) AddSlg(f float64) *BatterRecordUpdateOne {
	bruo.mutation.AddSlg(f)
	return bruo
}

// ClearSlg clears the value of the "slg" field.
func (bruo *BatterRecordUpdateOne) ClearSlg() *BatterRecordUpdateOne {
	bruo.mutation.ClearSlg()
	return bruo
}

// SetObp sets the "obp" field.
func (bruo *BatterRecordUpdateOne) SetObp(f float64) *BatterRecordUpdateOne {
	bruo.mutation.ResetObp()
	bruo.mutation.SetObp(f)
	return bruo
}

// SetNillableObp sets the "obp" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableObp(f *float64) *BatterRecordUpdateOne {
	if f != nil {
		bruo.SetObp(*f)
	}
	return bruo
}

// AddObp adds f to the "obp" field.
func (bruo *BatterRecordUpdateOne) AddObp(f float64) *BatterRecordUpdateOne {
	bruo.mutation.AddObp(f)
	return bruo
}

// ClearObp clears the value of the "obp" field.
func (bruo *BatterRecordUpdateOne) ClearObp() *BatterRecordUpdateOne {
	bruo.mutation.ClearObp()
	return bruo
}

// SetOps sets the "ops" field.
func (bruo *BatterRecordUpdateOne) SetOps(f float64) *BatterRecordUpdateOne {
	bruo.mutation.ResetOps()
	bruo.mutation.SetOps(f)
	return bruo
}

// SetNillableOps sets the "ops" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableOps(f *float64) *BatterRecordUpdateOne {
	if f != nil {
		bruo.SetOps(*f)
	}
	return bruo
}

// AddOps adds f to the "ops" field.
func (bruo *BatterRecordUpdateOne) AddOps(f float64) *BatterRecordUpdateOne {
	bruo.mutation.AddOps(f)
	return bruo
}

// ClearOps clears the value of the "ops" field.
func (bruo *BatterRecordUpdateOne) ClearOps() *BatterRecordUpdateOne {
	bruo.mutation.ClearOps()
	return bruo
}

// SetBbK sets the "bb_k" field.
func (bruo *BatterRecordUpdateOne) SetBbK(f float64) *BatterRecordUpdateOne {
	bruo.mutation.ResetBbK()
	bruo.mutation.SetBbK(f)
	return bruo
}

// SetNillableBbK sets the "bb_k" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableBbK(f *float64) *BatterRecordUpdateOne {
	if f != nil {
		bruo.SetBbK(*f)
	}
	return bruo
}

// AddBbK adds f to the "bb_k" field.
func (bruo *BatterRecordUpdateOne) AddBbK(f float64) *BatterRecordUpdateOne {
	bruo.mutation.AddBbK(f)
	return bruo
}

// ClearBbK clears the value of the "bb_k" field.
func (bruo *BatterRecordUpdateOne) ClearBbK() *BatterRecordUpdateOne {
	bruo.mutation.ClearBbK()
	return bruo
}

// SetCreatedAt sets the "created_at" field.
func (bruo *BatterRecordUpdateOne) SetCreatedAt(t time.Time) *BatterRecordUpdateOne {
	bruo.mutation.SetCreatedAt(t)
	return bruo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (bruo *BatterRecordUpdateOne) SetNillableCreatedAt(t *time.Time) *BatterRecordUpdateOne {
	if t != nil {
		bruo.SetCreatedAt(*t)
	}
	return bruo
}

// SetUpdatedAt sets the "updated_at" field.
func (bruo *BatterRecordUpdateOne) SetUpdatedAt(t time.Time) *BatterRecordUpdateOne {
	bruo.mutation.SetUpdatedAt(t)
	return bruo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (bruo *BatterRecordUpdateOne) SetUserID(id int) *BatterRecordUpdateOne {
	bruo.mutation.SetUserID(id)
	return bruo
}

// SetUser sets the "user" edge to the User entity.
func (bruo *BatterRecordUpdateOne) SetUser(u *User) *BatterRecordUpdateOne {
	return bruo.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (bruo *BatterRecordUpdateOne) SetGameID(id int) *BatterRecordUpdateOne {
	bruo.mutation.SetGameID(id)
	return bruo
}

// SetGame sets the "game" edge to the Game entity.
func (bruo *BatterRecordUpdateOne) SetGame(g *Game) *BatterRecordUpdateOne {
	return bruo.SetGameID(g.ID)
}

// Mutation returns the BatterRecordMutation object of the builder.
func (bruo *BatterRecordUpdateOne) Mutation() *BatterRecordMutation {
	return bruo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (bruo *BatterRecordUpdateOne) ClearUser() *BatterRecordUpdateOne {
	bruo.mutation.ClearUser()
	return bruo
}

// ClearGame clears the "game" edge to the Game entity.
func (bruo *BatterRecordUpdateOne) ClearGame() *BatterRecordUpdateOne {
	bruo.mutation.ClearGame()
	return bruo
}

// Where appends a list predicates to the BatterRecordUpdate builder.
func (bruo *BatterRecordUpdateOne) Where(ps ...predicate.BatterRecord) *BatterRecordUpdateOne {
	bruo.mutation.Where(ps...)
	return bruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (bruo *BatterRecordUpdateOne) Select(field string, fields ...string) *BatterRecordUpdateOne {
	bruo.fields = append([]string{field}, fields...)
	return bruo
}

// Save executes the query and returns the updated BatterRecord entity.
func (bruo *BatterRecordUpdateOne) Save(ctx context.Context) (*BatterRecord, error) {
	bruo.defaults()
	return withHooks(ctx, bruo.sqlSave, bruo.mutation, bruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (bruo *BatterRecordUpdateOne) SaveX(ctx context.Context) *BatterRecord {
	node, err := bruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (bruo *BatterRecordUpdateOne) Exec(ctx context.Context) error {
	_, err := bruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bruo *BatterRecordUpdateOne) ExecX(ctx context.Context) {
	if err := bruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bruo *BatterRecordUpdateOne) defaults() {
	if _, ok := bruo.mutation.UpdatedAt(); !ok {
		v := batterrecord.UpdateDefaultUpdatedAt()
		bruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bruo *BatterRecordUpdateOne) check() error {
	if bruo.mutation.UserCleared() && len(bruo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BatterRecord.user"`)
	}
	if bruo.mutation.GameCleared() && len(bruo.mutation.GameIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "BatterRecord.game"`)
	}
	return nil
}

func (bruo *BatterRecordUpdateOne) sqlSave(ctx context.Context) (_node *BatterRecord, err error) {
	if err := bruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(batterrecord.Table, batterrecord.Columns, sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt))
	id, ok := bruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "BatterRecord.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := bruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, batterrecord.FieldID)
		for _, f := range fields {
			if !batterrecord.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != batterrecord.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := bruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := bruo.mutation.Games(); ok {
		_spec.SetField(batterrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedGames(); ok {
		_spec.AddField(batterrecord.FieldGames, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Avg(); ok {
		_spec.SetField(batterrecord.FieldAvg, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedAvg(); ok {
		_spec.AddField(batterrecord.FieldAvg, field.TypeFloat64, value)
	}
	if bruo.mutation.AvgCleared() {
		_spec.ClearField(batterrecord.FieldAvg, field.TypeFloat64)
	}
	if value, ok := bruo.mutation.PlateAppearances(); ok {
		_spec.SetField(batterrecord.FieldPlateAppearances, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedPlateAppearances(); ok {
		_spec.AddField(batterrecord.FieldPlateAppearances, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AtBats(); ok {
		_spec.SetField(batterrecord.FieldAtBats, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedAtBats(); ok {
		_spec.AddField(batterrecord.FieldAtBats, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Runs(); ok {
		_spec.SetField(batterrecord.FieldRuns, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedRuns(); ok {
		_spec.AddField(batterrecord.FieldRuns, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Hits(); ok {
		_spec.SetField(batterrecord.FieldHits, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedHits(); ok {
		_spec.AddField(batterrecord.FieldHits, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Singles(); ok {
		_spec.SetField(batterrecord.FieldSingles, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedSingles(); ok {
		_spec.AddField(batterrecord.FieldSingles, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Doubles(); ok {
		_spec.SetField(batterrecord.FieldDoubles, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedDoubles(); ok {
		_spec.AddField(batterrecord.FieldDoubles, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Triples(); ok {
		_spec.SetField(batterrecord.FieldTriples, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedTriples(); ok {
		_spec.AddField(batterrecord.FieldTriples, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Homeruns(); ok {
		_spec.SetField(batterrecord.FieldHomeruns, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedHomeruns(); ok {
		_spec.AddField(batterrecord.FieldHomeruns, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Walks(); ok {
		_spec.SetField(batterrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedWalks(); ok {
		_spec.AddField(batterrecord.FieldWalks, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Rbis(); ok {
		_spec.SetField(batterrecord.FieldRbis, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedRbis(); ok {
		_spec.AddField(batterrecord.FieldRbis, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Steals(); ok {
		_spec.SetField(batterrecord.FieldSteals, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedSteals(); ok {
		_spec.AddField(batterrecord.FieldSteals, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.HitByPitch(); ok {
		_spec.SetField(batterrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedHitByPitch(); ok {
		_spec.AddField(batterrecord.FieldHitByPitch, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Strikeouts(); ok {
		_spec.SetField(batterrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedStrikeouts(); ok {
		_spec.AddField(batterrecord.FieldStrikeouts, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.DoublePlays(); ok {
		_spec.SetField(batterrecord.FieldDoublePlays, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.AddedDoublePlays(); ok {
		_spec.AddField(batterrecord.FieldDoublePlays, field.TypeInt, value)
	}
	if value, ok := bruo.mutation.Slg(); ok {
		_spec.SetField(batterrecord.FieldSlg, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedSlg(); ok {
		_spec.AddField(batterrecord.FieldSlg, field.TypeFloat64, value)
	}
	if bruo.mutation.SlgCleared() {
		_spec.ClearField(batterrecord.FieldSlg, field.TypeFloat64)
	}
	if value, ok := bruo.mutation.Obp(); ok {
		_spec.SetField(batterrecord.FieldObp, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedObp(); ok {
		_spec.AddField(batterrecord.FieldObp, field.TypeFloat64, value)
	}
	if bruo.mutation.ObpCleared() {
		_spec.ClearField(batterrecord.FieldObp, field.TypeFloat64)
	}
	if value, ok := bruo.mutation.Ops(); ok {
		_spec.SetField(batterrecord.FieldOps, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedOps(); ok {
		_spec.AddField(batterrecord.FieldOps, field.TypeFloat64, value)
	}
	if bruo.mutation.OpsCleared() {
		_spec.ClearField(batterrecord.FieldOps, field.TypeFloat64)
	}
	if value, ok := bruo.mutation.BbK(); ok {
		_spec.SetField(batterrecord.FieldBbK, field.TypeFloat64, value)
	}
	if value, ok := bruo.mutation.AddedBbK(); ok {
		_spec.AddField(batterrecord.FieldBbK, field.TypeFloat64, value)
	}
	if bruo.mutation.BbKCleared() {
		_spec.ClearField(batterrecord.FieldBbK, field.TypeFloat64)
	}
	if value, ok := bruo.mutation.CreatedAt(); ok {
		_spec.SetField(batterrecord.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := bruo.mutation.UpdatedAt(); ok {
		_spec.SetField(batterrecord.FieldUpdatedAt, field.TypeTime, value)
	}
	if bruo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.UserTable,
			Columns: []string{batterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.UserTable,
			Columns: []string{batterrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if bruo.mutation.GameCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.GameTable,
			Columns: []string{batterrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := bruo.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   batterrecord.GameTable,
			Columns: []string{batterrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &BatterRecord{config: bruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, bruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{batterrecord.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	bruo.mutation.done = true
	return _node, nil
}
