// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldTeam holds the string denoting the team field in the database.
	FieldTeam = "team"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeGames holds the string denoting the games edge name in mutations.
	EdgeGames = "games"
	// EdgeBattingRecords holds the string denoting the batting_records edge name in mutations.
	EdgeBattingRecords = "batting_records"
	// EdgePitchingRecords holds the string denoting the pitching_records edge name in mutations.
	EdgePitchingRecords = "pitching_records"
	// Table holds the table name of the user in the database.
	Table = "users"
	// GamesTable is the table that holds the games relation/edge.
	GamesTable = "games"
	// GamesInverseTable is the table name for the Game entity.
	// It exists in this package in order to avoid circular dependency with the "game" package.
	GamesInverseTable = "games"
	// GamesColumn is the table column denoting the games relation/edge.
	GamesColumn = "user_games"
	// BattingRecordsTable is the table that holds the batting_records relation/edge.
	BattingRecordsTable = "batter_records"
	// BattingRecordsInverseTable is the table name for the BatterRecord entity.
	// It exists in this package in order to avoid circular dependency with the "batterrecord" package.
	BattingRecordsInverseTable = "batter_records"
	// BattingRecordsColumn is the table column denoting the batting_records relation/edge.
	BattingRecordsColumn = "user_batting_records"
	// PitchingRecordsTable is the table that holds the pitching_records relation/edge.
	PitchingRecordsTable = "pitcher_records"
	// PitchingRecordsInverseTable is the table name for the PitcherRecord entity.
	// It exists in this package in order to avoid circular dependency with the "pitcherrecord" package.
	PitchingRecordsInverseTable = "pitcher_records"
	// PitchingRecordsColumn is the table column denoting the pitching_records relation/edge.
	PitchingRecordsColumn = "user_pitching_records"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldPassword,
	FieldName,
	FieldTeam,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// EmailValidator is a validator for the "email" field. It is called by the builders before save.
	EmailValidator func(string) error
	// PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	PasswordValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByTeam orders the results by the team field.
func ByTeam(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTeam, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByGamesCount orders the results by games count.
func ByGamesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newGamesStep(), opts...)
	}
}

// ByGames orders the results by games terms.
func ByGames(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newGamesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByBattingRecordsCount orders the results by batting_records count.
func ByBattingRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newBattingRecordsStep(), opts...)
	}
}

// ByBattingRecords orders the results by batting_records terms.
func ByBattingRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newBattingRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByPitchingRecordsCount orders the results by pitching_records count.
func ByPitchingRecordsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newPitchingRecordsStep(), opts...)
	}
}

// ByPitchingRecords orders the results by pitching_records terms.
func ByPitchingRecords(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newPitchingRecordsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newGamesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(GamesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, GamesTable, GamesColumn),
	)
}
func newBattingRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(BattingRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, BattingRecordsTable, BattingRecordsColumn),
	)
}
func newPitchingRecordsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(PitchingRecordsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, PitchingRecordsTable, PitchingRecordsColumn),
	)
}
