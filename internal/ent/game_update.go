// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/batterrecord"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/pitcherrecord"
	"mystats-server/internal/ent/predicate"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GameUpdate is the builder for updating Game entities.
type GameUpdate struct {
	config
	hooks    []Hook
	mutation *GameMutation
}

// Where appends a list predicates to the GameUpdate builder.
func (gu *GameUpdate) Where(ps ...predicate.Game) *GameUpdate {
	gu.mutation.Where(ps...)
	return gu
}

// SetDate sets the "date" field.
func (gu *GameUpdate) SetDate(t time.Time) *GameUpdate {
	gu.mutation.SetDate(t)
	return gu
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (gu *GameUpdate) SetNillableDate(t *time.Time) *GameUpdate {
	if t != nil {
		gu.SetDate(*t)
	}
	return gu
}

// SetOpponent sets the "opponent" field.
func (gu *GameUpdate) SetOpponent(s string) *GameUpdate {
	gu.mutation.SetOpponent(s)
	return gu
}

// SetNillableOpponent sets the "opponent" field if the given value is not nil.
func (gu *GameUpdate) SetNillableOpponent(s *string) *GameUpdate {
	if s != nil {
		gu.SetOpponent(*s)
	}
	return gu
}

// ClearOpponent clears the value of the "opponent" field.
func (gu *GameUpdate) ClearOpponent() *GameUpdate {
	gu.mutation.ClearOpponent()
	return gu
}

// SetLocation sets the "location" field.
func (gu *GameUpdate) SetLocation(s string) *GameUpdate {
	gu.mutation.SetLocation(s)
	return gu
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (gu *GameUpdate) SetNillableLocation(s *string) *GameUpdate {
	if s != nil {
		gu.SetLocation(*s)
	}
	return gu
}

// ClearLocation clears the value of the "location" field.
func (gu *GameUpdate) ClearLocation() *GameUpdate {
	gu.mutation.ClearLocation()
	return gu
}

// SetResult sets the "result" field.
func (gu *GameUpdate) SetResult(s string) *GameUpdate {
	gu.mutation.SetResult(s)
	return gu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (gu *GameUpdate) SetNillableResult(s *string) *GameUpdate {
	if s != nil {
		gu.SetResult(*s)
	}
	return gu
}

// ClearResult clears the value of the "result" field.
func (gu *GameUpdate) ClearResult() *GameUpdate {
	gu.mutation.ClearResult()
	return gu
}

// SetMyScore sets the "my_score" field.
func (gu *GameUpdate) SetMyScore(i int) *GameUpdate {
	gu.mutation.ResetMyScore()
	gu.mutation.SetMyScore(i)
	return gu
}

// SetNillableMyScore sets the "my_score" field if the given value is not nil.
func (gu *GameUpdate) SetNillableMyScore(i *int) *GameUpdate {
	if i != nil {
		gu.SetMyScore(*i)
	}
	return gu
}

// AddMyScore adds i to the "my_score" field.
func (gu *GameUpdate) AddMyScore(i int) *GameUpdate {
	gu.mutation.AddMyScore(i)
	return gu
}

// ClearMyScore clears the value of the "my_score" field.
func (gu *GameUpdate) ClearMyScore() *GameUpdate {
	gu.mutation.ClearMyScore()
	return gu
}

// SetOpponentScore sets the "opponent_score" field.
func (gu *GameUpdate) SetOpponentScore(i int) *GameUpdate {
	gu.mutation.ResetOpponentScore()
	gu.mutation.SetOpponentScore(i)
	return gu
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (gu *GameUpdate) SetNillableOpponentScore(i *int) *GameUpdate {
	if i != nil {
		gu.SetOpponentScore(*i)
	}
	return gu
}

// AddOpponentScore adds i to the "opponent_score" field.
func (gu *GameUpdate) AddOpponentScore(i int) *GameUpdate {
	gu.mutation.AddOpponentScore(i)
	return gu
}

// ClearOpponentScore clears the value of the "opponent_score" field.
func (gu *GameUpdate) ClearOpponentScore() *GameUpdate {
	gu.mutation.ClearOpponentScore()
	return gu
}

// SetCreatedAt sets the "created_at" field.
func (gu *GameUpdate) SetCreatedAt(t time.Time) *GameUpdate {
	gu.mutation.SetCreatedAt(t)
	return gu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gu *GameUpdate) SetNillableCreatedAt(t *time.Time) *GameUpdate {
	if t != nil {
		gu.SetCreatedAt(*t)
	}
	return gu
}

// SetUpdatedAt sets the "updated_at" field.
func (gu *GameUpdate) SetUpdatedAt(t time.Time) *GameUpdate {
	gu.mutation.SetUpdatedAt(t)
	return gu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (gu *GameUpdate) SetUserID(id int) *GameUpdate {
	gu.mutation.SetUserID(id)
	return gu
}

// SetUser sets the "user" edge to the User entity.
func (gu *GameUpdate) SetUser(u *User) *GameUpdate {
	return gu.SetUserID(u.ID)
}

// AddBattingRecordIDs adds the "batting_records" edge to the BatterRecord entity by IDs.
func (gu *GameUpdate) AddBattingRecordIDs(ids ...int) *GameUpdate {
	gu.mutation.AddBattingRecordIDs(ids...)
	return gu
}

// AddBattingRecords adds the "batting_records" edges to the BatterRecord entity.
func (gu *GameUpdate) AddBattingRecords(b ...*BatterRecord) *GameUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gu.AddBattingRecordIDs(ids...)
}

// AddPitchingRecordIDs adds the "pitching_records" edge to the PitcherRecord entity by IDs.
func (gu *GameUpdate) AddPitchingRecordIDs(ids ...int) *GameUpdate {
	gu.mutation.AddPitchingRecordIDs(ids...)
	return gu
}

// AddPitchingRecords adds the "pitching_records" edges to the PitcherRecord entity.
func (gu *GameUpdate) AddPitchingRecords(p ...*PitcherRecord) *GameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.AddPitchingRecordIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (gu *GameUpdate) Mutation() *GameMutation {
	return gu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (gu *GameUpdate) ClearUser() *GameUpdate {
	gu.mutation.ClearUser()
	return gu
}

// ClearBattingRecords clears all "batting_records" edges to the BatterRecord entity.
func (gu *GameUpdate) ClearBattingRecords() *GameUpdate {
	gu.mutation.ClearBattingRecords()
	return gu
}

// RemoveBattingRecordIDs removes the "batting_records" edge to BatterRecord entities by IDs.
func (gu *GameUpdate) RemoveBattingRecordIDs(ids ...int) *GameUpdate {
	gu.mutation.RemoveBattingRecordIDs(ids...)
	return gu
}

// RemoveBattingRecords removes "batting_records" edges to BatterRecord entities.
func (gu *GameUpdate) RemoveBattingRecords(b ...*BatterRecord) *GameUpdate {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return gu.RemoveBattingRecordIDs(ids...)
}

// ClearPitchingRecords clears all "pitching_records" edges to the PitcherRecord entity.
func (gu *GameUpdate) ClearPitchingRecords() *GameUpdate {
	gu.mutation.ClearPitchingRecords()
	return gu
}

// RemovePitchingRecordIDs removes the "pitching_records" edge to PitcherRecord entities by IDs.
func (gu *GameUpdate) RemovePitchingRecordIDs(ids ...int) *GameUpdate {
	gu.mutation.RemovePitchingRecordIDs(ids...)
	return gu
}

// RemovePitchingRecords removes "pitching_records" edges to PitcherRecord entities.
func (gu *GameUpdate) RemovePitchingRecords(p ...*PitcherRecord) *GameUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return gu.RemovePitchingRecordIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gu *GameUpdate) Save(ctx context.Context) (int, error) {
	gu.defaults()
	return withHooks(ctx, gu.sqlSave, gu.mutation, gu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gu *GameUpdate) SaveX(ctx context.Context) int {
	affected, err := gu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gu *GameUpdate) Exec(ctx context.Context) error {
	_, err := gu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gu *GameUpdate) ExecX(ctx context.Context) {
	if err := gu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gu *GameUpdate) defaults() {
	if _, ok := gu.mutation.UpdatedAt(); !ok {
		v := game.UpdateDefaultUpdatedAt()
		gu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gu *GameUpdate) check() error {
	if gu.mutation.UserCleared() && len(gu.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Game.user"`)
	}
	return nil
}

func (gu *GameUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	if ps := gu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gu.mutation.Date(); ok {
		_spec.SetField(game.FieldDate, field.TypeTime, value)
	}
	if value, ok := gu.mutation.Opponent(); ok {
		_spec.SetField(game.FieldOpponent, field.TypeString, value)
	}
	if gu.mutation.OpponentCleared() {
		_spec.ClearField(game.FieldOpponent, field.TypeString)
	}
	if value, ok := gu.mutation.Location(); ok {
		_spec.SetField(game.FieldLocation, field.TypeString, value)
	}
	if gu.mutation.LocationCleared() {
		_spec.ClearField(game.FieldLocation, field.TypeString)
	}
	if value, ok := gu.mutation.Result(); ok {
		_spec.SetField(game.FieldResult, field.TypeString, value)
	}
	if gu.mutation.ResultCleared() {
		_spec.ClearField(game.FieldResult, field.TypeString)
	}
	if value, ok := gu.mutation.MyScore(); ok {
		_spec.SetField(game.FieldMyScore, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedMyScore(); ok {
		_spec.AddField(game.FieldMyScore, field.TypeInt, value)
	}
	if gu.mutation.MyScoreCleared() {
		_spec.ClearField(game.FieldMyScore, field.TypeInt)
	}
	if value, ok := gu.mutation.OpponentScore(); ok {
		_spec.SetField(game.FieldOpponentScore, field.TypeInt, value)
	}
	if value, ok := gu.mutation.AddedOpponentScore(); ok {
		_spec.AddField(game.FieldOpponentScore, field.TypeInt, value)
	}
	if gu.mutation.OpponentScoreCleared() {
		_spec.ClearField(game.FieldOpponentScore, field.TypeInt)
	}
	if value, ok := gu.mutation.CreatedAt(); ok {
		_spec.SetField(game.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := gu.mutation.UpdatedAt(); ok {
		_spec.SetField(game.FieldUpdatedAt, field.TypeTime, value)
	}
	if gu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.UserTable,
			Columns: []string{game.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.UserTable,
			Columns: []string{game.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.BattingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedBattingRecordsIDs(); len(nodes) > 0 && !gu.mutation.BattingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.BattingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if gu.mutation.PitchingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.RemovedPitchingRecordsIDs(); len(nodes) > 0 && !gu.mutation.PitchingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gu.mutation.PitchingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gu.mutation.done = true
	return n, nil
}

// GameUpdateOne is the builder for updating a single Game entity.
type GameUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GameMutation
}

// SetDate sets the "date" field.
func (guo *GameUpdateOne) SetDate(t time.Time) *GameUpdateOne {
	guo.mutation.SetDate(t)
	return guo
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableDate(t *time.Time) *GameUpdateOne {
	if t != nil {
		guo.SetDate(*t)
	}
	return guo
}

// SetOpponent sets the "opponent" field.
func (guo *GameUpdateOne) SetOpponent(s string) *GameUpdateOne {
	guo.mutation.SetOpponent(s)
	return guo
}

// SetNillableOpponent sets the "opponent" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableOpponent(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetOpponent(*s)
	}
	return guo
}

// ClearOpponent clears the value of the "opponent" field.
func (guo *GameUpdateOne) ClearOpponent() *GameUpdateOne {
	guo.mutation.ClearOpponent()
	return guo
}

// SetLocation sets the "location" field.
func (guo *GameUpdateOne) SetLocation(s string) *GameUpdateOne {
	guo.mutation.SetLocation(s)
	return guo
}

// SetNillableLocation sets the "location" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableLocation(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetLocation(*s)
	}
	return guo
}

// ClearLocation clears the value of the "location" field.
func (guo *GameUpdateOne) ClearLocation() *GameUpdateOne {
	guo.mutation.ClearLocation()
	return guo
}

// SetResult sets the "result" field.
func (guo *GameUpdateOne) SetResult(s string) *GameUpdateOne {
	guo.mutation.SetResult(s)
	return guo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableResult(s *string) *GameUpdateOne {
	if s != nil {
		guo.SetResult(*s)
	}
	return guo
}

// ClearResult clears the value of the "result" field.
func (guo *GameUpdateOne) ClearResult() *GameUpdateOne {
	guo.mutation.ClearResult()
	return guo
}

// SetMyScore sets the "my_score" field.
func (guo *GameUpdateOne) SetMyScore(i int) *GameUpdateOne {
	guo.mutation.ResetMyScore()
	guo.mutation.SetMyScore(i)
	return guo
}

// SetNillableMyScore sets the "my_score" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableMyScore(i *int) *GameUpdateOne {
	if i != nil {
		guo.SetMyScore(*i)
	}
	return guo
}

// AddMyScore adds i to the "my_score" field.
func (guo *GameUpdateOne) AddMyScore(i int) *GameUpdateOne {
	guo.mutation.AddMyScore(i)
	return guo
}

// ClearMyScore clears the value of the "my_score" field.
func (guo *GameUpdateOne) ClearMyScore() *GameUpdateOne {
	guo.mutation.ClearMyScore()
	return guo
}

// SetOpponentScore sets the "opponent_score" field.
func (guo *GameUpdateOne) SetOpponentScore(i int) *GameUpdateOne {
	guo.mutation.ResetOpponentScore()
	guo.mutation.SetOpponentScore(i)
	return guo
}

// SetNillableOpponentScore sets the "opponent_score" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableOpponentScore(i *int) *GameUpdateOne {
	if i != nil {
		guo.SetOpponentScore(*i)
	}
	return guo
}

// AddOpponentScore adds i to the "opponent_score" field.
func (guo *GameUpdateOne) AddOpponentScore(i int) *GameUpdateOne {
	guo.mutation.AddOpponentScore(i)
	return guo
}

// ClearOpponentScore clears the value of the "opponent_score" field.
func (guo *GameUpdateOne) ClearOpponentScore() *GameUpdateOne {
	guo.mutation.ClearOpponentScore()
	return guo
}

// SetCreatedAt sets the "created_at" field.
func (guo *GameUpdateOne) SetCreatedAt(t time.Time) *GameUpdateOne {
	guo.mutation.SetCreatedAt(t)
	return guo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (guo *GameUpdateOne) SetNillableCreatedAt(t *time.Time) *GameUpdateOne {
	if t != nil {
		guo.SetCreatedAt(*t)
	}
	return guo
}

// SetUpdatedAt sets the "updated_at" field.
func (guo *GameUpdateOne) SetUpdatedAt(t time.Time) *GameUpdateOne {
	guo.mutation.SetUpdatedAt(t)
	return guo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (guo *GameUpdateOne) SetUserID(id int) *GameUpdateOne {
	guo.mutation.SetUserID(id)
	return guo
}

// SetUser sets the "user" edge to the User entity.
func (guo *GameUpdateOne) SetUser(u *User) *GameUpdateOne {
	return guo.SetUserID(u.ID)
}

// AddBattingRecordIDs adds the "batting_records" edge to the BatterRecord entity by IDs.
func (guo *GameUpdateOne) AddBattingRecordIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddBattingRecordIDs(ids...)
	return guo
}

// AddBattingRecords adds the "batting_records" edges to the BatterRecord entity.
func (guo *GameUpdateOne) AddBattingRecords(b ...*BatterRecord) *GameUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return guo.AddBattingRecordIDs(ids...)
}

// AddPitchingRecordIDs adds the "pitching_records" edge to the PitcherRecord entity by IDs.
func (guo *GameUpdateOne) AddPitchingRecordIDs(ids ...int) *GameUpdateOne {
	guo.mutation.AddPitchingRecordIDs(ids...)
	return guo
}

// AddPitchingRecords adds the "pitching_records" edges to the PitcherRecord entity.
func (guo *GameUpdateOne) AddPitchingRecords(p ...*PitcherRecord) *GameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.AddPitchingRecordIDs(ids...)
}

// Mutation returns the GameMutation object of the builder.
func (guo *GameUpdateOne) Mutation() *GameMutation {
	return guo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (guo *GameUpdateOne) ClearUser() *GameUpdateOne {
	guo.mutation.ClearUser()
	return guo
}

// ClearBattingRecords clears all "batting_records" edges to the BatterRecord entity.
func (guo *GameUpdateOne) ClearBattingRecords() *GameUpdateOne {
	guo.mutation.ClearBattingRecords()
	return guo
}

// RemoveBattingRecordIDs removes the "batting_records" edge to BatterRecord entities by IDs.
func (guo *GameUpdateOne) RemoveBattingRecordIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemoveBattingRecordIDs(ids...)
	return guo
}

// RemoveBattingRecords removes "batting_records" edges to BatterRecord entities.
func (guo *GameUpdateOne) RemoveBattingRecords(b ...*BatterRecord) *GameUpdateOne {
	ids := make([]int, len(b))
	for i := range b {
		ids[i] = b[i].ID
	}
	return guo.RemoveBattingRecordIDs(ids...)
}

// ClearPitchingRecords clears all "pitching_records" edges to the PitcherRecord entity.
func (guo *GameUpdateOne) ClearPitchingRecords() *GameUpdateOne {
	guo.mutation.ClearPitchingRecords()
	return guo
}

// RemovePitchingRecordIDs removes the "pitching_records" edge to PitcherRecord entities by IDs.
func (guo *GameUpdateOne) RemovePitchingRecordIDs(ids ...int) *GameUpdateOne {
	guo.mutation.RemovePitchingRecordIDs(ids...)
	return guo
}

// RemovePitchingRecords removes "pitching_records" edges to PitcherRecord entities.
func (guo *GameUpdateOne) RemovePitchingRecords(p ...*PitcherRecord) *GameUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return guo.RemovePitchingRecordIDs(ids...)
}

// Where appends a list predicates to the GameUpdate builder.
func (guo *GameUpdateOne) Where(ps ...predicate.Game) *GameUpdateOne {
	guo.mutation.Where(ps...)
	return guo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (guo *GameUpdateOne) Select(field string, fields ...string) *GameUpdateOne {
	guo.fields = append([]string{field}, fields...)
	return guo
}

// Save executes the query and returns the updated Game entity.
func (guo *GameUpdateOne) Save(ctx context.Context) (*Game, error) {
	guo.defaults()
	return withHooks(ctx, guo.sqlSave, guo.mutation, guo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (guo *GameUpdateOne) SaveX(ctx context.Context) *Game {
	node, err := guo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (guo *GameUpdateOne) Exec(ctx context.Context) error {
	_, err := guo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (guo *GameUpdateOne) ExecX(ctx context.Context) {
	if err := guo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (guo *GameUpdateOne) defaults() {
	if _, ok := guo.mutation.UpdatedAt(); !ok {
		v := game.UpdateDefaultUpdatedAt()
		guo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (guo *GameUpdateOne) check() error {
	if guo.mutation.UserCleared() && len(guo.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Game.user"`)
	}
	return nil
}

func (guo *GameUpdateOne) sqlSave(ctx context.Context) (_node *Game, err error) {
	if err := guo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(game.Table, game.Columns, sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt))
	id, ok := guo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Game.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := guo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, game.FieldID)
		for _, f := range fields {
			if !game.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != game.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := guo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := guo.mutation.Date(); ok {
		_spec.SetField(game.FieldDate, field.TypeTime, value)
	}
	if value, ok := guo.mutation.Opponent(); ok {
		_spec.SetField(game.FieldOpponent, field.TypeString, value)
	}
	if guo.mutation.OpponentCleared() {
		_spec.ClearField(game.FieldOpponent, field.TypeString)
	}
	if value, ok := guo.mutation.Location(); ok {
		_spec.SetField(game.FieldLocation, field.TypeString, value)
	}
	if guo.mutation.LocationCleared() {
		_spec.ClearField(game.FieldLocation, field.TypeString)
	}
	if value, ok := guo.mutation.Result(); ok {
		_spec.SetField(game.FieldResult, field.TypeString, value)
	}
	if guo.mutation.ResultCleared() {
		_spec.ClearField(game.FieldResult, field.TypeString)
	}
	if value, ok := guo.mutation.MyScore(); ok {
		_spec.SetField(game.FieldMyScore, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedMyScore(); ok {
		_spec.AddField(game.FieldMyScore, field.TypeInt, value)
	}
	if guo.mutation.MyScoreCleared() {
		_spec.ClearField(game.FieldMyScore, field.TypeInt)
	}
	if value, ok := guo.mutation.OpponentScore(); ok {
		_spec.SetField(game.FieldOpponentScore, field.TypeInt, value)
	}
	if value, ok := guo.mutation.AddedOpponentScore(); ok {
		_spec.AddField(game.FieldOpponentScore, field.TypeInt, value)
	}
	if guo.mutation.OpponentScoreCleared() {
		_spec.ClearField(game.FieldOpponentScore, field.TypeInt)
	}
	if value, ok := guo.mutation.CreatedAt(); ok {
		_spec.SetField(game.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := guo.mutation.UpdatedAt(); ok {
		_spec.SetField(game.FieldUpdatedAt, field.TypeTime, value)
	}
	if guo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.UserTable,
			Columns: []string{game.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   game.UserTable,
			Columns: []string{game.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.BattingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedBattingRecordsIDs(); len(nodes) > 0 && !guo.mutation.BattingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.BattingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.BattingRecordsTable,
			Columns: []string{game.BattingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(batterrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if guo.mutation.PitchingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.RemovedPitchingRecordsIDs(); len(nodes) > 0 && !guo.mutation.PitchingRecordsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := guo.mutation.PitchingRecordsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   game.PitchingRecordsTable,
			Columns: []string{game.PitchingRecordsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Game{config: guo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, guo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{game.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	guo.mutation.done = true
	return _node, nil
}
