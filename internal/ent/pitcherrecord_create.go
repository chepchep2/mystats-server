// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"mystats-server/internal/ent/game"
	"mystats-server/internal/ent/pitcherrecord"
	"mystats-server/internal/ent/user"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PitcherRecordCreate is the builder for creating a PitcherRecord entity.
type PitcherRecordCreate struct {
	config
	mutation *PitcherRecordMutation
	hooks    []Hook
}

// SetGames sets the "games" field.
func (prc *PitcherRecordCreate) SetGames(i int) *PitcherRecordCreate {
	prc.mutation.SetGames(i)
	return prc
}

// SetNillableGames sets the "games" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableGames(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetGames(*i)
	}
	return prc
}

// SetEra sets the "era" field.
func (prc *PitcherRecordCreate) SetEra(f float64) *PitcherRecordCreate {
	prc.mutation.SetEra(f)
	return prc
}

// SetNillableEra sets the "era" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableEra(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetEra(*f)
	}
	return prc
}

// SetWins sets the "wins" field.
func (prc *PitcherRecordCreate) SetWins(i int) *PitcherRecordCreate {
	prc.mutation.SetWins(i)
	return prc
}

// SetNillableWins sets the "wins" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableWins(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetWins(*i)
	}
	return prc
}

// SetLosses sets the "losses" field.
func (prc *PitcherRecordCreate) SetLosses(i int) *PitcherRecordCreate {
	prc.mutation.SetLosses(i)
	return prc
}

// SetNillableLosses sets the "losses" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableLosses(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetLosses(*i)
	}
	return prc
}

// SetSaves sets the "saves" field.
func (prc *PitcherRecordCreate) SetSaves(i int) *PitcherRecordCreate {
	prc.mutation.SetSaves(i)
	return prc
}

// SetNillableSaves sets the "saves" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableSaves(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetSaves(*i)
	}
	return prc
}

// SetHolds sets the "holds" field.
func (prc *PitcherRecordCreate) SetHolds(i int) *PitcherRecordCreate {
	prc.mutation.SetHolds(i)
	return prc
}

// SetNillableHolds sets the "holds" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableHolds(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetHolds(*i)
	}
	return prc
}

// SetWinningPct sets the "winning_pct" field.
func (prc *PitcherRecordCreate) SetWinningPct(f float64) *PitcherRecordCreate {
	prc.mutation.SetWinningPct(f)
	return prc
}

// SetNillableWinningPct sets the "winning_pct" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableWinningPct(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetWinningPct(*f)
	}
	return prc
}

// SetBattersFaced sets the "batters_faced" field.
func (prc *PitcherRecordCreate) SetBattersFaced(i int) *PitcherRecordCreate {
	prc.mutation.SetBattersFaced(i)
	return prc
}

// SetNillableBattersFaced sets the "batters_faced" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableBattersFaced(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetBattersFaced(*i)
	}
	return prc
}

// SetOpponentAtBats sets the "opponent_at_bats" field.
func (prc *PitcherRecordCreate) SetOpponentAtBats(i int) *PitcherRecordCreate {
	prc.mutation.SetOpponentAtBats(i)
	return prc
}

// SetNillableOpponentAtBats sets the "opponent_at_bats" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableOpponentAtBats(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetOpponentAtBats(*i)
	}
	return prc
}

// SetInnings sets the "innings" field.
func (prc *PitcherRecordCreate) SetInnings(f float64) *PitcherRecordCreate {
	prc.mutation.SetInnings(f)
	return prc
}

// SetNillableInnings sets the "innings" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableInnings(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetInnings(*f)
	}
	return prc
}

// SetHitsAllowed sets the "hits_allowed" field.
func (prc *PitcherRecordCreate) SetHitsAllowed(i int) *PitcherRecordCreate {
	prc.mutation.SetHitsAllowed(i)
	return prc
}

// SetNillableHitsAllowed sets the "hits_allowed" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableHitsAllowed(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetHitsAllowed(*i)
	}
	return prc
}

// SetHomerunsAllowed sets the "homeruns_allowed" field.
func (prc *PitcherRecordCreate) SetHomerunsAllowed(i int) *PitcherRecordCreate {
	prc.mutation.SetHomerunsAllowed(i)
	return prc
}

// SetNillableHomerunsAllowed sets the "homeruns_allowed" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableHomerunsAllowed(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetHomerunsAllowed(*i)
	}
	return prc
}

// SetWalks sets the "walks" field.
func (prc *PitcherRecordCreate) SetWalks(i int) *PitcherRecordCreate {
	prc.mutation.SetWalks(i)
	return prc
}

// SetNillableWalks sets the "walks" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableWalks(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetWalks(*i)
	}
	return prc
}

// SetHitByPitch sets the "hit_by_pitch" field.
func (prc *PitcherRecordCreate) SetHitByPitch(i int) *PitcherRecordCreate {
	prc.mutation.SetHitByPitch(i)
	return prc
}

// SetNillableHitByPitch sets the "hit_by_pitch" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableHitByPitch(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetHitByPitch(*i)
	}
	return prc
}

// SetStrikeouts sets the "strikeouts" field.
func (prc *PitcherRecordCreate) SetStrikeouts(i int) *PitcherRecordCreate {
	prc.mutation.SetStrikeouts(i)
	return prc
}

// SetNillableStrikeouts sets the "strikeouts" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableStrikeouts(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetStrikeouts(*i)
	}
	return prc
}

// SetEarnedRuns sets the "earned_runs" field.
func (prc *PitcherRecordCreate) SetEarnedRuns(i int) *PitcherRecordCreate {
	prc.mutation.SetEarnedRuns(i)
	return prc
}

// SetNillableEarnedRuns sets the "earned_runs" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableEarnedRuns(i *int) *PitcherRecordCreate {
	if i != nil {
		prc.SetEarnedRuns(*i)
	}
	return prc
}

// SetWhip sets the "whip" field.
func (prc *PitcherRecordCreate) SetWhip(f float64) *PitcherRecordCreate {
	prc.mutation.SetWhip(f)
	return prc
}

// SetNillableWhip sets the "whip" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableWhip(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetWhip(*f)
	}
	return prc
}

// SetOpponentAvg sets the "opponent_avg" field.
func (prc *PitcherRecordCreate) SetOpponentAvg(f float64) *PitcherRecordCreate {
	prc.mutation.SetOpponentAvg(f)
	return prc
}

// SetNillableOpponentAvg sets the "opponent_avg" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableOpponentAvg(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetOpponentAvg(*f)
	}
	return prc
}

// SetStrikeoutRate sets the "strikeout_rate" field.
func (prc *PitcherRecordCreate) SetStrikeoutRate(f float64) *PitcherRecordCreate {
	prc.mutation.SetStrikeoutRate(f)
	return prc
}

// SetNillableStrikeoutRate sets the "strikeout_rate" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableStrikeoutRate(f *float64) *PitcherRecordCreate {
	if f != nil {
		prc.SetStrikeoutRate(*f)
	}
	return prc
}

// SetCreatedAt sets the "created_at" field.
func (prc *PitcherRecordCreate) SetCreatedAt(t time.Time) *PitcherRecordCreate {
	prc.mutation.SetCreatedAt(t)
	return prc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableCreatedAt(t *time.Time) *PitcherRecordCreate {
	if t != nil {
		prc.SetCreatedAt(*t)
	}
	return prc
}

// SetUpdatedAt sets the "updated_at" field.
func (prc *PitcherRecordCreate) SetUpdatedAt(t time.Time) *PitcherRecordCreate {
	prc.mutation.SetUpdatedAt(t)
	return prc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (prc *PitcherRecordCreate) SetNillableUpdatedAt(t *time.Time) *PitcherRecordCreate {
	if t != nil {
		prc.SetUpdatedAt(*t)
	}
	return prc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (prc *PitcherRecordCreate) SetUserID(id int) *PitcherRecordCreate {
	prc.mutation.SetUserID(id)
	return prc
}

// SetUser sets the "user" edge to the User entity.
func (prc *PitcherRecordCreate) SetUser(u *User) *PitcherRecordCreate {
	return prc.SetUserID(u.ID)
}

// SetGameID sets the "game" edge to the Game entity by ID.
func (prc *PitcherRecordCreate) SetGameID(id int) *PitcherRecordCreate {
	prc.mutation.SetGameID(id)
	return prc
}

// SetGame sets the "game" edge to the Game entity.
func (prc *PitcherRecordCreate) SetGame(g *Game) *PitcherRecordCreate {
	return prc.SetGameID(g.ID)
}

// Mutation returns the PitcherRecordMutation object of the builder.
func (prc *PitcherRecordCreate) Mutation() *PitcherRecordMutation {
	return prc.mutation
}

// Save creates the PitcherRecord in the database.
func (prc *PitcherRecordCreate) Save(ctx context.Context) (*PitcherRecord, error) {
	prc.defaults()
	return withHooks(ctx, prc.sqlSave, prc.mutation, prc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (prc *PitcherRecordCreate) SaveX(ctx context.Context) *PitcherRecord {
	v, err := prc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prc *PitcherRecordCreate) Exec(ctx context.Context) error {
	_, err := prc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prc *PitcherRecordCreate) ExecX(ctx context.Context) {
	if err := prc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prc *PitcherRecordCreate) defaults() {
	if _, ok := prc.mutation.Games(); !ok {
		v := pitcherrecord.DefaultGames
		prc.mutation.SetGames(v)
	}
	if _, ok := prc.mutation.Wins(); !ok {
		v := pitcherrecord.DefaultWins
		prc.mutation.SetWins(v)
	}
	if _, ok := prc.mutation.Losses(); !ok {
		v := pitcherrecord.DefaultLosses
		prc.mutation.SetLosses(v)
	}
	if _, ok := prc.mutation.Saves(); !ok {
		v := pitcherrecord.DefaultSaves
		prc.mutation.SetSaves(v)
	}
	if _, ok := prc.mutation.Holds(); !ok {
		v := pitcherrecord.DefaultHolds
		prc.mutation.SetHolds(v)
	}
	if _, ok := prc.mutation.BattersFaced(); !ok {
		v := pitcherrecord.DefaultBattersFaced
		prc.mutation.SetBattersFaced(v)
	}
	if _, ok := prc.mutation.OpponentAtBats(); !ok {
		v := pitcherrecord.DefaultOpponentAtBats
		prc.mutation.SetOpponentAtBats(v)
	}
	if _, ok := prc.mutation.Innings(); !ok {
		v := pitcherrecord.DefaultInnings
		prc.mutation.SetInnings(v)
	}
	if _, ok := prc.mutation.HitsAllowed(); !ok {
		v := pitcherrecord.DefaultHitsAllowed
		prc.mutation.SetHitsAllowed(v)
	}
	if _, ok := prc.mutation.HomerunsAllowed(); !ok {
		v := pitcherrecord.DefaultHomerunsAllowed
		prc.mutation.SetHomerunsAllowed(v)
	}
	if _, ok := prc.mutation.Walks(); !ok {
		v := pitcherrecord.DefaultWalks
		prc.mutation.SetWalks(v)
	}
	if _, ok := prc.mutation.HitByPitch(); !ok {
		v := pitcherrecord.DefaultHitByPitch
		prc.mutation.SetHitByPitch(v)
	}
	if _, ok := prc.mutation.Strikeouts(); !ok {
		v := pitcherrecord.DefaultStrikeouts
		prc.mutation.SetStrikeouts(v)
	}
	if _, ok := prc.mutation.EarnedRuns(); !ok {
		v := pitcherrecord.DefaultEarnedRuns
		prc.mutation.SetEarnedRuns(v)
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		v := pitcherrecord.DefaultCreatedAt()
		prc.mutation.SetCreatedAt(v)
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		v := pitcherrecord.DefaultUpdatedAt()
		prc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prc *PitcherRecordCreate) check() error {
	if _, ok := prc.mutation.Games(); !ok {
		return &ValidationError{Name: "games", err: errors.New(`ent: missing required field "PitcherRecord.games"`)}
	}
	if _, ok := prc.mutation.Wins(); !ok {
		return &ValidationError{Name: "wins", err: errors.New(`ent: missing required field "PitcherRecord.wins"`)}
	}
	if _, ok := prc.mutation.Losses(); !ok {
		return &ValidationError{Name: "losses", err: errors.New(`ent: missing required field "PitcherRecord.losses"`)}
	}
	if _, ok := prc.mutation.Saves(); !ok {
		return &ValidationError{Name: "saves", err: errors.New(`ent: missing required field "PitcherRecord.saves"`)}
	}
	if _, ok := prc.mutation.Holds(); !ok {
		return &ValidationError{Name: "holds", err: errors.New(`ent: missing required field "PitcherRecord.holds"`)}
	}
	if _, ok := prc.mutation.BattersFaced(); !ok {
		return &ValidationError{Name: "batters_faced", err: errors.New(`ent: missing required field "PitcherRecord.batters_faced"`)}
	}
	if _, ok := prc.mutation.OpponentAtBats(); !ok {
		return &ValidationError{Name: "opponent_at_bats", err: errors.New(`ent: missing required field "PitcherRecord.opponent_at_bats"`)}
	}
	if _, ok := prc.mutation.Innings(); !ok {
		return &ValidationError{Name: "innings", err: errors.New(`ent: missing required field "PitcherRecord.innings"`)}
	}
	if _, ok := prc.mutation.HitsAllowed(); !ok {
		return &ValidationError{Name: "hits_allowed", err: errors.New(`ent: missing required field "PitcherRecord.hits_allowed"`)}
	}
	if _, ok := prc.mutation.HomerunsAllowed(); !ok {
		return &ValidationError{Name: "homeruns_allowed", err: errors.New(`ent: missing required field "PitcherRecord.homeruns_allowed"`)}
	}
	if _, ok := prc.mutation.Walks(); !ok {
		return &ValidationError{Name: "walks", err: errors.New(`ent: missing required field "PitcherRecord.walks"`)}
	}
	if _, ok := prc.mutation.HitByPitch(); !ok {
		return &ValidationError{Name: "hit_by_pitch", err: errors.New(`ent: missing required field "PitcherRecord.hit_by_pitch"`)}
	}
	if _, ok := prc.mutation.Strikeouts(); !ok {
		return &ValidationError{Name: "strikeouts", err: errors.New(`ent: missing required field "PitcherRecord.strikeouts"`)}
	}
	if _, ok := prc.mutation.EarnedRuns(); !ok {
		return &ValidationError{Name: "earned_runs", err: errors.New(`ent: missing required field "PitcherRecord.earned_runs"`)}
	}
	if _, ok := prc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "PitcherRecord.created_at"`)}
	}
	if _, ok := prc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "PitcherRecord.updated_at"`)}
	}
	if len(prc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "PitcherRecord.user"`)}
	}
	if len(prc.mutation.GameIDs()) == 0 {
		return &ValidationError{Name: "game", err: errors.New(`ent: missing required edge "PitcherRecord.game"`)}
	}
	return nil
}

func (prc *PitcherRecordCreate) sqlSave(ctx context.Context) (*PitcherRecord, error) {
	if err := prc.check(); err != nil {
		return nil, err
	}
	_node, _spec := prc.createSpec()
	if err := sqlgraph.CreateNode(ctx, prc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	prc.mutation.id = &_node.ID
	prc.mutation.done = true
	return _node, nil
}

func (prc *PitcherRecordCreate) createSpec() (*PitcherRecord, *sqlgraph.CreateSpec) {
	var (
		_node = &PitcherRecord{config: prc.config}
		_spec = sqlgraph.NewCreateSpec(pitcherrecord.Table, sqlgraph.NewFieldSpec(pitcherrecord.FieldID, field.TypeInt))
	)
	if value, ok := prc.mutation.Games(); ok {
		_spec.SetField(pitcherrecord.FieldGames, field.TypeInt, value)
		_node.Games = value
	}
	if value, ok := prc.mutation.Era(); ok {
		_spec.SetField(pitcherrecord.FieldEra, field.TypeFloat64, value)
		_node.Era = value
	}
	if value, ok := prc.mutation.Wins(); ok {
		_spec.SetField(pitcherrecord.FieldWins, field.TypeInt, value)
		_node.Wins = value
	}
	if value, ok := prc.mutation.Losses(); ok {
		_spec.SetField(pitcherrecord.FieldLosses, field.TypeInt, value)
		_node.Losses = value
	}
	if value, ok := prc.mutation.Saves(); ok {
		_spec.SetField(pitcherrecord.FieldSaves, field.TypeInt, value)
		_node.Saves = value
	}
	if value, ok := prc.mutation.Holds(); ok {
		_spec.SetField(pitcherrecord.FieldHolds, field.TypeInt, value)
		_node.Holds = value
	}
	if value, ok := prc.mutation.WinningPct(); ok {
		_spec.SetField(pitcherrecord.FieldWinningPct, field.TypeFloat64, value)
		_node.WinningPct = value
	}
	if value, ok := prc.mutation.BattersFaced(); ok {
		_spec.SetField(pitcherrecord.FieldBattersFaced, field.TypeInt, value)
		_node.BattersFaced = value
	}
	if value, ok := prc.mutation.OpponentAtBats(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAtBats, field.TypeInt, value)
		_node.OpponentAtBats = value
	}
	if value, ok := prc.mutation.Innings(); ok {
		_spec.SetField(pitcherrecord.FieldInnings, field.TypeFloat64, value)
		_node.Innings = value
	}
	if value, ok := prc.mutation.HitsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHitsAllowed, field.TypeInt, value)
		_node.HitsAllowed = value
	}
	if value, ok := prc.mutation.HomerunsAllowed(); ok {
		_spec.SetField(pitcherrecord.FieldHomerunsAllowed, field.TypeInt, value)
		_node.HomerunsAllowed = value
	}
	if value, ok := prc.mutation.Walks(); ok {
		_spec.SetField(pitcherrecord.FieldWalks, field.TypeInt, value)
		_node.Walks = value
	}
	if value, ok := prc.mutation.HitByPitch(); ok {
		_spec.SetField(pitcherrecord.FieldHitByPitch, field.TypeInt, value)
		_node.HitByPitch = value
	}
	if value, ok := prc.mutation.Strikeouts(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeouts, field.TypeInt, value)
		_node.Strikeouts = value
	}
	if value, ok := prc.mutation.EarnedRuns(); ok {
		_spec.SetField(pitcherrecord.FieldEarnedRuns, field.TypeInt, value)
		_node.EarnedRuns = value
	}
	if value, ok := prc.mutation.Whip(); ok {
		_spec.SetField(pitcherrecord.FieldWhip, field.TypeFloat64, value)
		_node.Whip = value
	}
	if value, ok := prc.mutation.OpponentAvg(); ok {
		_spec.SetField(pitcherrecord.FieldOpponentAvg, field.TypeFloat64, value)
		_node.OpponentAvg = value
	}
	if value, ok := prc.mutation.StrikeoutRate(); ok {
		_spec.SetField(pitcherrecord.FieldStrikeoutRate, field.TypeFloat64, value)
		_node.StrikeoutRate = value
	}
	if value, ok := prc.mutation.CreatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := prc.mutation.UpdatedAt(); ok {
		_spec.SetField(pitcherrecord.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := prc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.UserTable,
			Columns: []string{pitcherrecord.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_pitching_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := prc.mutation.GameIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   pitcherrecord.GameTable,
			Columns: []string{pitcherrecord.GameColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(game.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.game_pitching_records = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// PitcherRecordCreateBulk is the builder for creating many PitcherRecord entities in bulk.
type PitcherRecordCreateBulk struct {
	config
	err      error
	builders []*PitcherRecordCreate
}

// Save creates the PitcherRecord entities in the database.
func (prcb *PitcherRecordCreateBulk) Save(ctx context.Context) ([]*PitcherRecord, error) {
	if prcb.err != nil {
		return nil, prcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(prcb.builders))
	nodes := make([]*PitcherRecord, len(prcb.builders))
	mutators := make([]Mutator, len(prcb.builders))
	for i := range prcb.builders {
		func(i int, root context.Context) {
			builder := prcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PitcherRecordMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, prcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, prcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, prcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (prcb *PitcherRecordCreateBulk) SaveX(ctx context.Context) []*PitcherRecord {
	v, err := prcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (prcb *PitcherRecordCreateBulk) Exec(ctx context.Context) error {
	_, err := prcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prcb *PitcherRecordCreateBulk) ExecX(ctx context.Context) {
	if err := prcb.Exec(ctx); err != nil {
		panic(err)
	}
}
